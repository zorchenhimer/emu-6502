ca65 V2.18
Main file   : 6502_functional_test.ca65
Current file: 6502_functional_test.ca65

000000r 1               ;
000000r 1               ; This program is distributed in the hope that it will be useful,
000000r 1               ; but WITHOUT ANY WARRANTY; without even the implied warranty of
000000r 1               ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
000000r 1               ; GNU General Public License for more details.
000000r 1               ;
000000r 1               ; You should have received a copy of the GNU General Public License
000000r 1               ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
000000r 1               
000000r 1               
000000r 1               ; This program is designed to test all opcodes of a 6502 emulator using all
000000r 1               ; addressing modes with focus on propper setting of the processor status
000000r 1               ; register bits.
000000r 1               ;
000000r 1               ; version 01-aug-2019
000000r 1               ; contact info at http://2m5.de or email K@2m5.de
000000r 1               ;
000000r 1               ; assembled with CA65, linked with LD65 (cc65.github.io):
000000r 1               ;  ca65 -l 6502_functional_test.lst 6502_functional_test.ca65
000000r 1               ;  ld65 6502_functional_test.o -o 6502_functional_test.bin \
000000r 1               ;   -m 6502_functional_test.map -C example.cfg
000000r 1               ; example linker config (example.cfg):
000000r 1               ;  MEMORY {
000000r 1               ;  RAM: start = $0000, size=$8000, type = rw, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM: start = $8000, size=$7FFA, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  ROM_VECTORS: start = $FFFA, size=6, type = ro, fill = yes, \
000000r 1               ;   fillval = $FF, file = %O;
000000r 1               ;  }
000000r 1               ;  SEGMENTS {
000000r 1               ;  ZEROPAGE: load=RAM, type=rw;
000000r 1               ;  DATA: load=RAM, type=rw, offset=$0200;
000000r 1               ;  CODE: load=RAM, type=rw, offset=$0400;
000000r 1               ;  VECTORS: load=ROM_VECTORS, type=ro;
000000r 1               ;  }
000000r 1               ;
000000r 1               ; No IO - should be run from a monitor with access to registers.
000000r 1               ; To run load intel hex image with a load command, than alter PC to 400 hex
000000r 1               ; (code_segment) and enter a go command.
000000r 1               ; Loop on program counter determines error or successful completion of test.
000000r 1               ; Check listing for relevant traps (jump/branch *).
000000r 1               ; Please note that in early tests some instructions will have to be used before
000000r 1               ; they are actually tested!
000000r 1               ;
000000r 1               ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
000000r 1               ; Tests documented behavior of the original NMOS 6502 only! No unofficial
000000r 1               ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
000000r 1               ; not be tested. Decimal ops will only be tested with valid BCD operands and
000000r 1               ; N V Z flags will be ignored.
000000r 1               ;
000000r 1               ; Debugging hints:
000000r 1               ;     Most of the code is written sequentially. if you hit a trap, check the
000000r 1               ;   immediately preceeding code for the instruction to be tested. Results are
000000r 1               ;   tested first, flags are checked second by pushing them onto the stack and
000000r 1               ;   pulling them to the accumulator after the result was checked. The "real"
000000r 1               ;   flags are no longer valid for the tested instruction at this time!
000000r 1               ;     If the tested instruction was indexed, the relevant index (X or Y) must
000000r 1               ;   also be checked. Opposed to the flags, X and Y registers are still valid.
000000r 1               ;
000000r 1               ; versions:
000000r 1               ;   28-jul-2012  1st version distributed for testing
000000r 1               ;   29-jul-2012  fixed references to location 0, now #0
000000r 1               ;                added license - GPLv3
000000r 1               ;   30-jul-2012  added configuration options
000000r 1               ;   01-aug-2012  added trap macro to allow user to change error handling
000000r 1               ;   01-dec-2012  fixed trap in branch field must be a branch
000000r 1               ;   02-mar-2013  fixed PLA flags not tested
000000r 1               ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
000000r 1               ;                added test sequence check to detect if tests jump their fence
000000r 1               ;   23-jul-2013  added RAM integrity check option
000000r 1               ;   16-aug-2013  added error report to standard output option
000000r 1               ;   13-dec-2014  added binary/decimal opcode table switch test
000000r 1               ;   14-dec-2014  improved relative address test
000000r 1               ;   23-aug-2015  added option to disable self modifying tests
000000r 1               ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
000000r 1               ;                added small branch offset pretest
000000r 1               ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
000000r 1               ;   04-dec-2017  fixed BRK only tested with interrupts enabled
000000r 1               ;                added option to skip the remainder of a failing test
000000r 1               ;                in report.i65
000000r 1               
000000r 1               
000000r 1               ; C O N F I G U R A T I O N
000000r 1               
000000r 1               ;ROM_vectors writable (0=no, 1=yes)
000000r 1               ;if ROM vectors can not be used interrupts will not be trapped
000000r 1               ;as a consequence BRK can not be tested but will be emulated to test RTI
000000r 1               ROM_vectors = 1
000000r 1               
000000r 1               ;load_data_direct (0=move from code segment, 1=load directly)
000000r 1               ;loading directly is preferred but may not be supported by your platform
000000r 1               ;0 produces only consecutive object code, 1 is not suitable for a binary image
000000r 1               load_data_direct = 1
000000r 1               
000000r 1               ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
000000r 1               ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
000000r 1               ;tested if you allow changing the interrupt status (I_flag = 3)
000000r 1               I_flag = 3
000000r 1               
000000r 1               ;configure memory - try to stay away from memory used by the system
000000r 1               ;zero_page memory start address, $50 (80) consecutive Bytes required
000000r 1               ;                                add 2 if I_flag = 2
000000r 1               zero_page = $a
000000r 1               
000000r 1               ;data_segment memory start address, $6A (106) consecutive Bytes required
000000r 1               ; check that this matches the linker configuration file
000000r 1               data_segment = $200
000000r 1                   .if (data_segment & $ff) <> 0
000000r 1                       .error "low byte of data_segment MUST be $00 !!"
000000r 1                   .endif
000000r 1               
000000r 1               ;code_segment memory start address, 13kB of consecutive space required
000000r 1               ;                                   add 2.5 kB if I_flag = 2
000000r 1               ; check that this matches the linker configuration file
000000r 1               code_segment = $400
000000r 1               
000000r 1               ;self modifying code may be disabled to allow running in ROM
000000r 1               ;0=part of the code is self modifying and must reside in RAM
000000r 1               ;1=tests disabled: branch range
000000r 1               disable_selfmod = 0
000000r 1               
000000r 1               ;report errors through I/O channel (0=use standard self trap loops, 1=include
000000r 1               ;report.i65 as I/O channel, add 3.5 kB)
000000r 1               report = 0
000000r 1               
000000r 1               ;RAM integrity test option. Checks for undesired RAM writes.
000000r 1               ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
000000r 1               ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
000000r 1               ram_top = 0
000000r 1               
000000r 1               ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
000000r 1               ;2=disable including decimal flag in processor status
000000r 1               disable_decimal = 1
000000r 1               
000000r 1               ;macros for error & success traps to allow user modification
000000r 1               ;example:
000000r 1               ;        .macro  trap
000000r 1               ;        jsr my_error_handler
000000r 1               ;        .endmacro
000000r 1               ;        .macro  trap_eq
000000r 1               ;        bne :+
000000r 1               ;        trap           ;failed equal (zero)
000000r 1               ;:
000000r 1               ;        .endmacro
000000r 1               ;
000000r 1               ; my_error_handler should pop the calling address from the stack and report it.
000000r 1               ; putting larger portions of code (more than 3 bytes) inside the trap macro
000000r 1               ; may lead to branch range problems for some tests.
000000r 1                   .if report = 0
000000r 1                       .macro  trap
000000r 1                       jmp *           ;failed anyway
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       beq *           ;failed equal (zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       bne *           ;failed not equal (non zero)
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcs *           ;failed carry set
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcc *           ;failed carry clear
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bmi *           ;failed minus (bit 7 set)
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bpl *           ;failed plus (bit 7 clear)
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvs *           ;failed overflow set
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvc *           ;failed overflow clear
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jmp *           ;test passed, no errors
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1                   .if report = 1
000000r 1                       .macro  trap
000000r 1                       jsr report_error
000000r 1                       .endmacro
000000r 1                       .macro  trap_eq
000000r 1                       bne :+
000000r 1                       trap           ;failed equal (zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_ne
000000r 1                       beq :+
000000r 1                       trap            ;failed not equal (non zero)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cs
000000r 1                       bcc :+
000000r 1                       trap            ;failed carry set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_cc
000000r 1                       bcs :+
000000r 1                       trap            ;failed carry clear
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_mi
000000r 1                       bpl :+
000000r 1                       trap            ;failed minus (bit 7 set)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_pl
000000r 1                       bmi :+
000000r 1                       trap            ;failed plus (bit 7 clear)
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vs
000000r 1                       bvc :+
000000r 1                       trap            ;failed overflow set
000000r 1               :
000000r 1                       .endmacro
000000r 1                       .macro  trap_vc
000000r 1                       bvs :+
000000r 1                       trap            ;failed overflow clear
000000r 1               :
000000r 1                       .endmacro
000000r 1               ; please observe that during the test the stack gets invalidated
000000r 1               ; therefore a RTS inside the success macro is not possible
000000r 1                       .macro  success
000000r 1                       jsr report_success
000000r 1                       .endmacro
000000r 1                   .endif
000000r 1               
000000r 1                   .define equ =
000000r 1               
000000r 1               carry   equ %00000001   ;flag bits in status
000000r 1               zero    equ %00000010
000000r 1               intdis  equ %00000100
000000r 1               decmode equ %00001000
000000r 1               break   equ %00010000
000000r 1               reserv  equ %00100000
000000r 1               overfl  equ %01000000
000000r 1               minus   equ %10000000
000000r 1               
000000r 1               fc      equ carry
000000r 1               fz      equ zero
000000r 1               fzc     equ carry+zero
000000r 1               fv      equ overfl
000000r 1               fvz     equ overfl+zero
000000r 1               fn      equ minus
000000r 1               fnc     equ minus+carry
000000r 1               fnz     equ minus+zero
000000r 1               fnzc    equ minus+zero+carry
000000r 1               fnv     equ minus+overfl
000000r 1               
000000r 1               fao     equ break+reserv    ;bits always on after PHP, BRK
000000r 1               fai     equ fao+intdis      ;+ forced interrupt disable
000000r 1               faod    equ fao+decmode     ;+ ignore decimal
000000r 1               faid    equ fai+decmode     ;+ ignore decimal
000000r 1               m8      equ $ff             ;8 bit mask
000000r 1               m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
000000r 1               
000000r 1               ;macros to allow masking of status bits.
000000r 1               ;masking test of decimal bit
000000r 1               ;masking of interrupt enable/disable on load and compare
000000r 1               ;masking of always on bits after PHP or BRK (unused & break) on compare
000000r 1                   .if disable_decimal < 2
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i          ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8i   ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fai)&m8    ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #(p1|fai)       ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           cmp #(p1|fao)&m8i   ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           eor #(p1&m8i|fao)   ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           cmp #(p1|fao)&m8    ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor #p1|fao         ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .else
000000r 1                       .if I_flag = 0
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1&m8i         ;force enable interrupts (mask I)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;I_flag is always enabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 1
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1|intdis      ;force disable interrupts
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faid)&m8   ;I_flag is always disabled + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1|faid)      ;invert expected flags + always on bits + I
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 2
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1
000000r 1                           ora flag_I_on       ;restore I-flag
000000r 1                           and flag_I_off
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8i  ;expected flags + always on bits, mask I
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           eor flag_I_on       ;I_flag is never changed
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #(p1&m8i|faod)  ;mask I, invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                       .if I_flag = 3
000000r 1                           .macro  load_flag   p1
000000r 1                           lda #p1             ;allow test to change I-flag (no mask)
000000r 1                           .endmacro
000000r 1                           .macro  cmp_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           cmp #(p1|faod)&m8   ;expected flags + always on bits
000000r 1                           .endmacro
000000r 1                           .macro  eor_flag    p1
000000r 1                           ora #decmode        ;ignore decimal mode bit
000000r 1                           eor #p1|faod        ;invert expected flags + always on bits
000000r 1                           .endmacro
000000r 1                       .endif
000000r 1                   .endif
000000r 1               
000000r 1               ;macros to set (register|memory|zeropage) & status
000000r 1                           .macro      set_stat    p1          ;setting flags in the processor status register
000000r 1                           load_flag p1
000000r 1                           pha         ;use stack to load status
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_a       p1,p2       ;precharging accu & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda #p1     ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_x       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldx #p1     ;precharge index x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_y       p1,p2       ;precharging index & status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           ldy #p1     ;precharge index y
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ax      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_ay      p1,p2       ;precharging indexed accu & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,y    ;precharge accu
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_z       p1,p2       ;precharging indexed zp & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to zeropage
000000r 1                           sta zpt
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_zx      p1,p2       ;precharging zp,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed zeropage
000000r 1                           sta zpt,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_abs     p1,p2       ;precharging indexed memory & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to memory
000000r 1                           sta abst
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      set_absx    p1,p2       ;precharging abs,x & immediate status
000000r 1                           load_flag p2
000000r 1                           pha         ;use stack to load status
000000r 1                           lda p1,x    ;load to indexed memory
000000r 1                           sta abst,x
000000r 1                           plp
000000r 1                           .endmacro
000000r 1               
000000r 1               ;macros to test (register|memory|zeropage) & status & (mask)
000000r 1                           .macro      tst_stat    p1          ;testing flags in the processor status register
000000r 1                           php         ;save status
000000r 1                           pla         ;use stack to retrieve status
000000r 1                           pha
000000r 1                           cmp_flag p1
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_a       p1,p2        ;testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_x       p1,p2       ;testing result in x index & flags
000000r 1                           php         ;save flags
000000r 1                           cpx #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_y       p1,p2       ;testing result in y index & flags
000000r 1                           php         ;save flags
000000r 1                           cpy #p1     ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           pha
000000r 1                           cmp_flag p2
000000r 1                           trap_ne
000000r 1                           plp         ;restore status
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ax      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne     ;
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_ay      p1,p2,p3    ;indexed testing result in accu & flags
000000r 1                           php         ;save flags
000000r 1                           cmp p1,y    ;test result
000000r 1                           trap_ne     ;
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,y    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_z       p1,p2,p3    ;indexed testing result in zp & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_zx      p1,p2,p3    ;testing result in zp,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda zpt,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_abs     p1,p2,p3    ;indexed testing result in memory & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1                           .macro      tst_absx    p1,p2,p3    ;testing result in abs,x & flags
000000r 1                           php         ;save flags
000000r 1                           lda abst,x
000000r 1                           cmp p1,x    ;test result
000000r 1                           trap_ne
000000r 1                           pla         ;load status
000000r 1                           eor_flag p3
000000r 1                           cmp p2,x    ;test flags
000000r 1                           trap_ne
000000r 1                           .endmacro
000000r 1               
000000r 1               ; RAM integrity test
000000r 1               ;   verifies that none of the previous tests has altered RAM outside of the
000000r 1               ;   designated write areas.
000000r 1               ;   uses zpt word as indirect pointer, zpt+2 word as checksum
000000r 1                   .macro check_ram
000000r 1                       .if ram_top > -1
000000r 1                           cld
000000r 1                           lda #0
000000r 1                           sta zpt         ;set low byte of indirect pointer
000000r 1                           sta zpt+3       ;checksum high byte
000000r 1                         .if disable_selfmod = 0
000000r 1                           sta range_adr   ;reset self modifying code
000000r 1                         .endif
000000r 1                           clc
000000r 1                           ldx #zp_bss-zero_page ;zeropage - write test area
000000r 1               : ;css3
000000r 1                           adc zero_page,x
000000r 1                           bcc :+ ;css2
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               : ;css2
000000r 1                           inx
000000r 1                           bne :-- ;css3
000000r 1                           ldx #.hibyte(abs1)   ;set high byte of indirect pointer
000000r 1                           stx zpt+1
000000r 1                           ldy #.lobyte(abs1)   ;data after write & execute test area
000000r 1               : ;css5
000000r 1                           adc (zpt),y
000000r 1                           bcc :+ ;css4
000000r 1                           inc zpt+3       ;carry to high byte
000000r 1                           clc
000000r 1               : ;css4
000000r 1                           iny
000000r 1                           bne :-- ;css5
000000r 1                           inx             ;advance RAM high address
000000r 1                           stx zpt+1
000000r 1                           cpx #ram_top
000000r 1                           bne :-- ;css5
000000r 1                           sta zpt+2       ;checksum low is
000000r 1                           cmp ram_chksm   ;checksum low expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                           lda zpt+3       ;checksum high is
000000r 1                           cmp ram_chksm+1 ;checksum high expected
000000r 1                           trap_ne         ;checksum mismatch
000000r 1                       .endif
000000r 1                   .endmacro
000000r 1               
000000r 1                           .macro  next_test   ;make sure, tests don't jump the fence
000000r 1                           lda test_case   ;previous test
000000r 1                           cmp #test_num
000000r 1                           trap_ne         ;test is out of sequence
000000r 1               test_num .set test_num + 1
000000r 1                           lda #test_num   ;*** next tests' number
000000r 1                           sta test_case
000000r 1                           check_ram       ;uncomment to find altered RAM after each test
000000r 1                           .endmacro
000000r 1               
000000r 1                       .ZEROPAGE
000000r 1  00 00 00 00  		.res zero_page, 0
000004r 1  00 00 00 00  
000008r 1  00 00        
00000Ar 1                       .org zero_page
00000A  1               
00000A  1               ;break test interrupt save
00000A  1  00           irq_a:  .res    1,0             ;a register
00000B  1  00           irq_x:  .res    1,0             ;x register
00000C  1                   .if I_flag = 2
00000C  1               ;masking for I bit in status
00000C  1               flag_I_on:  .res    1,0         ;or mask to load flags
00000C  1               flag_I_off: .res    1,0         ;and mask to load flags
00000C  1                   .endif
00000C  1               zpt:                        ;5 bytes store/modify test area
00000C  1               ;add/subtract operand generation and result/flag prediction
00000C  1  00           adfc:   .res    1,0             ;carry flag before op
00000D  1  00           ad1:    .res    1,0             ;operand 1 - accumulator
00000E  1  00           ad2:    .res    1,0             ;operand 2 - memory / immediate
00000F  1  00           adrl:   .res    1,0             ;expected result bits 0-7
000010  1  00           adrh:   .res    1,0             ;expected result bit 8 (carry)
000011  1  00           adrf:   .res    1,0             ;expected flags NV0000ZC (only binary mode)
000012  1  00           sb2:    .res    1,0             ;operand 2 complemented for subtract
000013  1               zp_bss:
000013  1  C3 82 41 00  zp1:    .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000017  1  7F           zp7f:   .byte   $7f             ;test pattern for compare
000018  1               ;logical zeropage operands
000018  1  00 1F 71 80  zpOR:   .byte   0,$1f,$71,$80   ;test pattern for OR
00001C  1  0F FF 7F 80  zpAN:   .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000020  1  FF 0F 8F 8F  zpEO:   .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000024  1               ;indirect addressing pointers
000024  1  17 02        ind1:   .word   abs1            ;indirect pointer to pattern in absolute memory
000026  1  18 02                .word   abs1+1
000028  1  19 02                .word   abs1+2
00002A  1  1A 02                .word   abs1+3
00002C  1  1B 02                .word   abs7f
00002E  1  1F 01        inw1:   .word   abs1-$f8        ;indirect pointer for wrap-test pattern
000030  1  03 02        indt:   .word   abst            ;indirect pointer to store area in absolute memory
000032  1  04 02                .word   abst+1
000034  1  05 02                .word   abst+2
000036  1  06 02                .word   abst+3
000038  1  0B 01        inwt:   .word   abst-$f8        ;indirect pointer for wrap-test store
00003A  1  4E 02        indAN:  .word   absAN           ;indirect pointer to AND pattern in absolute memory
00003C  1  4F 02                .word   absAN+1
00003E  1  50 02                .word   absAN+2
000040  1  51 02                .word   absAN+3
000042  1  52 02        indEO:  .word   absEO           ;indirect pointer to EOR pattern in absolute memory
000044  1  53 02                .word   absEO+1
000046  1  54 02                .word   absEO+2
000048  1  55 02                .word   absEO+3
00004A  1  4A 02        indOR:  .word   absOR           ;indirect pointer to OR pattern in absolute memory
00004C  1  4B 02                .word   absOR+1
00004E  1  4C 02                .word   absOR+2
000050  1  4D 02                .word   absOR+3
000052  1               ;add/subtract indirect pointers
000052  1  03 02        adi2:   .word   ada2            ;indirect pointer to operand 2 in absolute memory
000054  1  04 02        sbi2:   .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
000056  1  04 01        adiy2:  .word   ada2-$ff        ;with offset for indirect indexed
000058  1  05 01        sbiy2:  .word   sba2-$ff
00005A  1               zp_bss_end:
00005A  1               
00005A  1                       .DATA
00005A  1                       .org data_segment
000200  1               
000200  1  00           test_case:  .res    1,0         ;current test number
000201  1  00 00        ram_chksm:  .res    2,0         ;checksum for RAM integrity test
000203  1               ;add/subtract operand copy - abs tests write area
000203  1               abst:                       ;5 bytes store/modify test area
000203  1  00           ada2:   .res    1,0             ;operand 2
000204  1  00           sba2:   .res    1,0             ;operand 2 complemented for subtract
000205  1  00 00 00             .res    3,0             ;fill remaining bytes
000208  1               data_bss:
000208  1                   .if load_data_direct = 1
000208  1  29 00        ex_andi:and #0              ;execute immediate opcodes
00020A  1  60                   rts
00020B  1  49 00        ex_eori:eor #0              ;execute immediate opcodes
00020D  1  60                   rts
00020E  1  09 00        ex_orai:ora #0              ;execute immediate opcodes
000210  1  60                   rts
000211  1  69 00        ex_adci:adc #0              ;execute immediate opcodes
000213  1  60                   rts
000214  1  E9 00        ex_sbci:sbc #0              ;execute immediate opcodes
000216  1  60                   rts
000217  1                   .else
000217  1               ex_andi:.res    3
000217  1               ex_eori:.res    3
000217  1               ex_orai:.res    3
000217  1               ex_adci:.res    3
000217  1               ex_sbci:.res    3
000217  1                   .endif
000217  1  C3 82 41 00  abs1:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
00021B  1  7F           abs7f:  .byte   $7f             ;test pattern for compare
00021C  1               ;loads
00021C  1  80 80 00 02  fLDx:   .byte   fn,fn,0,fz      ;expected flags for load
000220  1               ;shifts
000220  1               rASL:                       ;expected result ASL & ROL -carry
000220  1  86 04 82 00  rROL:   .byte   $86,$04,$82,0   ; "
000224  1  87 05 83 01  rROLc:  .byte   $87,$05,$83,1   ;expected result ROL +carry
000228  1               rLSR:                       ;expected result LSR & ROR -carry
000228  1  61 41 20 00  rROR:   .byte   $61,$41,$20,0   ; "
00022C  1  E1 C1 A0 80  rRORc:  .byte   $e1,$c1,$a0,$80 ;expected result ROR +carry
000230  1               fASL:                       ;expected flags for shifts
000230  1  81 01 80 02  fROL:   .byte   fnc,fc,fn,fz    ;no carry in
000234  1  81 01 80 00  fROLc:  .byte   fnc,fc,fn,0     ;carry in
000238  1               fLSR:
000238  1  01 00 01 02  fROR:   .byte   fc,0,fc,fz      ;no carry in
00023C  1  81 80 81 80  fRORc:  .byte   fnc,fn,fnc,fn   ;carry in
000240  1               ;increments (decrements)
000240  1  7F 80 FF 00  rINC:   .byte   $7f,$80,$ff,0,1 ;expected result for INC/DEC
000244  1  01           
000245  1  00 80 80 02  fINC:   .byte   0,fn,fn,fz,0    ;expected flags for INC/DEC
000249  1  00           
00024A  1               ;logical memory operand
00024A  1  00 1F 71 80  absOR:  .byte   0,$1f,$71,$80   ;test pattern for OR
00024E  1  0F FF 7F 80  absAN:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
000252  1  FF 0F 8F 8F  absEO:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
000256  1               ;logical accu operand
000256  1  00 F1 1F 00  absORa: .byte   0,$f1,$1f,0     ;test pattern for OR
00025A  1  F0 FF FF FF  absANa: .byte   $f0,$ff,$ff,$ff ;test pattern for AND
00025E  1  FF F0 F0 0F  absEOa: .byte   $ff,$f0,$f0,$0f ;test pattern for EOR
000262  1               ;logical results
000262  1  00 FF 7F 80  absrlo: .byte   0,$ff,$7f,$80
000266  1  02 80 00 80  absflo: .byte   fz,fn,0,fn
00026A  1               data_bss_end:
00026A  1               
00026A  1               
00026A  1                       .CODE
00026A  1                       .org code_segment
000400  1                       .P02            ; disable 65SC02, 65C02 and 65816 instructions
000400  1               start:
000400  1  D8                   cld
000401  1  A2 FF                ldx #$ff
000403  1  9A                   txs
000404  1  A9 00                lda #0          ;*** test 0 = initialize
000406  1  8D 00 02             sta test_case
000409  1               test_num .set 0
000409  1               
000409  1               ;stop interrupts before initializing BSS
000409  1                   .if I_flag = 1
000409  1                       sei
000409  1                   .endif
000409  1               
000409  1               ;initialize I/O for report channel
000409  1                   .if report = 1
000409  1                       jsr report_init
000409  1                   .endif
000409  1               
000409  1               ;pretest small branch offset
000409  1  A2 05                ldx #5
00040B  1  4C 33 04             jmp psb_test
00040E  1               psb_bwok:
00040E  1  A0 05                ldy #5
000410  1  D0 08                bne psb_forw
000412  1  4C 12 04             trap        ;branch should be taken
000415  1  88                   dey         ;forward landing zone
000416  1  88                   dey
000417  1  88                   dey
000418  1  88                   dey
000419  1  88                   dey
00041A  1               psb_forw:
00041A  1  88                   dey
00041B  1  88                   dey
00041C  1  88                   dey
00041D  1  88                   dey
00041E  1  88                   dey
00041F  1  F0 17                beq psb_fwok
000421  1  4C 21 04             trap        ;forward offset
000424  1               
000424  1  CA                   dex         ;backward landing zone
000425  1  CA                   dex
000426  1  CA                   dex
000427  1  CA                   dex
000428  1  CA                   dex
000429  1               psb_back:
000429  1  CA                   dex
00042A  1  CA                   dex
00042B  1  CA                   dex
00042C  1  CA                   dex
00042D  1  CA                   dex
00042E  1  F0 DE                beq psb_bwok
000430  1  4C 30 04             trap        ;backward offset
000433  1               psb_test:
000433  1  D0 F4                bne psb_back
000435  1  4C 35 04             trap        ;branch should be taken
000438  1               psb_fwok:
000438  1               
000438  1               ;initialize BSS segment
000438  1                   .if load_data_direct <> 1
000438  1                       ldx #zp_end-zp_init-1
000438  1               ld_zp:  lda zp_init,x
000438  1                       sta zp_bss,x
000438  1                       dex
000438  1                       bpl ld_zp
000438  1                       ldx #data_end-data_init-1
000438  1               ld_data:lda data_init,x
000438  1                       sta data_bss,x
000438  1                       dex
000438  1                       bpl ld_data
000438  1                     .if ROM_vectors = 1
000438  1                       ldx #5
000438  1               ld_vect:lda vec_init,x
000438  1                       sta vec_bss,x
000438  1                       dex
000438  1                       bpl ld_vect
000438  1                     .endif
000438  1                   .endif
000438  1               
000438  1               ;retain status of interrupt flag
000438  1                   .if I_flag = 2
000438  1                       php
000438  1                       pla
000438  1                       and #4          ;isolate flag
000438  1                       sta flag_I_on   ;or mask
000438  1                       eor #lo(~4)     ;reverse
000438  1                       sta flag_I_off  ;and mask
000438  1                   .endif
000438  1               
000438  1               ;generate checksum for RAM integrity test
000438  1                   .if ram_top > -1
000438  1  A9 00                lda #0
00043A  1  85 0C                sta zpt         ;set low byte of indirect pointer
00043C  1  8D 02 02             sta ram_chksm+1 ;checksum high byte
00043F  1                     .if disable_selfmod = 0
00043F  1  8D 55 05             sta range_adr   ;reset self modifying code
000442  1                     .endif
000442  1  18                   clc
000443  1  A2 09                ldx #zp_bss-zero_page ;zeropage - write test area
000445  1  75 0A        gcs3:   adc zero_page,x
000447  1  90 04                bcc gcs2
000449  1  EE 02 02             inc ram_chksm+1 ;carry to high byte
00044C  1  18                   clc
00044D  1  E8           gcs2:   inx
00044E  1  D0 F5                bne gcs3
000450  1  A2 02                ldx #.hibyte(abs1)   ;set high byte of indirect pointer
000452  1  86 0D                stx zpt+1
000454  1  A0 17                ldy #.lobyte(abs1)   ;data after write & execute test area
000456  1  71 0C        gcs5:   adc (zpt),y
000458  1  90 04                bcc gcs4
00045A  1  EE 02 02             inc ram_chksm+1 ;carry to high byte
00045D  1  18                   clc
00045E  1  C8           gcs4:   iny
00045F  1  D0 F5                bne gcs5
000461  1  E8                   inx             ;advance RAM high address
000462  1  86 0D                stx zpt+1
000464  1  E0 00                cpx #ram_top
000466  1  D0 EE                bne gcs5
000468  1  8D 01 02             sta ram_chksm   ;checksum complete
00046B  1                   .endif
00046B  1  AD 00 02 C9          next_test
00046F  1  00 D0 FE A9  
000473  1  01 8D 00 02  
0004B3  1               
0004B3  1                   .if disable_selfmod = 0
0004B3  1               ;testing relative addressing with BEQ
0004B3  1  A0 FE                ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
0004B5  1               range_loop:
0004B5  1  88                   dey             ;next relative address
0004B6  1  98                   tya
0004B7  1  AA                   tax             ;precharge count to end of loop
0004B8  1  10 08                bpl range_fw    ;calculate relative address
0004BA  1  18                   clc             ;avoid branch self or to relative address of branch
0004BB  1  69 02                adc #2
0004BD  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
0004BE  1  EA                   nop
0004BF  1  EA                   nop
0004C0  1  EA                   nop
0004C1  1  EA                   nop
0004C2  1               range_fw:
0004C2  1  EA                   nop
0004C3  1  EA                   nop
0004C4  1  EA                   nop
0004C5  1  EA                   nop
0004C6  1  EA                   nop
0004C7  1  49 7F                eor #$7f        ;complement except sign
0004C9  1  8D 55 05             sta range_adr   ;load into test target
0004CC  1  A9 00                lda #0          ;should set zero flag in status register
0004CE  1  4C 54 05             jmp range_op
0004D1  1               
0004D1  1  CA                   dex             ; offset landing zone - backward branch too far
0004D2  1  CA                   dex
0004D3  1  CA                   dex
0004D4  1  CA                   dex
0004D5  1  CA                   dex
0004D6  1                       ;relative address target field with branch under test in the middle
0004D6  1  CA                   dex             ;-128 - max backward
0004D7  1  CA                   dex
0004D8  1  CA                   dex
0004D9  1  CA                   dex
0004DA  1  CA                   dex
0004DB  1  CA                   dex
0004DC  1  CA                   dex
0004DD  1  CA                   dex
0004DE  1  CA                   dex             ;-120
0004DF  1  CA                   dex
0004E0  1  CA                   dex
0004E1  1  CA                   dex
0004E2  1  CA                   dex
0004E3  1  CA                   dex
0004E4  1  CA                   dex
0004E5  1  CA                   dex
0004E6  1  CA                   dex
0004E7  1  CA                   dex
0004E8  1  CA                   dex             ;-110
0004E9  1  CA                   dex
0004EA  1  CA                   dex
0004EB  1  CA                   dex
0004EC  1  CA                   dex
0004ED  1  CA                   dex
0004EE  1  CA                   dex
0004EF  1  CA                   dex
0004F0  1  CA                   dex
0004F1  1  CA                   dex
0004F2  1  CA                   dex             ;-100
0004F3  1  CA                   dex
0004F4  1  CA                   dex
0004F5  1  CA                   dex
0004F6  1  CA                   dex
0004F7  1  CA                   dex
0004F8  1  CA                   dex
0004F9  1  CA                   dex
0004FA  1  CA                   dex
0004FB  1  CA                   dex
0004FC  1  CA                   dex             ;-90
0004FD  1  CA                   dex
0004FE  1  CA                   dex
0004FF  1  CA                   dex
000500  1  CA                   dex
000501  1  CA                   dex
000502  1  CA                   dex
000503  1  CA                   dex
000504  1  CA                   dex
000505  1  CA                   dex
000506  1  CA                   dex             ;-80
000507  1  CA                   dex
000508  1  CA                   dex
000509  1  CA                   dex
00050A  1  CA                   dex
00050B  1  CA                   dex
00050C  1  CA                   dex
00050D  1  CA                   dex
00050E  1  CA                   dex
00050F  1  CA                   dex
000510  1  CA                   dex             ;-70
000511  1  CA                   dex
000512  1  CA                   dex
000513  1  CA                   dex
000514  1  CA                   dex
000515  1  CA                   dex
000516  1  CA                   dex
000517  1  CA                   dex
000518  1  CA                   dex
000519  1  CA                   dex
00051A  1  CA                   dex             ;-60
00051B  1  CA                   dex
00051C  1  CA                   dex
00051D  1  CA                   dex
00051E  1  CA                   dex
00051F  1  CA                   dex
000520  1  CA                   dex
000521  1  CA                   dex
000522  1  CA                   dex
000523  1  CA                   dex
000524  1  CA                   dex             ;-50
000525  1  CA                   dex
000526  1  CA                   dex
000527  1  CA                   dex
000528  1  CA                   dex
000529  1  CA                   dex
00052A  1  CA                   dex
00052B  1  CA                   dex
00052C  1  CA                   dex
00052D  1  CA                   dex
00052E  1  CA                   dex             ;-40
00052F  1  CA                   dex
000530  1  CA                   dex
000531  1  CA                   dex
000532  1  CA                   dex
000533  1  CA                   dex
000534  1  CA                   dex
000535  1  CA                   dex
000536  1  CA                   dex
000537  1  CA                   dex
000538  1  CA                   dex             ;-30
000539  1  CA                   dex
00053A  1  CA                   dex
00053B  1  CA                   dex
00053C  1  CA                   dex
00053D  1  CA                   dex
00053E  1  CA                   dex
00053F  1  CA                   dex
000540  1  CA                   dex
000541  1  CA                   dex
000542  1  CA                   dex             ;-20
000543  1  CA                   dex
000544  1  CA                   dex
000545  1  CA                   dex
000546  1  CA                   dex
000547  1  CA                   dex
000548  1  CA                   dex
000549  1  CA                   dex
00054A  1  CA                   dex
00054B  1  CA                   dex
00054C  1  CA                   dex             ;-10
00054D  1  CA                   dex
00054E  1  CA                   dex
00054F  1  CA                   dex
000550  1  CA                   dex
000551  1  CA                   dex
000552  1  CA                   dex
000553  1  CA                   dex             ;-3
000554  1               range_op:               ;test target with zero flag=0, z=1 if previous dex
000554  1               range_adr   = *+1       ;modifiable relative address
000554  1  F0 3E                beq *+64        ;+64 if called without modification
000556  1  CA                   dex             ;+0
000557  1  CA                   dex
000558  1  CA                   dex
000559  1  CA                   dex
00055A  1  CA                   dex
00055B  1  CA                   dex
00055C  1  CA                   dex
00055D  1  CA                   dex
00055E  1  CA                   dex
00055F  1  CA                   dex
000560  1  CA                   dex             ;+10
000561  1  CA                   dex
000562  1  CA                   dex
000563  1  CA                   dex
000564  1  CA                   dex
000565  1  CA                   dex
000566  1  CA                   dex
000567  1  CA                   dex
000568  1  CA                   dex
000569  1  CA                   dex
00056A  1  CA                   dex             ;+20
00056B  1  CA                   dex
00056C  1  CA                   dex
00056D  1  CA                   dex
00056E  1  CA                   dex
00056F  1  CA                   dex
000570  1  CA                   dex
000571  1  CA                   dex
000572  1  CA                   dex
000573  1  CA                   dex
000574  1  CA                   dex             ;+30
000575  1  CA                   dex
000576  1  CA                   dex
000577  1  CA                   dex
000578  1  CA                   dex
000579  1  CA                   dex
00057A  1  CA                   dex
00057B  1  CA                   dex
00057C  1  CA                   dex
00057D  1  CA                   dex
00057E  1  CA                   dex             ;+40
00057F  1  CA                   dex
000580  1  CA                   dex
000581  1  CA                   dex
000582  1  CA                   dex
000583  1  CA                   dex
000584  1  CA                   dex
000585  1  CA                   dex
000586  1  CA                   dex
000587  1  CA                   dex
000588  1  CA                   dex             ;+50
000589  1  CA                   dex
00058A  1  CA                   dex
00058B  1  CA                   dex
00058C  1  CA                   dex
00058D  1  CA                   dex
00058E  1  CA                   dex
00058F  1  CA                   dex
000590  1  CA                   dex
000591  1  CA                   dex
000592  1  CA                   dex             ;+60
000593  1  CA                   dex
000594  1  CA                   dex
000595  1  CA                   dex
000596  1  CA                   dex
000597  1  CA                   dex
000598  1  CA                   dex
000599  1  CA                   dex
00059A  1  CA                   dex
00059B  1  CA                   dex
00059C  1  CA                   dex             ;+70
00059D  1  CA                   dex
00059E  1  CA                   dex
00059F  1  CA                   dex
0005A0  1  CA                   dex
0005A1  1  CA                   dex
0005A2  1  CA                   dex
0005A3  1  CA                   dex
0005A4  1  CA                   dex
0005A5  1  CA                   dex
0005A6  1  CA                   dex             ;+80
0005A7  1  CA                   dex
0005A8  1  CA                   dex
0005A9  1  CA                   dex
0005AA  1  CA                   dex
0005AB  1  CA                   dex
0005AC  1  CA                   dex
0005AD  1  CA                   dex
0005AE  1  CA                   dex
0005AF  1  CA                   dex
0005B0  1  CA                   dex             ;+90
0005B1  1  CA                   dex
0005B2  1  CA                   dex
0005B3  1  CA                   dex
0005B4  1  CA                   dex
0005B5  1  CA                   dex
0005B6  1  CA                   dex
0005B7  1  CA                   dex
0005B8  1  CA                   dex
0005B9  1  CA                   dex
0005BA  1  CA                   dex             ;+100
0005BB  1  CA                   dex
0005BC  1  CA                   dex
0005BD  1  CA                   dex
0005BE  1  CA                   dex
0005BF  1  CA                   dex
0005C0  1  CA                   dex
0005C1  1  CA                   dex
0005C2  1  CA                   dex
0005C3  1  CA                   dex
0005C4  1  CA                   dex             ;+110
0005C5  1  CA                   dex
0005C6  1  CA                   dex
0005C7  1  CA                   dex
0005C8  1  CA                   dex
0005C9  1  CA                   dex
0005CA  1  CA                   dex
0005CB  1  CA                   dex
0005CC  1  CA                   dex
0005CD  1  CA                   dex
0005CE  1  CA                   dex             ;+120
0005CF  1  CA                   dex
0005D0  1  CA                   dex
0005D1  1  CA                   dex
0005D2  1  CA                   dex
0005D3  1  CA                   dex
0005D4  1  CA                   dex
0005D5  1  EA                   nop             ;offset landing zone - forward branch too far
0005D6  1  EA                   nop
0005D7  1  EA                   nop
0005D8  1  EA                   nop
0005D9  1  EA                   nop
0005DA  1  F0 08                beq range_ok    ;+127 - max forward
0005DC  1  4C DC 05             trap            ; bad range
0005DF  1  EA                   nop             ;offset landing zone - tolerate +/-5 offset to branch
0005E0  1  EA                   nop
0005E1  1  EA                   nop
0005E2  1  EA                   nop
0005E3  1  EA                   nop
0005E4  1               range_ok:
0005E4  1  EA                   nop
0005E5  1  EA                   nop
0005E6  1  EA                   nop
0005E7  1  EA                   nop
0005E8  1  EA                   nop
0005E9  1  C0 00                cpy #0
0005EB  1  F0 03                beq range_end
0005ED  1  4C B5 04             jmp range_loop
0005F0  1               range_end:              ;range test successful
0005F0  1                   .endif
0005F0  1  AD 00 02 C9          next_test
0005F4  1  01 D0 FE A9  
0005F8  1  02 8D 00 02  
000638  1               
000638  1               ;partial test BNE & CMP, CPX, CPY immediate
000638  1  C0 01                cpy #1          ;testing BNE true
00063A  1  D0 03                bne test_bne
00063C  1  4C 3C 06             trap
00063F  1               test_bne:
00063F  1  A9 00                lda #0
000641  1  C9 00                cmp #0          ;test compare immediate
000643  1  D0 FE                trap_ne
000645  1  90 FE                trap_cc
000647  1  30 FE                trap_mi
000649  1  C9 01                cmp #1
00064B  1  F0 FE                trap_eq
00064D  1  B0 FE                trap_cs
00064F  1  10 FE                trap_pl
000651  1  AA                   tax
000652  1  E0 00                cpx #0          ;test compare x immediate
000654  1  D0 FE                trap_ne
000656  1  90 FE                trap_cc
000658  1  30 FE                trap_mi
00065A  1  E0 01                cpx #1
00065C  1  F0 FE                trap_eq
00065E  1  B0 FE                trap_cs
000660  1  10 FE                trap_pl
000662  1  A8                   tay
000663  1  C0 00                cpy #0          ;test compare y immediate
000665  1  D0 FE                trap_ne
000667  1  90 FE                trap_cc
000669  1  30 FE                trap_mi
00066B  1  C0 01                cpy #1
00066D  1  F0 FE                trap_eq
00066F  1  B0 FE                trap_cs
000671  1  10 FE                trap_pl
000673  1  AD 00 02 C9          next_test
000677  1  02 D0 FE A9  
00067B  1  03 8D 00 02  
0006BB  1               ;testing stack operations PHA PHP PLA PLP
0006BB  1               
0006BB  1  A2 FF                ldx #$ff        ;initialize stack
0006BD  1  9A                   txs
0006BE  1  A9 55                lda #$55
0006C0  1  48                   pha
0006C1  1  A9 AA                lda #$aa
0006C3  1  48                   pha
0006C4  1  CD FE 01             cmp $1fe        ;on stack ?
0006C7  1  D0 FE                trap_ne
0006C9  1  BA                   tsx
0006CA  1  8A                   txa             ;overwrite accu
0006CB  1  C9 FD                cmp #$fd        ;sp decremented?
0006CD  1  D0 FE                trap_ne
0006CF  1  68                   pla
0006D0  1  C9 AA                cmp #$aa        ;successful retreived from stack?
0006D2  1  D0 FE                trap_ne
0006D4  1  68                   pla
0006D5  1  C9 55                cmp #$55
0006D7  1  D0 FE                trap_ne
0006D9  1  CD FF 01             cmp $1ff        ;remains on stack?
0006DC  1  D0 FE                trap_ne
0006DE  1  BA                   tsx
0006DF  1  E0 FF                cpx #$ff        ;sp incremented?
0006E1  1  D0 FE                trap_ne
0006E3  1  AD 00 02 C9          next_test
0006E7  1  03 D0 FE A9  
0006EB  1  04 8D 00 02  
00072B  1               
00072B  1               ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
00072B  1  A9 FF 48 28          set_stat $ff    ;all on
00072F  1  10 1A                bpl nbr1        ;branches should not be taken
000731  1  50 1B                bvc nbr2
000733  1  90 1C                bcc nbr3
000735  1  D0 1D                bne nbr4
000737  1  30 03                bmi br1         ;branches should be taken
000739  1  4C 39 07             trap
00073C  1  70 03        br1:    bvs br2
00073E  1  4C 3E 07             trap
000741  1  B0 03        br2:    bcs br3
000743  1  4C 43 07             trap
000746  1  F0 0F        br3:    beq br4
000748  1  4C 48 07             trap
00074B  1               nbr1:
00074B  1  4C 4B 07             trap            ;previous bpl taken
00074E  1               nbr2:
00074E  1  4C 4E 07             trap            ;previous bvc taken
000751  1               nbr3:
000751  1  4C 51 07             trap            ;previous bcc taken
000754  1               nbr4:
000754  1  4C 54 07             trap            ;previous bne taken
000757  1  08           br4:    php
000758  1  BA                   tsx
000759  1  E0 FE                cpx #$fe        ;sp after php?
00075B  1  D0 FE                trap_ne
00075D  1  68                   pla
00075E  1  C9 FF                cmp_flag $ff    ;returned all flags on?
000760  1  D0 FE                trap_ne
000762  1  BA                   tsx
000763  1  E0 FF                cpx #$ff        ;sp after php?
000765  1  D0 FE                trap_ne
000767  1  A9 00 48 28          set_stat 0      ;all off
00076B  1  30 1A                bmi nbr11       ;branches should not be taken
00076D  1  70 1B                bvs nbr12
00076F  1  B0 1C                bcs nbr13
000771  1  F0 1D                beq nbr14
000773  1  10 03                bpl br11        ;branches should be taken
000775  1  4C 75 07             trap
000778  1  50 03        br11:   bvc br12
00077A  1  4C 7A 07             trap
00077D  1  90 03        br12:   bcc br13
00077F  1  4C 7F 07             trap
000782  1  D0 0F        br13:   bne br14
000784  1  4C 84 07             trap
000787  1               nbr11:
000787  1  4C 87 07             trap            ;previous bmi taken
00078A  1               nbr12:
00078A  1  4C 8A 07             trap            ;previous bvs taken
00078D  1               nbr13:
00078D  1  4C 8D 07             trap            ;previous bcs taken
000790  1               nbr14:
000790  1  4C 90 07             trap            ;previous beq taken
000793  1  08           br14:   php
000794  1  68                   pla
000795  1  C9 30                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
000797  1  D0 FE                trap_ne
000799  1                       ;crosscheck flags
000799  1  A9 02 48 28          set_stat zero
00079D  1  D0 02                bne brzs1
00079F  1  F0 03                beq brzs2
0007A1  1               brzs1:
0007A1  1  4C A1 07             trap            ;branch zero/non zero
0007A4  1  B0 02        brzs2:  bcs brzs3
0007A6  1  90 03                bcc brzs4
0007A8  1               brzs3:
0007A8  1  4C A8 07             trap            ;branch carry/no carry
0007AB  1  30 02        brzs4:  bmi brzs5
0007AD  1  10 03                bpl brzs6
0007AF  1               brzs5:
0007AF  1  4C AF 07             trap            ;branch minus/plus
0007B2  1  70 02        brzs6:  bvs brzs7
0007B4  1  50 03                bvc brzs8
0007B6  1               brzs7:
0007B6  1  4C B6 07             trap            ;branch overflow/no overflow
0007B9  1               brzs8:
0007B9  1  A9 01 48 28          set_stat carry
0007BD  1  F0 02                beq brcs1
0007BF  1  D0 03                bne brcs2
0007C1  1               brcs1:
0007C1  1  4C C1 07             trap            ;branch zero/non zero
0007C4  1  90 02        brcs2:  bcc brcs3
0007C6  1  B0 03                bcs brcs4
0007C8  1               brcs3:
0007C8  1  4C C8 07             trap            ;branch carry/no carry
0007CB  1  30 02        brcs4:  bmi brcs5
0007CD  1  10 03                bpl brcs6
0007CF  1               brcs5:
0007CF  1  4C CF 07             trap            ;branch minus/plus
0007D2  1  70 02        brcs6:  bvs brcs7
0007D4  1  50 03                bvc brcs8
0007D6  1               brcs7:
0007D6  1  4C D6 07             trap            ;branch overflow/no overflow
0007D9  1               
0007D9  1               brcs8:
0007D9  1  A9 80 48 28          set_stat minus
0007DD  1  F0 02                beq brmi1
0007DF  1  D0 03                bne brmi2
0007E1  1               brmi1:
0007E1  1  4C E1 07             trap            ;branch zero/non zero
0007E4  1  B0 02        brmi2:  bcs brmi3
0007E6  1  90 03                bcc brmi4
0007E8  1               brmi3:
0007E8  1  4C E8 07             trap            ;branch carry/no carry
0007EB  1  10 02        brmi4:  bpl brmi5
0007ED  1  30 03                bmi brmi6
0007EF  1               brmi5:
0007EF  1  4C EF 07             trap            ;branch minus/plus
0007F2  1  70 02        brmi6:  bvs brmi7
0007F4  1  50 03                bvc brmi8
0007F6  1               brmi7:
0007F6  1  4C F6 07             trap            ;branch overflow/no overflow
0007F9  1               brmi8:
0007F9  1  A9 40 48 28          set_stat overfl
0007FD  1  F0 02                beq brvs1
0007FF  1  D0 03                bne brvs2
000801  1               brvs1:
000801  1  4C 01 08             trap            ;branch zero/non zero
000804  1  B0 02        brvs2:  bcs brvs3
000806  1  90 03                bcc brvs4
000808  1               brvs3:
000808  1  4C 08 08             trap            ;branch carry/no carry
00080B  1  30 02        brvs4:  bmi brvs5
00080D  1  10 03                bpl brvs6
00080F  1               brvs5:
00080F  1  4C 0F 08             trap            ;branch minus/plus
000812  1  50 02        brvs6:  bvc brvs7
000814  1  70 03                bvs brvs8
000816  1               brvs7:
000816  1  4C 16 08             trap            ;branch overflow/no overflow
000819  1               brvs8:
000819  1  A9 FD 48 28          set_stat $ff-zero
00081D  1  F0 02                beq brzc1
00081F  1  D0 03                bne brzc2
000821  1               brzc1:
000821  1  4C 21 08             trap            ;branch zero/non zero
000824  1  90 02        brzc2:  bcc brzc3
000826  1  B0 03                bcs brzc4
000828  1               brzc3:
000828  1  4C 28 08             trap            ;branch carry/no carry
00082B  1  10 02        brzc4:  bpl brzc5
00082D  1  30 03                bmi brzc6
00082F  1               brzc5:
00082F  1  4C 2F 08             trap            ;branch minus/plus
000832  1  50 02        brzc6:  bvc brzc7
000834  1  70 03                bvs brzc8
000836  1               brzc7:
000836  1  4C 36 08             trap            ;branch overflow/no overflow
000839  1               brzc8:
000839  1  A9 FE 48 28          set_stat $ff-carry
00083D  1  D0 02                bne brcc1
00083F  1  F0 03                beq brcc2
000841  1               brcc1:
000841  1  4C 41 08             trap            ;branch zero/non zero
000844  1  B0 02        brcc2:  bcs brcc3
000846  1  90 03                bcc brcc4
000848  1               brcc3:
000848  1  4C 48 08             trap            ;branch carry/no carry
00084B  1  10 02        brcc4:  bpl brcc5
00084D  1  30 03                bmi brcc6
00084F  1               brcc5:
00084F  1  4C 4F 08             trap            ;branch minus/plus
000852  1  50 02        brcc6:  bvc brcc7
000854  1  70 03                bvs brcc8
000856  1               brcc7:
000856  1  4C 56 08             trap            ;branch overflow/no overflow
000859  1               brcc8:
000859  1  A9 7F 48 28          set_stat $ff-minus
00085D  1  D0 02                bne brpl1
00085F  1  F0 03                beq brpl2
000861  1               brpl1:
000861  1  4C 61 08             trap            ;branch zero/non zero
000864  1  90 02        brpl2:  bcc brpl3
000866  1  B0 03                bcs brpl4
000868  1               brpl3:
000868  1  4C 68 08             trap            ;branch carry/no carry
00086B  1  30 02        brpl4:  bmi brpl5
00086D  1  10 03                bpl brpl6
00086F  1               brpl5:
00086F  1  4C 6F 08             trap            ;branch minus/plus
000872  1  50 02        brpl6:  bvc brpl7
000874  1  70 03                bvs brpl8
000876  1               brpl7:
000876  1  4C 76 08             trap            ;branch overflow/no overflow
000879  1               brpl8:
000879  1  A9 BF 48 28          set_stat $ff-overfl
00087D  1  D0 02                bne brvc1
00087F  1  F0 03                beq brvc2
000881  1               brvc1:
000881  1  4C 81 08             trap            ;branch zero/non zero
000884  1  90 02        brvc2:  bcc brvc3
000886  1  B0 03                bcs brvc4
000888  1               brvc3:
000888  1  4C 88 08             trap            ;branch carry/no carry
00088B  1  10 02        brvc4:  bpl brvc5
00088D  1  30 03                bmi brvc6
00088F  1               brvc5:
00088F  1  4C 8F 08             trap            ;branch minus/plus
000892  1  70 02        brvc6:  bvs brvc7
000894  1  50 03                bvc brvc8
000896  1               brvc7:
000896  1  4C 96 08             trap            ;branch overflow/no overflow
000899  1               brvc8:
000899  1  AD 00 02 C9          next_test
00089D  1  04 D0 FE A9  
0008A1  1  05 8D 00 02  
0008E1  1               
0008E1  1               ; test PHA does not alter flags or accumulator but PLA does
0008E1  1  A2 55                ldx #$55        ;x & y protected
0008E3  1  A0 AA                ldy #$aa
0008E5  1  A9 FF 48 A9          set_a 1,$ff     ;push
0008E9  1  01 28        
0008EB  1  48                   pha
0008EC  1  08 C9 01 D0          tst_a 1,$ff
0008F0  1  FE 68 48 C9  
0008F4  1  FF D0 FE 28  
0008F8  1  A9 00 48 A9          set_a 0,0
0008FC  1  00 28        
0008FE  1  48                   pha
0008FF  1  08 C9 00 D0          tst_a 0,0
000903  1  FE 68 48 C9  
000907  1  30 D0 FE 28  
00090B  1  A9 FF 48 A9          set_a $ff,$ff
00090F  1  FF 28        
000911  1  48                   pha
000912  1  08 C9 FF D0          tst_a $ff,$ff
000916  1  FE 68 48 C9  
00091A  1  FF D0 FE 28  
00091E  1  A9 00 48 A9          set_a 1,0
000922  1  01 28        
000924  1  48                   pha
000925  1  08 C9 01 D0          tst_a 1,0
000929  1  FE 68 48 C9  
00092D  1  30 D0 FE 28  
000931  1  A9 FF 48 A9          set_a 0,$ff
000935  1  00 28        
000937  1  48                   pha
000938  1  08 C9 00 D0          tst_a 0,$ff
00093C  1  FE 68 48 C9  
000940  1  FF D0 FE 28  
000944  1  A9 00 48 A9          set_a $ff,0
000948  1  FF 28        
00094A  1  48                   pha
00094B  1  08 C9 FF D0          tst_a $ff,0
00094F  1  FE 68 48 C9  
000953  1  30 D0 FE 28  
000957  1  A9 FF 48 A9          set_a 0,$ff     ;pull
00095B  1  00 28        
00095D  1  68                   pla
00095E  1  08 C9 FF D0          tst_a $ff,$ff-zero
000962  1  FE 68 48 C9  
000966  1  FD D0 FE 28  
00096A  1  A9 00 48 A9          set_a $ff,0
00096E  1  FF 28        
000970  1  68                   pla
000971  1  08 C9 00 D0          tst_a 0,zero
000975  1  FE 68 48 C9  
000979  1  32 D0 FE 28  
00097D  1  A9 FF 48 A9          set_a $fe,$ff
000981  1  FE 28        
000983  1  68                   pla
000984  1  08 C9 01 D0          tst_a 1,$ff-zero-minus
000988  1  FE 68 48 C9  
00098C  1  7D D0 FE 28  
000990  1  A9 00 48 A9          set_a 0,0
000994  1  00 28        
000996  1  68                   pla
000997  1  08 C9 FF D0          tst_a $ff,minus
00099B  1  FE 68 48 C9  
00099F  1  B0 D0 FE 28  
0009A3  1  A9 FF 48 A9          set_a $ff,$ff
0009A7  1  FF 28        
0009A9  1  68                   pla
0009AA  1  08 C9 00 D0          tst_a 0,$ff-minus
0009AE  1  FE 68 48 C9  
0009B2  1  7F D0 FE 28  
0009B6  1  A9 00 48 A9          set_a $fe,0
0009BA  1  FE 28        
0009BC  1  68                   pla
0009BD  1  08 C9 01 D0          tst_a 1,0
0009C1  1  FE 68 48 C9  
0009C5  1  30 D0 FE 28  
0009C9  1  E0 55                cpx #$55        ;x & y unchanged?
0009CB  1  D0 FE                trap_ne
0009CD  1  C0 AA                cpy #$aa
0009CF  1  D0 FE                trap_ne
0009D1  1  AD 00 02 C9          next_test
0009D5  1  05 D0 FE A9  
0009D9  1  06 8D 00 02  
000A19  1               
000A19  1               ; partial pretest EOR #
000A19  1  A9 00 48 A9          set_a $3c,0
000A1D  1  3C 28        
000A1F  1  49 C3                eor #$c3
000A21  1  08 C9 FF D0          tst_a $ff,fn
000A25  1  FE 68 48 C9  
000A29  1  B0 D0 FE 28  
000A2D  1  A9 00 48 A9          set_a $c3,0
000A31  1  C3 28        
000A33  1  49 C3                eor #$c3
000A35  1  08 C9 00 D0          tst_a 0,fz
000A39  1  FE 68 48 C9  
000A3D  1  32 D0 FE 28  
000A41  1  AD 00 02 C9          next_test
000A45  1  06 D0 FE A9  
000A49  1  07 8D 00 02  
000A89  1               
000A89  1               ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
000A89  1               ; testing NOP
000A89  1  A2 24                ldx #$24
000A8B  1  A0 42                ldy #$42
000A8D  1  A9 00 48 A9          set_a $18,0
000A91  1  18 28        
000A93  1  EA                   nop
000A94  1  08 C9 18 D0          tst_a $18,0
000A98  1  FE 68 48 C9  
000A9C  1  30 D0 FE 28  
000AA0  1  E0 24                cpx #$24
000AA2  1  D0 FE                trap_ne
000AA4  1  C0 42                cpy #$42
000AA6  1  D0 FE                trap_ne
000AA8  1  A2 DB                ldx #$db
000AAA  1  A0 BD                ldy #$bd
000AAC  1  A9 FF 48 A9          set_a $e7,$ff
000AB0  1  E7 28        
000AB2  1  EA                   nop
000AB3  1  08 C9 E7 D0          tst_a $e7,$ff
000AB7  1  FE 68 48 C9  
000ABB  1  FF D0 FE 28  
000ABF  1  E0 DB                cpx #$db
000AC1  1  D0 FE                trap_ne
000AC3  1  C0 BD                cpy #$bd
000AC5  1  D0 FE                trap_ne
000AC7  1  AD 00 02 C9          next_test
000ACB  1  07 D0 FE A9  
000ACF  1  08 8D 00 02  
000B0F  1               
000B0F  1               ; jump absolute
000B0F  1  A9 00 48 28          set_stat $0
000B13  1  A9 46                lda #'F'
000B15  1  A2 41                ldx #'A'
000B17  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
000B19  1  4C CB 3E             jmp test_far
000B1C  1  EA                   nop
000B1D  1  EA                   nop
000B1E  1  D0 FE                trap_ne         ;runover protection
000B20  1  E8                   inx
000B21  1  E8                   inx
000B22  1               far_ret:
000B22  1  F0 FE                trap_eq         ;returned flags OK?
000B24  1  10 FE                trap_pl
000B26  1  90 FE                trap_cc
000B28  1  50 FE                trap_vc
000B2A  1  C9 EC                cmp #('F'^$aa)  ;returned registers OK?
000B2C  1  D0 FE                trap_ne
000B2E  1  E0 42                cpx #('A'+1)
000B30  1  D0 FE                trap_ne
000B32  1  C0 4F                cpy #('R'-3)
000B34  1  D0 FE                trap_ne
000B36  1  CA                   dex
000B37  1  C8                   iny
000B38  1  C8                   iny
000B39  1  C8                   iny
000B3A  1  49 AA                eor #$aa        ;N=0, V=1, Z=0, C=1
000B3C  1  4C 45 0B             jmp test_near
000B3F  1  EA                   nop
000B40  1  EA                   nop
000B41  1  D0 FE                trap_ne         ;runover protection
000B43  1  E8                   inx
000B44  1  E8                   inx
000B45  1               test_near:
000B45  1  F0 FE                trap_eq         ;passed flags OK?
000B47  1  30 FE                trap_mi
000B49  1  90 FE                trap_cc
000B4B  1  50 FE                trap_vc
000B4D  1  C9 46                cmp #'F'        ;passed registers OK?
000B4F  1  D0 FE                trap_ne
000B51  1  E0 41                cpx #'A'
000B53  1  D0 FE                trap_ne
000B55  1  C0 52                cpy #'R'
000B57  1  D0 FE                trap_ne
000B59  1  AD 00 02 C9          next_test
000B5D  1  08 D0 FE A9  
000B61  1  09 8D 00 02  
000BA1  1               
000BA1  1               ; jump indirect
000BA1  1  A9 00 48 28          set_stat 0
000BA5  1  A9 49                lda #'I'
000BA7  1  A2 4E                ldx #'N'
000BA9  1  A0 44                ldy #'D'        ;N=0, V=0, Z=0, C=0
000BAB  1  6C FA 3E             jmp (ptr_tst_ind)
000BAE  1  EA                   nop
000BAF  1  D0 FE                trap_ne         ;runover protection
000BB1  1  88                   dey
000BB2  1  88                   dey
000BB3  1               ind_ret:
000BB3  1  08                   php             ;either SP or Y count will fail, if we do not hit
000BB4  1  88                   dey
000BB5  1  88                   dey
000BB6  1  88                   dey
000BB7  1  28                   plp
000BB8  1  F0 FE                trap_eq         ;returned flags OK?
000BBA  1  10 FE                trap_pl
000BBC  1  90 FE                trap_cc
000BBE  1  50 FE                trap_vc
000BC0  1  C9 E3                cmp #('I'^$aa)  ;returned registers OK?
000BC2  1  D0 FE                trap_ne
000BC4  1  E0 4F                cpx #('N'+1)
000BC6  1  D0 FE                trap_ne
000BC8  1  C0 3E                cpy #('D'-6)
000BCA  1  D0 FE                trap_ne
000BCC  1  BA                   tsx             ;SP check
000BCD  1  E0 FF                cpx #$ff
000BCF  1  D0 FE                trap_ne
000BD1  1  AD 00 02 C9          next_test
000BD5  1  09 D0 FE A9  
000BD9  1  0A 8D 00 02  
000C19  1               
000C19  1               ; jump subroutine & return from subroutine
000C19  1  A9 00 48 28          set_stat 0
000C1D  1  A9 4A                lda #'J'
000C1F  1  A2 53                ldx #'S'
000C21  1  A0 52                ldy #'R'        ;N=0, V=0, Z=0, C=0
000C23  1  20 39 3F             jsr test_jsr
000C26  1               jsr_ret = *-1           ;last address of jsr = return address
000C26  1  08                   php             ;either SP or Y count will fail, if we do not hit
000C27  1  88                   dey
000C28  1  88                   dey
000C29  1  88                   dey
000C2A  1  28                   plp
000C2B  1  F0 FE                trap_eq         ;returned flags OK?
000C2D  1  10 FE                trap_pl
000C2F  1  90 FE                trap_cc
000C31  1  50 FE                trap_vc
000C33  1  C9 E0                cmp #('J'^$aa)  ;returned registers OK?
000C35  1  D0 FE                trap_ne
000C37  1  E0 54                cpx #('S'+1)
000C39  1  D0 FE                trap_ne
000C3B  1  C0 4C                cpy #('R'-6)
000C3D  1  D0 FE                trap_ne
000C3F  1  BA                   tsx             ;sp?
000C40  1  E0 FF                cpx #$ff
000C42  1  D0 FE                trap_ne
000C44  1  AD 00 02 C9          next_test
000C48  1  0A D0 FE A9  
000C4C  1  0B 8D 00 02  
000C8C  1               
000C8C  1               ; break & return from interrupt
000C8C  1                   .if ROM_vectors = 1
000C8C  1  A9 00                load_flag 0     ;with interrupts enabled if allowed!
000C8E  1  48                   pha
000C8F  1  A9 42                lda #'B'
000C91  1  A2 52                ldx #'R'
000C93  1  A0 4B                ldy #'K'
000C95  1  28                   plp             ;N=0, V=0, Z=0, C=0
000C96  1  00                   brk
000C97  1                   .else
000C97  1                       lda #>brk_ret0 ;emulated break
000C97  1                       pha
000C97  1                       lda #<brk_ret0
000C97  1                       pha
000C97  1                       load_flag fao    ;set break & unused on stack
000C97  1                       pha
000C97  1                       load_flag intdis ;during interrupt
000C97  1                       pha
000C97  1                       lda #'B'
000C97  1                       ldx #'R'
000C97  1                       ldy #'K'
000C97  1                       plp             ;N=0, V=0, Z=0, C=0
000C97  1                       jmp irq_trap
000C97  1                   .endif
000C97  1  88                   dey             ;should not be executed
000C98  1               brk_ret0:               ;address of break return
000C98  1  08                   php             ;either SP or Y count will fail, if we do not hit
000C99  1  88                   dey
000C9A  1  88                   dey
000C9B  1  88                   dey
000C9C  1  C9 E8                cmp #'B'^$aa    ;returned registers OK?
000C9E  1                       ;the IRQ vector was never executed if A & X stay unmodified
000C9E  1  D0 FE                trap_ne
000CA0  1  E0 53                cpx #'R'+1
000CA2  1  D0 FE                trap_ne
000CA4  1  C0 45                cpy #'K'-6
000CA6  1  D0 FE                trap_ne
000CA8  1  68                   pla             ;returned flags OK (unchanged)?
000CA9  1  C9 30                cmp_flag 0
000CAB  1  D0 FE                trap_ne
000CAD  1  BA                   tsx             ;sp?
000CAE  1  E0 FF                cpx #$ff
000CB0  1  D0 FE                trap_ne
000CB2  1                   .if ROM_vectors = 1
000CB2  1  A9 FF                load_flag $ff   ;with interrupts disabled if allowed!
000CB4  1  48                   pha
000CB5  1  A9 BD                lda #$ff-'B'
000CB7  1  A2 AD                ldx #$ff-'R'
000CB9  1  A0 B4                ldy #$ff-'K'
000CBB  1  28                   plp             ;N=1, V=1, Z=1, C=1
000CBC  1  00                   brk
000CBD  1                   .else
000CBD  1                       lda #>brk_ret1 ;emulated break
000CBD  1                       pha
000CBD  1                       lda #<brk_ret1
000CBD  1                       pha
000CBD  1                       load_flag $ff
000CBD  1                       pha             ;set break & unused on stack
000CBD  1                       pha             ;actual flags
000CBD  1                       lda #$ff-'B'
000CBD  1                       ldx #$ff-'R'
000CBD  1                       ldy #$ff-'K'
000CBD  1                       plp             ;N=1, V=1, Z=1, C=1
000CBD  1                       jmp irq_trap
000CBD  1                   .endif
000CBD  1  88                   dey             ;should not be executed
000CBE  1               brk_ret1:               ;address of break return
000CBE  1  08                   php             ;either SP or Y count will fail, if we do not hit
000CBF  1  88                   dey
000CC0  1  88                   dey
000CC1  1  88                   dey
000CC2  1  C9 17                cmp #($ff-'B')^$aa  ;returned registers OK?
000CC4  1                       ;the IRQ vector was never executed if A & X stay unmodified
000CC4  1  D0 FE                trap_ne
000CC6  1  E0 AE                cpx #$ff-'R'+1
000CC8  1  D0 FE                trap_ne
000CCA  1  C0 AE                cpy #$ff-'K'-6
000CCC  1  D0 FE                trap_ne
000CCE  1  68                   pla             ;returned flags OK (unchanged)?
000CCF  1  C9 FF                cmp_flag $ff
000CD1  1  D0 FE                trap_ne
000CD3  1  BA                   tsx             ;sp?
000CD4  1  E0 FF                cpx #$ff
000CD6  1  D0 FE                trap_ne
000CD8  1  AD 00 02 C9          next_test
000CDC  1  0B D0 FE A9  
000CE0  1  0C 8D 00 02  
000D20  1               
000D20  1               ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
000D20  1  A9 FF 48 28          set_stat $ff
000D24  1  18                   clc
000D25  1  08 68 48 C9          tst_stat $ff-carry
000D29  1  FE D0 FE 28  
000D2D  1  38                   sec
000D2E  1  08 68 48 C9          tst_stat $ff
000D32  1  FF D0 FE 28  
000D36  1                   .if I_flag = 3
000D36  1  58                   cli
000D37  1  08 68 48 C9          tst_stat $ff-intdis
000D3B  1  FB D0 FE 28  
000D3F  1  78                   sei
000D40  1  08 68 48 C9          tst_stat $ff
000D44  1  FF D0 FE 28  
000D48  1                   .endif
000D48  1  D8                   cld
000D49  1  08 68 48 C9          tst_stat $ff-decmode
000D4D  1  F7 D0 FE 28  
000D51  1  F8                   sed
000D52  1  08 68 48 C9          tst_stat $ff
000D56  1  FF D0 FE 28  
000D5A  1  B8                   clv
000D5B  1  08 68 48 C9          tst_stat $ff-overfl
000D5F  1  BF D0 FE 28  
000D63  1  A9 00 48 28          set_stat 0
000D67  1  08 68 48 C9          tst_stat 0
000D6B  1  30 D0 FE 28  
000D6F  1  38                   sec
000D70  1  08 68 48 C9          tst_stat carry
000D74  1  31 D0 FE 28  
000D78  1  18                   clc
000D79  1  08 68 48 C9          tst_stat 0
000D7D  1  30 D0 FE 28  
000D81  1                   .if I_flag = 3
000D81  1  78                   sei
000D82  1  08 68 48 C9          tst_stat intdis
000D86  1  34 D0 FE 28  
000D8A  1  58                   cli
000D8B  1  08 68 48 C9          tst_stat 0
000D8F  1  30 D0 FE 28  
000D93  1                   .endif
000D93  1  F8                   sed
000D94  1  08 68 48 C9          tst_stat decmode
000D98  1  38 D0 FE 28  
000D9C  1  D8                   cld
000D9D  1  08 68 48 C9          tst_stat 0
000DA1  1  30 D0 FE 28  
000DA5  1  A9 40 48 28          set_stat overfl
000DA9  1  08 68 48 C9          tst_stat overfl
000DAD  1  70 D0 FE 28  
000DB1  1  B8                   clv
000DB2  1  08 68 48 C9          tst_stat 0
000DB6  1  30 D0 FE 28  
000DBA  1  AD 00 02 C9          next_test
000DBE  1  0C D0 FE A9  
000DC2  1  0D 8D 00 02  
000E02  1               ; testing index register increment/decrement and transfer
000E02  1               ; INX INY DEX DEY TAX TXA TAY TYA
000E02  1  A2 FE                ldx #$fe
000E04  1  A9 FF 48 28          set_stat $ff
000E08  1  E8                   inx             ;ff
000E09  1  08 E0 FF D0          tst_x $ff,$ff-zero
000E0D  1  FE 68 48 C9  
000E11  1  FD D0 FE 28  
000E15  1  E8                   inx             ;00
000E16  1  08 E0 00 D0          tst_x 0,$ff-minus
000E1A  1  FE 68 48 C9  
000E1E  1  7F D0 FE 28  
000E22  1  E8                   inx             ;01
000E23  1  08 E0 01 D0          tst_x 1,$ff-minus-zero
000E27  1  FE 68 48 C9  
000E2B  1  7D D0 FE 28  
000E2F  1  CA                   dex             ;00
000E30  1  08 E0 00 D0          tst_x 0,$ff-minus
000E34  1  FE 68 48 C9  
000E38  1  7F D0 FE 28  
000E3C  1  CA                   dex             ;ff
000E3D  1  08 E0 FF D0          tst_x $ff,$ff-zero
000E41  1  FE 68 48 C9  
000E45  1  FD D0 FE 28  
000E49  1  CA                   dex             ;fe
000E4A  1  A9 00 48 28          set_stat 0
000E4E  1  E8                   inx             ;ff
000E4F  1  08 E0 FF D0          tst_x $ff,minus
000E53  1  FE 68 48 C9  
000E57  1  B0 D0 FE 28  
000E5B  1  E8                   inx             ;00
000E5C  1  08 E0 00 D0          tst_x 0,zero
000E60  1  FE 68 48 C9  
000E64  1  32 D0 FE 28  
000E68  1  E8                   inx             ;01
000E69  1  08 E0 01 D0          tst_x 1,0
000E6D  1  FE 68 48 C9  
000E71  1  30 D0 FE 28  
000E75  1  CA                   dex             ;00
000E76  1  08 E0 00 D0          tst_x 0,zero
000E7A  1  FE 68 48 C9  
000E7E  1  32 D0 FE 28  
000E82  1  CA                   dex             ;ff
000E83  1  08 E0 FF D0          tst_x $ff,minus
000E87  1  FE 68 48 C9  
000E8B  1  B0 D0 FE 28  
000E8F  1               
000E8F  1  A0 FE                ldy #$fe
000E91  1  A9 FF 48 28          set_stat $ff
000E95  1  C8                   iny             ;ff
000E96  1  08 C0 FF D0          tst_y $ff,$ff-zero
000E9A  1  FE 68 48 C9  
000E9E  1  FD D0 FE 28  
000EA2  1  C8                   iny             ;00
000EA3  1  08 C0 00 D0          tst_y 0,$ff-minus
000EA7  1  FE 68 48 C9  
000EAB  1  7F D0 FE 28  
000EAF  1  C8                   iny             ;01
000EB0  1  08 C0 01 D0          tst_y 1,$ff-minus-zero
000EB4  1  FE 68 48 C9  
000EB8  1  7D D0 FE 28  
000EBC  1  88                   dey             ;00
000EBD  1  08 C0 00 D0          tst_y 0,$ff-minus
000EC1  1  FE 68 48 C9  
000EC5  1  7F D0 FE 28  
000EC9  1  88                   dey             ;ff
000ECA  1  08 C0 FF D0          tst_y $ff,$ff-zero
000ECE  1  FE 68 48 C9  
000ED2  1  FD D0 FE 28  
000ED6  1  88                   dey             ;fe
000ED7  1  A9 00 48 28          set_stat 0
000EDB  1  C8                   iny             ;ff
000EDC  1  08 C0 FF D0          tst_y $ff,0+minus
000EE0  1  FE 68 48 C9  
000EE4  1  B0 D0 FE 28  
000EE8  1  C8                   iny             ;00
000EE9  1  08 C0 00 D0          tst_y 0,zero
000EED  1  FE 68 48 C9  
000EF1  1  32 D0 FE 28  
000EF5  1  C8                   iny             ;01
000EF6  1  08 C0 01 D0          tst_y 1,0
000EFA  1  FE 68 48 C9  
000EFE  1  30 D0 FE 28  
000F02  1  88                   dey             ;00
000F03  1  08 C0 00 D0          tst_y 0,zero
000F07  1  FE 68 48 C9  
000F0B  1  32 D0 FE 28  
000F0F  1  88                   dey             ;ff
000F10  1  08 C0 FF D0          tst_y $ff,minus
000F14  1  FE 68 48 C9  
000F18  1  B0 D0 FE 28  
000F1C  1               
000F1C  1  A2 FF                ldx #$ff
000F1E  1  A9 FF 48 28          set_stat $ff
000F22  1  8A                   txa
000F23  1  08 C9 FF D0          tst_a $ff,$ff-zero
000F27  1  FE 68 48 C9  
000F2B  1  FD D0 FE 28  
000F2F  1  08                   php
000F30  1  E8                   inx             ;00
000F31  1  28                   plp
000F32  1  8A                   txa
000F33  1  08 C9 00 D0          tst_a 0,$ff-minus
000F37  1  FE 68 48 C9  
000F3B  1  7F D0 FE 28  
000F3F  1  08                   php
000F40  1  E8                   inx             ;01
000F41  1  28                   plp
000F42  1  8A                   txa
000F43  1  08 C9 01 D0          tst_a 1,$ff-minus-zero
000F47  1  FE 68 48 C9  
000F4B  1  7D D0 FE 28  
000F4F  1  A9 00 48 28          set_stat 0
000F53  1  8A                   txa
000F54  1  08 C9 01 D0          tst_a 1,0
000F58  1  FE 68 48 C9  
000F5C  1  30 D0 FE 28  
000F60  1  08                   php
000F61  1  CA                   dex             ;00
000F62  1  28                   plp
000F63  1  8A                   txa
000F64  1  08 C9 00 D0          tst_a 0,zero
000F68  1  FE 68 48 C9  
000F6C  1  32 D0 FE 28  
000F70  1  08                   php
000F71  1  CA                   dex             ;ff
000F72  1  28                   plp
000F73  1  8A                   txa
000F74  1  08 C9 FF D0          tst_a $ff,minus
000F78  1  FE 68 48 C9  
000F7C  1  B0 D0 FE 28  
000F80  1               
000F80  1  A0 FF                ldy #$ff
000F82  1  A9 FF 48 28          set_stat $ff
000F86  1  98                   tya
000F87  1  08 C9 FF D0          tst_a $ff,$ff-zero
000F8B  1  FE 68 48 C9  
000F8F  1  FD D0 FE 28  
000F93  1  08                   php
000F94  1  C8                   iny             ;00
000F95  1  28                   plp
000F96  1  98                   tya
000F97  1  08 C9 00 D0          tst_a 0,$ff-minus
000F9B  1  FE 68 48 C9  
000F9F  1  7F D0 FE 28  
000FA3  1  08                   php
000FA4  1  C8                   iny             ;01
000FA5  1  28                   plp
000FA6  1  98                   tya
000FA7  1  08 C9 01 D0          tst_a 1,$ff-minus-zero
000FAB  1  FE 68 48 C9  
000FAF  1  7D D0 FE 28  
000FB3  1  A9 00 48 28          set_stat 0
000FB7  1  98                   tya
000FB8  1  08 C9 01 D0          tst_a 1,0
000FBC  1  FE 68 48 C9  
000FC0  1  30 D0 FE 28  
000FC4  1  08                   php
000FC5  1  88                   dey             ;00
000FC6  1  28                   plp
000FC7  1  98                   tya
000FC8  1  08 C9 00 D0          tst_a 0,zero
000FCC  1  FE 68 48 C9  
000FD0  1  32 D0 FE 28  
000FD4  1  08                   php
000FD5  1  88                   dey             ;ff
000FD6  1  28                   plp
000FD7  1  98                   tya
000FD8  1  08 C9 FF D0          tst_a $ff,minus
000FDC  1  FE 68 48 C9  
000FE0  1  B0 D0 FE 28  
000FE4  1               
000FE4  1  A9 FF                load_flag $ff
000FE6  1  48                   pha
000FE7  1  A2 FF                ldx #$ff        ;ff
000FE9  1  8A                   txa
000FEA  1  28                   plp
000FEB  1  A8                   tay
000FEC  1  08 C0 FF D0          tst_y $ff,$ff-zero
000FF0  1  FE 68 48 C9  
000FF4  1  FD D0 FE 28  
000FF8  1  08                   php
000FF9  1  E8                   inx             ;00
000FFA  1  8A                   txa
000FFB  1  28                   plp
000FFC  1  A8                   tay
000FFD  1  08 C0 00 D0          tst_y 0,$ff-minus
001001  1  FE 68 48 C9  
001005  1  7F D0 FE 28  
001009  1  08                   php
00100A  1  E8                   inx             ;01
00100B  1  8A                   txa
00100C  1  28                   plp
00100D  1  A8                   tay
00100E  1  08 C0 01 D0          tst_y 1,$ff-minus-zero
001012  1  FE 68 48 C9  
001016  1  7D D0 FE 28  
00101A  1  A9 00                load_flag 0
00101C  1  48                   pha
00101D  1  A9 00                lda #0
00101F  1  8A                   txa
001020  1  28                   plp
001021  1  A8                   tay
001022  1  08 C0 01 D0          tst_y 1,0
001026  1  FE 68 48 C9  
00102A  1  30 D0 FE 28  
00102E  1  08                   php
00102F  1  CA                   dex             ;00
001030  1  8A                   txa
001031  1  28                   plp
001032  1  A8                   tay
001033  1  08 C0 00 D0          tst_y 0,zero
001037  1  FE 68 48 C9  
00103B  1  32 D0 FE 28  
00103F  1  08                   php
001040  1  CA                   dex             ;ff
001041  1  8A                   txa
001042  1  28                   plp
001043  1  A8                   tay
001044  1  08 C0 FF D0          tst_y $ff,minus
001048  1  FE 68 48 C9  
00104C  1  B0 D0 FE 28  
001050  1               
001050  1               
001050  1  A9 FF                load_flag $ff
001052  1  48                   pha
001053  1  A0 FF                ldy #$ff        ;ff
001055  1  98                   tya
001056  1  28                   plp
001057  1  AA                   tax
001058  1  08 E0 FF D0          tst_x $ff,$ff-zero
00105C  1  FE 68 48 C9  
001060  1  FD D0 FE 28  
001064  1  08                   php
001065  1  C8                   iny             ;00
001066  1  98                   tya
001067  1  28                   plp
001068  1  AA                   tax
001069  1  08 E0 00 D0          tst_x 0,$ff-minus
00106D  1  FE 68 48 C9  
001071  1  7F D0 FE 28  
001075  1  08                   php
001076  1  C8                   iny             ;01
001077  1  98                   tya
001078  1  28                   plp
001079  1  AA                   tax
00107A  1  08 E0 01 D0          tst_x 1,$ff-minus-zero
00107E  1  FE 68 48 C9  
001082  1  7D D0 FE 28  
001086  1  A9 00                load_flag 0
001088  1  48                   pha
001089  1  A9 00                lda #0          ;preset status
00108B  1  98                   tya
00108C  1  28                   plp
00108D  1  AA                   tax
00108E  1  08 E0 01 D0          tst_x 1,0
001092  1  FE 68 48 C9  
001096  1  30 D0 FE 28  
00109A  1  08                   php
00109B  1  88                   dey             ;00
00109C  1  98                   tya
00109D  1  28                   plp
00109E  1  AA                   tax
00109F  1  08 E0 00 D0          tst_x 0,zero
0010A3  1  FE 68 48 C9  
0010A7  1  32 D0 FE 28  
0010AB  1  08                   php
0010AC  1  88                   dey             ;ff
0010AD  1  98                   tya
0010AE  1  28                   plp
0010AF  1  AA                   tax
0010B0  1  08 E0 FF D0          tst_x $ff,minus
0010B4  1  FE 68 48 C9  
0010B8  1  B0 D0 FE 28  
0010BC  1  AD 00 02 C9          next_test
0010C0  1  0D D0 FE A9  
0010C4  1  0E 8D 00 02  
001104  1               
001104  1               ;TSX sets NZ - TXS does not
001104  1               ;  This section also tests for proper stack wrap around.
001104  1  A2 01                ldx #1          ;01
001106  1  A9 FF 48 28          set_stat $ff
00110A  1  9A                   txs
00110B  1  08                   php
00110C  1  AD 01 01             lda $101
00110F  1  C9 FF                cmp_flag $ff
001111  1  D0 FE                trap_ne
001113  1  A9 00 48 28          set_stat 0
001117  1  9A                   txs
001118  1  08                   php
001119  1  AD 01 01             lda $101
00111C  1  C9 30                cmp_flag 0
00111E  1  D0 FE                trap_ne
001120  1  CA                   dex             ;00
001121  1  A9 FF 48 28          set_stat $ff
001125  1  9A                   txs
001126  1  08                   php
001127  1  AD 00 01             lda $100
00112A  1  C9 FF                cmp_flag $ff
00112C  1  D0 FE                trap_ne
00112E  1  A9 00 48 28          set_stat 0
001132  1  9A                   txs
001133  1  08                   php
001134  1  AD 00 01             lda $100
001137  1  C9 30                cmp_flag 0
001139  1  D0 FE                trap_ne
00113B  1  CA                   dex             ;ff
00113C  1  A9 FF 48 28          set_stat $ff
001140  1  9A                   txs
001141  1  08                   php
001142  1  AD FF 01             lda $1ff
001145  1  C9 FF                cmp_flag $ff
001147  1  D0 FE                trap_ne
001149  1  A9 00 48 28          set_stat 0
00114D  1  9A                   txs
00114E  1  08                   php
00114F  1  AD FF 01             lda $1ff
001152  1  C9 30                cmp_flag 0
001154  1               
001154  1  A2 01                ldx #1
001156  1  9A                   txs             ;sp=01
001157  1  A9 FF 48 28          set_stat $ff
00115B  1  BA                   tsx             ;clears Z, N
00115C  1  08                   php             ;sp=00
00115D  1  E0 01                cpx #1
00115F  1  D0 FE                trap_ne
001161  1  AD 01 01             lda $101
001164  1  C9 7D                cmp_flag $ff-minus-zero
001166  1  D0 FE                trap_ne
001168  1  A9 FF 48 28          set_stat $ff
00116C  1  BA                   tsx             ;clears N, sets Z
00116D  1  08                   php             ;sp=ff
00116E  1  E0 00                cpx #0
001170  1  D0 FE                trap_ne
001172  1  AD 00 01             lda $100
001175  1  C9 7F                cmp_flag $ff-minus
001177  1  D0 FE                trap_ne
001179  1  A9 FF 48 28          set_stat $ff
00117D  1  BA                   tsx             ;clears N, sets Z
00117E  1  08                   php             ;sp=fe
00117F  1  E0 FF                cpx #$ff
001181  1  D0 FE                trap_ne
001183  1  AD FF 01             lda $1ff
001186  1  C9 FD                cmp_flag $ff-zero
001188  1  D0 FE                trap_ne
00118A  1               
00118A  1  A2 01                ldx #1
00118C  1  9A                   txs             ;sp=01
00118D  1  A9 00 48 28          set_stat 0
001191  1  BA                   tsx             ;clears Z, N
001192  1  08                   php             ;sp=00
001193  1  E0 01                cpx #1
001195  1  D0 FE                trap_ne
001197  1  AD 01 01             lda $101
00119A  1  C9 30                cmp_flag 0
00119C  1  D0 FE                trap_ne
00119E  1  A9 00 48 28          set_stat 0
0011A2  1  BA                   tsx             ;clears N, sets Z
0011A3  1  08                   php             ;sp=ff
0011A4  1  E0 00                cpx #0
0011A6  1  D0 FE                trap_ne
0011A8  1  AD 00 01             lda $100
0011AB  1  C9 32                cmp_flag zero
0011AD  1  D0 FE                trap_ne
0011AF  1  A9 00 48 28          set_stat 0
0011B3  1  BA                   tsx             ;clears N, sets Z
0011B4  1  08                   php             ;sp=fe
0011B5  1  E0 FF                cpx #$ff
0011B7  1  D0 FE                trap_ne
0011B9  1  AD FF 01             lda $1ff
0011BC  1  C9 B0                cmp_flag minus
0011BE  1  D0 FE                trap_ne
0011C0  1  68                   pla             ;sp=ff
0011C1  1  AD 00 02 C9          next_test
0011C5  1  0E D0 FE A9  
0011C9  1  0F 8D 00 02  
001209  1               
001209  1               ; testing index register load & store LDY LDX STY STX all addressing modes
001209  1               ; LDX / STX - zp,y / abs,y
001209  1  A0 03                ldy #3
00120B  1               tldx:
00120B  1  A9 00 48 28          set_stat 0
00120F  1  B6 13                ldx zp1,y
001211  1  08                   php         ;test stores do not alter flags
001212  1  8A                   txa
001213  1  49 C3                eor #$c3
001215  1  28                   plp
001216  1  99 03 02             sta abst,y
001219  1  08                   php         ;flags after load/store sequence
00121A  1  49 C3                eor #$c3
00121C  1  D9 17 02             cmp abs1,y  ;test result
00121F  1  D0 FE                trap_ne
001221  1  68                   pla         ;load status
001222  1  49 30                eor_flag 0
001224  1  D9 1C 02             cmp fLDx,y  ;test flags
001227  1  D0 FE                trap_ne
001229  1  88                   dey
00122A  1  10 DF                bpl tldx
00122C  1               
00122C  1  A0 03                ldy #3
00122E  1               tldx1:
00122E  1  A9 FF 48 28          set_stat $ff
001232  1  B6 13                ldx zp1,y
001234  1  08                   php         ;test stores do not alter flags
001235  1  8A                   txa
001236  1  49 C3                eor #$c3
001238  1  28                   plp
001239  1  99 03 02             sta abst,y
00123C  1  08                   php         ;flags after load/store sequence
00123D  1  49 C3                eor #$c3
00123F  1  D9 17 02             cmp abs1,y  ;test result
001242  1  D0 FE                trap_ne
001244  1  68                   pla         ;load status
001245  1  49 7D                eor_flag <~fnz ;mask bits not altered
001247  1  D9 1C 02             cmp fLDx,y  ;test flags
00124A  1  D0 FE                trap_ne
00124C  1  88                   dey
00124D  1  10 DF                bpl tldx1
00124F  1               
00124F  1  A0 03                ldy #3
001251  1               tldx2:
001251  1  A9 00 48 28          set_stat 0
001255  1  BE 17 02             ldx abs1,y
001258  1  08                   php         ;test stores do not alter flags
001259  1  8A                   txa
00125A  1  49 C3                eor #$c3
00125C  1  AA                   tax
00125D  1  28                   plp
00125E  1  96 0C                stx zpt,y
001260  1  08                   php         ;flags after load/store sequence
001261  1  49 C3                eor #$c3
001263  1  D9 13 00             cmp zp1,y   ;test result
001266  1  D0 FE                trap_ne
001268  1  68                   pla         ;load status
001269  1  49 30                eor_flag 0
00126B  1  D9 1C 02             cmp fLDx,y  ;test flags
00126E  1  D0 FE                trap_ne
001270  1  88                   dey
001271  1  10 DE                bpl tldx2
001273  1               
001273  1  A0 03                ldy #3
001275  1               tldx3:
001275  1  A9 FF 48 28          set_stat $ff
001279  1  BE 17 02             ldx abs1,y
00127C  1  08                   php         ;test stores do not alter flags
00127D  1  8A                   txa
00127E  1  49 C3                eor #$c3
001280  1  AA                   tax
001281  1  28                   plp
001282  1  96 0C                stx zpt,y
001284  1  08                   php         ;flags after load/store sequence
001285  1  49 C3                eor #$c3
001287  1  D9 13 00             cmp zp1,y   ;test result
00128A  1  D0 FE                trap_ne
00128C  1  68                   pla         ;load status
00128D  1  49 7D                eor_flag <~fnz ;mask bits not altered
00128F  1  D9 1C 02             cmp fLDx,y  ;test flags
001292  1  D0 FE                trap_ne
001294  1  88                   dey
001295  1  10 DE                bpl tldx3
001297  1               
001297  1  A0 03                ldy #3      ;testing store result
001299  1  A2 00                ldx #0
00129B  1  B9 0C 00     tstx:   lda zpt,y
00129E  1  49 C3                eor #$c3
0012A0  1  D9 13 00             cmp zp1,y
0012A3  1  D0 FE                trap_ne     ;store to zp data
0012A5  1  96 0C                stx zpt,y   ;clear
0012A7  1  B9 03 02             lda abst,y
0012AA  1  49 C3                eor #$c3
0012AC  1  D9 17 02             cmp abs1,y
0012AF  1  D0 FE                trap_ne     ;store to abs data
0012B1  1  8A                   txa
0012B2  1  99 03 02             sta abst,y  ;clear
0012B5  1  88                   dey
0012B6  1  10 E3                bpl tstx
0012B8  1  AD 00 02 C9          next_test
0012BC  1  0F D0 FE A9  
0012C0  1  10 8D 00 02  
001300  1               
001300  1               ; indexed wraparound test (only zp should wrap)
001300  1  A0 FD                ldy #3+$fa
001302  1  B6 19        tldx4:  ldx <(zp1-$fa),y   ;wrap on indexed zp
001304  1  8A                   txa
001305  1  99 09 01             sta abst-$fa,y      ;no STX abs,y!
001308  1  88                   dey
001309  1  C0 FA                cpy #$fa
00130B  1  B0 F5                bcs tldx4
00130D  1  A0 FD                ldy #3+$fa
00130F  1  BE 1D 01     tldx5:  ldx abs1-$fa,y      ;no wrap on indexed abs
001312  1  96 12                stx <(zpt-$fa),y
001314  1  88                   dey
001315  1  C0 FA                cpy #$fa
001317  1  B0 F6                bcs tldx5
001319  1  A0 03                ldy #3      ;testing wraparound result
00131B  1  A2 00                ldx #0
00131D  1  B9 0C 00     tstx1:  lda zpt,y
001320  1  D9 13 00             cmp zp1,y
001323  1  D0 FE                trap_ne     ;store to zp data
001325  1  96 0C                stx zpt,y   ;clear
001327  1  B9 03 02             lda abst,y
00132A  1  D9 17 02             cmp abs1,y
00132D  1  D0 FE                trap_ne     ;store to abs data
00132F  1  8A                   txa
001330  1  99 03 02             sta abst,y  ;clear
001333  1  88                   dey
001334  1  10 E7                bpl tstx1
001336  1  AD 00 02 C9          next_test
00133A  1  10 D0 FE A9  
00133E  1  11 8D 00 02  
00137E  1               
00137E  1               ; LDY / STY - zp,x / abs,x
00137E  1  A2 03                ldx #3
001380  1               tldy:
001380  1  A9 00 48 28          set_stat 0
001384  1  B4 13                ldy zp1,x
001386  1  08                   php         ;test stores do not alter flags
001387  1  98                   tya
001388  1  49 C3                eor #$c3
00138A  1  28                   plp
00138B  1  9D 03 02             sta abst,x
00138E  1  08                   php         ;flags after load/store sequence
00138F  1  49 C3                eor #$c3
001391  1  DD 17 02             cmp abs1,x  ;test result
001394  1  D0 FE                trap_ne
001396  1  68                   pla         ;load status
001397  1  49 30                eor_flag 0
001399  1  DD 1C 02             cmp fLDx,x  ;test flags
00139C  1  D0 FE                trap_ne
00139E  1  CA                   dex
00139F  1  10 DF                bpl tldy
0013A1  1               
0013A1  1  A2 03                ldx #3
0013A3  1               tldy1:
0013A3  1  A9 FF 48 28          set_stat $ff
0013A7  1  B4 13                ldy zp1,x
0013A9  1  08                   php         ;test stores do not alter flags
0013AA  1  98                   tya
0013AB  1  49 C3                eor #$c3
0013AD  1  28                   plp
0013AE  1  9D 03 02             sta abst,x
0013B1  1  08                   php         ;flags after load/store sequence
0013B2  1  49 C3                eor #$c3
0013B4  1  DD 17 02             cmp abs1,x  ;test result
0013B7  1  D0 FE                trap_ne
0013B9  1  68                   pla         ;load status
0013BA  1  49 7D                eor_flag <~fnz ;mask bits not altered
0013BC  1  DD 1C 02             cmp fLDx,x  ;test flags
0013BF  1  D0 FE                trap_ne
0013C1  1  CA                   dex
0013C2  1  10 DF                bpl tldy1
0013C4  1               
0013C4  1  A2 03                ldx #3
0013C6  1               tldy2:
0013C6  1  A9 00 48 28          set_stat 0
0013CA  1  BC 17 02             ldy abs1,x
0013CD  1  08                   php         ;test stores do not alter flags
0013CE  1  98                   tya
0013CF  1  49 C3                eor #$c3
0013D1  1  A8                   tay
0013D2  1  28                   plp
0013D3  1  94 0C                sty zpt,x
0013D5  1  08                   php         ;flags after load/store sequence
0013D6  1  49 C3                eor #$c3
0013D8  1  D5 13                cmp zp1,x   ;test result
0013DA  1  D0 FE                trap_ne
0013DC  1  68                   pla         ;load status
0013DD  1  49 30                eor_flag 0
0013DF  1  DD 1C 02             cmp fLDx,x  ;test flags
0013E2  1  D0 FE                trap_ne
0013E4  1  CA                   dex
0013E5  1  10 DF                bpl tldy2
0013E7  1               
0013E7  1  A2 03                ldx #3
0013E9  1               tldy3:
0013E9  1  A9 FF 48 28          set_stat $ff
0013ED  1  BC 17 02             ldy abs1,x
0013F0  1  08                   php         ;test stores do not alter flags
0013F1  1  98                   tya
0013F2  1  49 C3                eor #$c3
0013F4  1  A8                   tay
0013F5  1  28                   plp
0013F6  1  94 0C                sty zpt,x
0013F8  1  08                   php         ;flags after load/store sequence
0013F9  1  49 C3                eor #$c3
0013FB  1  D5 13                cmp zp1,x   ;test result
0013FD  1  D0 FE                trap_ne
0013FF  1  68                   pla         ;load status
001400  1  49 7D                eor_flag <~fnz ;mask bits not altered
001402  1  DD 1C 02             cmp fLDx,x  ;test flags
001405  1  D0 FE                trap_ne
001407  1  CA                   dex
001408  1  10 DF                bpl tldy3
00140A  1               
00140A  1  A2 03                ldx #3      ;testing store result
00140C  1  A0 00                ldy #0
00140E  1  B5 0C        tsty:   lda zpt,x
001410  1  49 C3                eor #$c3
001412  1  D5 13                cmp zp1,x
001414  1  D0 FE                trap_ne     ;store to zp,x data
001416  1  94 0C                sty zpt,x   ;clear
001418  1  BD 03 02             lda abst,x
00141B  1  49 C3                eor #$c3
00141D  1  DD 17 02             cmp abs1,x
001420  1  D0 FE                trap_ne     ;store to abs,x data
001422  1  8A                   txa
001423  1  9D 03 02             sta abst,x  ;clear
001426  1  CA                   dex
001427  1  10 E5                bpl tsty
001429  1  AD 00 02 C9          next_test
00142D  1  11 D0 FE A9  
001431  1  12 8D 00 02  
001471  1               
001471  1               ; indexed wraparound test (only zp should wrap)
001471  1  A2 FD                ldx #3+$fa
001473  1  B4 19        tldy4:  ldy <(zp1-$fa),x   ;wrap on indexed zp
001475  1  98                   tya
001476  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
001479  1  CA                   dex
00147A  1  E0 FA                cpx #$fa
00147C  1  B0 F5                bcs tldy4
00147E  1  A2 FD                ldx #3+$fa
001480  1  BC 1D 01     tldy5:  ldy abs1-$fa,x      ;no wrap on indexed abs
001483  1  94 12                sty <(zpt-$fa),x
001485  1  CA                   dex
001486  1  E0 FA                cpx #$fa
001488  1  B0 F6                bcs tldy5
00148A  1  A2 03                ldx #3      ;testing wraparound result
00148C  1  A0 00                ldy #0
00148E  1  B5 0C        tsty1:  lda zpt,x
001490  1  D5 13                cmp zp1,x
001492  1  D0 FE                trap_ne     ;store to zp,x data
001494  1  94 0C                sty zpt,x   ;clear
001496  1  BD 03 02             lda abst,x
001499  1  DD 17 02             cmp abs1,x
00149C  1  D0 FE                trap_ne     ;store to abs,x data
00149E  1  8A                   txa
00149F  1  9D 03 02             sta abst,x  ;clear
0014A2  1  CA                   dex
0014A3  1  10 E9                bpl tsty1
0014A5  1  AD 00 02 C9          next_test
0014A9  1  12 D0 FE A9  
0014AD  1  13 8D 00 02  
0014ED  1               
0014ED  1               ; LDX / STX - zp / abs / #
0014ED  1  A9 00 48 28          set_stat 0
0014F1  1  A6 13                ldx zp1
0014F3  1  08                   php         ;test stores do not alter flags
0014F4  1  8A                   txa
0014F5  1  49 C3                eor #$c3
0014F7  1  AA                   tax
0014F8  1  28                   plp
0014F9  1  8E 03 02             stx abst
0014FC  1  08                   php         ;flags after load/store sequence
0014FD  1  49 C3                eor #$c3
0014FF  1  AA                   tax
001500  1  E0 C3                cpx #$c3    ;test result
001502  1  D0 FE                trap_ne
001504  1  68                   pla         ;load status
001505  1  49 30                eor_flag 0
001507  1  CD 1C 02             cmp fLDx    ;test flags
00150A  1  D0 FE                trap_ne
00150C  1  A9 00 48 28          set_stat 0
001510  1  A6 14                ldx zp1+1
001512  1  08                   php         ;test stores do not alter flags
001513  1  8A                   txa
001514  1  49 C3                eor #$c3
001516  1  AA                   tax
001517  1  28                   plp
001518  1  8E 04 02             stx abst+1
00151B  1  08                   php         ;flags after load/store sequence
00151C  1  49 C3                eor #$c3
00151E  1  AA                   tax
00151F  1  E0 82                cpx #$82    ;test result
001521  1  D0 FE                trap_ne
001523  1  68                   pla         ;load status
001524  1  49 30                eor_flag 0
001526  1  CD 1D 02             cmp fLDx+1  ;test flags
001529  1  D0 FE                trap_ne
00152B  1  A9 00 48 28          set_stat 0
00152F  1  A6 15                ldx zp1+2
001531  1  08                   php         ;test stores do not alter flags
001532  1  8A                   txa
001533  1  49 C3                eor #$c3
001535  1  AA                   tax
001536  1  28                   plp
001537  1  8E 05 02             stx abst+2
00153A  1  08                   php         ;flags after load/store sequence
00153B  1  49 C3                eor #$c3
00153D  1  AA                   tax
00153E  1  E0 41                cpx #$41    ;test result
001540  1  D0 FE                trap_ne
001542  1  68                   pla         ;load status
001543  1  49 30                eor_flag 0
001545  1  CD 1E 02             cmp fLDx+2  ;test flags
001548  1  D0 FE                trap_ne
00154A  1  A9 00 48 28          set_stat 0
00154E  1  A6 16                ldx zp1+3
001550  1  08                   php         ;test stores do not alter flags
001551  1  8A                   txa
001552  1  49 C3                eor #$c3
001554  1  AA                   tax
001555  1  28                   plp
001556  1  8E 06 02             stx abst+3
001559  1  08                   php         ;flags after load/store sequence
00155A  1  49 C3                eor #$c3
00155C  1  AA                   tax
00155D  1  E0 00                cpx #0      ;test result
00155F  1  D0 FE                trap_ne
001561  1  68                   pla         ;load status
001562  1  49 30                eor_flag 0
001564  1  CD 1F 02             cmp fLDx+3  ;test flags
001567  1  D0 FE                trap_ne
001569  1               
001569  1  A9 FF 48 28          set_stat $ff
00156D  1  A6 13                ldx zp1
00156F  1  08                   php         ;test stores do not alter flags
001570  1  8A                   txa
001571  1  49 C3                eor #$c3
001573  1  AA                   tax
001574  1  28                   plp
001575  1  8E 03 02             stx abst
001578  1  08                   php         ;flags after load/store sequence
001579  1  49 C3                eor #$c3
00157B  1  AA                   tax
00157C  1  E0 C3                cpx #$c3    ;test result
00157E  1  D0 FE                trap_ne     ;
001580  1  68                   pla         ;load status
001581  1  49 7D                eor_flag <~fnz ;mask bits not altered
001583  1  CD 1C 02             cmp fLDx    ;test flags
001586  1  D0 FE                trap_ne
001588  1  A9 FF 48 28          set_stat $ff
00158C  1  A6 14                ldx zp1+1
00158E  1  08                   php         ;test stores do not alter flags
00158F  1  8A                   txa
001590  1  49 C3                eor #$c3
001592  1  AA                   tax
001593  1  28                   plp
001594  1  8E 04 02             stx abst+1
001597  1  08                   php         ;flags after load/store sequence
001598  1  49 C3                eor #$c3
00159A  1  AA                   tax
00159B  1  E0 82                cpx #$82    ;test result
00159D  1  D0 FE                trap_ne
00159F  1  68                   pla         ;load status
0015A0  1  49 7D                eor_flag <~fnz ;mask bits not altered
0015A2  1  CD 1D 02             cmp fLDx+1  ;test flags
0015A5  1  D0 FE                trap_ne
0015A7  1  A9 FF 48 28          set_stat $ff
0015AB  1  A6 15                ldx zp1+2
0015AD  1  08                   php         ;test stores do not alter flags
0015AE  1  8A                   txa
0015AF  1  49 C3                eor #$c3
0015B1  1  AA                   tax
0015B2  1  28                   plp
0015B3  1  8E 05 02             stx abst+2
0015B6  1  08                   php         ;flags after load/store sequence
0015B7  1  49 C3                eor #$c3
0015B9  1  AA                   tax
0015BA  1  E0 41                cpx #$41    ;test result
0015BC  1  D0 FE                trap_ne     ;
0015BE  1  68                   pla         ;load status
0015BF  1  49 7D                eor_flag <~fnz ;mask bits not altered
0015C1  1  CD 1E 02             cmp fLDx+2  ;test flags
0015C4  1  D0 FE                trap_ne
0015C6  1  A9 FF 48 28          set_stat $ff
0015CA  1  A6 16                ldx zp1+3
0015CC  1  08                   php         ;test stores do not alter flags
0015CD  1  8A                   txa
0015CE  1  49 C3                eor #$c3
0015D0  1  AA                   tax
0015D1  1  28                   plp
0015D2  1  8E 06 02             stx abst+3
0015D5  1  08                   php         ;flags after load/store sequence
0015D6  1  49 C3                eor #$c3
0015D8  1  AA                   tax
0015D9  1  E0 00                cpx #0      ;test result
0015DB  1  D0 FE                trap_ne
0015DD  1  68                   pla         ;load status
0015DE  1  49 7D                eor_flag <~fnz ;mask bits not altered
0015E0  1  CD 1F 02             cmp fLDx+3  ;test flags
0015E3  1  D0 FE                trap_ne
0015E5  1               
0015E5  1  A9 00 48 28          set_stat 0
0015E9  1  AE 17 02             ldx abs1
0015EC  1  08                   php         ;test stores do not alter flags
0015ED  1  8A                   txa
0015EE  1  49 C3                eor #$c3
0015F0  1  AA                   tax
0015F1  1  28                   plp
0015F2  1  86 0C                stx zpt
0015F4  1  08                   php         ;flags after load/store sequence
0015F5  1  49 C3                eor #$c3
0015F7  1  C5 13                cmp zp1     ;test result
0015F9  1  D0 FE                trap_ne
0015FB  1  68                   pla         ;load status
0015FC  1  49 30                eor_flag 0
0015FE  1  CD 1C 02             cmp fLDx    ;test flags
001601  1  D0 FE                trap_ne
001603  1  A9 00 48 28          set_stat 0
001607  1  AE 18 02             ldx abs1+1
00160A  1  08                   php         ;test stores do not alter flags
00160B  1  8A                   txa
00160C  1  49 C3                eor #$c3
00160E  1  AA                   tax
00160F  1  28                   plp
001610  1  86 0D                stx zpt+1
001612  1  08                   php         ;flags after load/store sequence
001613  1  49 C3                eor #$c3
001615  1  C5 14                cmp zp1+1   ;test result
001617  1  D0 FE                trap_ne
001619  1  68                   pla         ;load status
00161A  1  49 30                eor_flag 0
00161C  1  CD 1D 02             cmp fLDx+1  ;test flags
00161F  1  D0 FE                trap_ne
001621  1  A9 00 48 28          set_stat 0
001625  1  AE 19 02             ldx abs1+2
001628  1  08                   php         ;test stores do not alter flags
001629  1  8A                   txa
00162A  1  49 C3                eor #$c3
00162C  1  AA                   tax
00162D  1  28                   plp
00162E  1  86 0E                stx zpt+2
001630  1  08                   php         ;flags after load/store sequence
001631  1  49 C3                eor #$c3
001633  1  C5 15                cmp zp1+2   ;test result
001635  1  D0 FE                trap_ne
001637  1  68                   pla         ;load status
001638  1  49 30                eor_flag 0
00163A  1  CD 1E 02             cmp fLDx+2  ;test flags
00163D  1  D0 FE                trap_ne
00163F  1  A9 00 48 28          set_stat 0
001643  1  AE 1A 02             ldx abs1+3
001646  1  08                   php         ;test stores do not alter flags
001647  1  8A                   txa
001648  1  49 C3                eor #$c3
00164A  1  AA                   tax
00164B  1  28                   plp
00164C  1  86 0F                stx zpt+3
00164E  1  08                   php         ;flags after load/store sequence
00164F  1  49 C3                eor #$c3
001651  1  C5 16                cmp zp1+3   ;test result
001653  1  D0 FE                trap_ne
001655  1  68                   pla         ;load status
001656  1  49 30                eor_flag 0
001658  1  CD 1F 02             cmp fLDx+3  ;test flags
00165B  1  D0 FE                trap_ne
00165D  1               
00165D  1  A9 FF 48 28          set_stat $ff
001661  1  AE 17 02             ldx abs1
001664  1  08                   php         ;test stores do not alter flags
001665  1  8A                   txa
001666  1  49 C3                eor #$c3
001668  1  AA                   tax
001669  1  28                   plp
00166A  1  86 0C                stx zpt
00166C  1  08                   php         ;flags after load/store sequence
00166D  1  49 C3                eor #$c3
00166F  1  AA                   tax
001670  1  E4 13                cpx zp1     ;test result
001672  1  D0 FE                trap_ne
001674  1  68                   pla         ;load status
001675  1  49 7D                eor_flag <~fnz ;mask bits not altered
001677  1  CD 1C 02             cmp fLDx    ;test flags
00167A  1  D0 FE                trap_ne
00167C  1  A9 FF 48 28          set_stat $ff
001680  1  AE 18 02             ldx abs1+1
001683  1  08                   php         ;test stores do not alter flags
001684  1  8A                   txa
001685  1  49 C3                eor #$c3
001687  1  AA                   tax
001688  1  28                   plp
001689  1  86 0D                stx zpt+1
00168B  1  08                   php         ;flags after load/store sequence
00168C  1  49 C3                eor #$c3
00168E  1  AA                   tax
00168F  1  E4 14                cpx zp1+1   ;test result
001691  1  D0 FE                trap_ne
001693  1  68                   pla         ;load status
001694  1  49 7D                eor_flag <~fnz ;mask bits not altered
001696  1  CD 1D 02             cmp fLDx+1  ;test flags
001699  1  D0 FE                trap_ne
00169B  1  A9 FF 48 28          set_stat $ff
00169F  1  AE 19 02             ldx abs1+2
0016A2  1  08                   php         ;test stores do not alter flags
0016A3  1  8A                   txa
0016A4  1  49 C3                eor #$c3
0016A6  1  AA                   tax
0016A7  1  28                   plp
0016A8  1  86 0E                stx zpt+2
0016AA  1  08                   php         ;flags after load/store sequence
0016AB  1  49 C3                eor #$c3
0016AD  1  AA                   tax
0016AE  1  E4 15                cpx zp1+2   ;test result
0016B0  1  D0 FE                trap_ne
0016B2  1  68                   pla         ;load status
0016B3  1  49 7D                eor_flag <~fnz ;mask bits not altered
0016B5  1  CD 1E 02             cmp fLDx+2  ;test flags
0016B8  1  D0 FE                trap_ne
0016BA  1  A9 FF 48 28          set_stat $ff
0016BE  1  AE 1A 02             ldx abs1+3
0016C1  1  08                   php         ;test stores do not alter flags
0016C2  1  8A                   txa
0016C3  1  49 C3                eor #$c3
0016C5  1  AA                   tax
0016C6  1  28                   plp
0016C7  1  86 0F                stx zpt+3
0016C9  1  08                   php         ;flags after load/store sequence
0016CA  1  49 C3                eor #$c3
0016CC  1  AA                   tax
0016CD  1  E4 16                cpx zp1+3   ;test result
0016CF  1  D0 FE                trap_ne
0016D1  1  68                   pla         ;load status
0016D2  1  49 7D                eor_flag <~fnz ;mask bits not altered
0016D4  1  CD 1F 02             cmp fLDx+3  ;test flags
0016D7  1  D0 FE                trap_ne
0016D9  1               
0016D9  1  A9 00 48 28          set_stat 0
0016DD  1  A2 C3                ldx #$c3
0016DF  1  08                   php
0016E0  1  EC 17 02             cpx abs1    ;test result
0016E3  1  D0 FE                trap_ne
0016E5  1  68                   pla         ;load status
0016E6  1  49 30                eor_flag 0
0016E8  1  CD 1C 02             cmp fLDx    ;test flags
0016EB  1  D0 FE                trap_ne
0016ED  1  A9 00 48 28          set_stat 0
0016F1  1  A2 82                ldx #$82
0016F3  1  08                   php
0016F4  1  EC 18 02             cpx abs1+1  ;test result
0016F7  1  D0 FE                trap_ne
0016F9  1  68                   pla         ;load status
0016FA  1  49 30                eor_flag 0
0016FC  1  CD 1D 02             cmp fLDx+1  ;test flags
0016FF  1  D0 FE                trap_ne
001701  1  A9 00 48 28          set_stat 0
001705  1  A2 41                ldx #$41
001707  1  08                   php
001708  1  EC 19 02             cpx abs1+2  ;test result
00170B  1  D0 FE                trap_ne
00170D  1  68                   pla         ;load status
00170E  1  49 30                eor_flag 0
001710  1  CD 1E 02             cmp fLDx+2  ;test flags
001713  1  D0 FE                trap_ne
001715  1  A9 00 48 28          set_stat 0
001719  1  A2 00                ldx #0
00171B  1  08                   php
00171C  1  EC 1A 02             cpx abs1+3  ;test result
00171F  1  D0 FE                trap_ne
001721  1  68                   pla         ;load status
001722  1  49 30                eor_flag 0
001724  1  CD 1F 02             cmp fLDx+3  ;test flags
001727  1  D0 FE                trap_ne
001729  1               
001729  1  A9 FF 48 28          set_stat $ff
00172D  1  A2 C3                ldx #$c3
00172F  1  08                   php
001730  1  EC 17 02             cpx abs1    ;test result
001733  1  D0 FE                trap_ne
001735  1  68                   pla         ;load status
001736  1  49 7D                eor_flag <~fnz ;mask bits not altered
001738  1  CD 1C 02             cmp fLDx    ;test flags
00173B  1  D0 FE                trap_ne
00173D  1  A9 FF 48 28          set_stat $ff
001741  1  A2 82                ldx #$82
001743  1  08                   php
001744  1  EC 18 02             cpx abs1+1  ;test result
001747  1  D0 FE                trap_ne
001749  1  68                   pla         ;load status
00174A  1  49 7D                eor_flag <~fnz ;mask bits not altered
00174C  1  CD 1D 02             cmp fLDx+1  ;test flags
00174F  1  D0 FE                trap_ne
001751  1  A9 FF 48 28          set_stat $ff
001755  1  A2 41                ldx #$41
001757  1  08                   php
001758  1  EC 19 02             cpx abs1+2  ;test result
00175B  1  D0 FE                trap_ne
00175D  1  68                   pla         ;load status
00175E  1  49 7D                eor_flag <~fnz ;mask bits not altered
001760  1  CD 1E 02             cmp fLDx+2  ;test flags
001763  1  D0 FE                trap_ne
001765  1  A9 FF 48 28          set_stat $ff
001769  1  A2 00                ldx #0
00176B  1  08                   php
00176C  1  EC 1A 02             cpx abs1+3  ;test result
00176F  1  D0 FE                trap_ne
001771  1  68                   pla         ;load status
001772  1  49 7D                eor_flag <~fnz ;mask bits not altered
001774  1  CD 1F 02             cmp fLDx+3  ;test flags
001777  1  D0 FE                trap_ne
001779  1               
001779  1  A2 00                ldx #0
00177B  1  A5 0C                lda zpt
00177D  1  49 C3                eor #$c3
00177F  1  C5 13                cmp zp1
001781  1  D0 FE                trap_ne     ;store to zp data
001783  1  86 0C                stx zpt     ;clear
001785  1  AD 03 02             lda abst
001788  1  49 C3                eor #$c3
00178A  1  CD 17 02             cmp abs1
00178D  1  D0 FE                trap_ne     ;store to abs data
00178F  1  8E 03 02             stx abst    ;clear
001792  1  A5 0D                lda zpt+1
001794  1  49 C3                eor #$c3
001796  1  C5 14                cmp zp1+1
001798  1  D0 FE                trap_ne     ;store to zp data
00179A  1  86 0D                stx zpt+1   ;clear
00179C  1  AD 04 02             lda abst+1
00179F  1  49 C3                eor #$c3
0017A1  1  CD 18 02             cmp abs1+1
0017A4  1  D0 FE                trap_ne     ;store to abs data
0017A6  1  8E 04 02             stx abst+1  ;clear
0017A9  1  A5 0E                lda zpt+2
0017AB  1  49 C3                eor #$c3
0017AD  1  C5 15                cmp zp1+2
0017AF  1  D0 FE                trap_ne     ;store to zp data
0017B1  1  86 0E                stx zpt+2   ;clear
0017B3  1  AD 05 02             lda abst+2
0017B6  1  49 C3                eor #$c3
0017B8  1  CD 19 02             cmp abs1+2
0017BB  1  D0 FE                trap_ne     ;store to abs data
0017BD  1  8E 05 02             stx abst+2  ;clear
0017C0  1  A5 0F                lda zpt+3
0017C2  1  49 C3                eor #$c3
0017C4  1  C5 16                cmp zp1+3
0017C6  1  D0 FE                trap_ne     ;store to zp data
0017C8  1  86 0F                stx zpt+3   ;clear
0017CA  1  AD 06 02             lda abst+3
0017CD  1  49 C3                eor #$c3
0017CF  1  CD 1A 02             cmp abs1+3
0017D2  1  D0 FE                trap_ne     ;store to abs data
0017D4  1  8E 06 02             stx abst+3  ;clear
0017D7  1  AD 00 02 C9          next_test
0017DB  1  13 D0 FE A9  
0017DF  1  14 8D 00 02  
00181F  1               
00181F  1               ; LDY / STY - zp / abs / #
00181F  1  A9 00 48 28          set_stat 0
001823  1  A4 13                ldy zp1
001825  1  08                   php         ;test stores do not alter flags
001826  1  98                   tya
001827  1  49 C3                eor #$c3
001829  1  A8                   tay
00182A  1  28                   plp
00182B  1  8C 03 02             sty abst
00182E  1  08                   php         ;flags after load/store sequence
00182F  1  49 C3                eor #$c3
001831  1  A8                   tay
001832  1  C0 C3                cpy #$c3    ;test result
001834  1  D0 FE                trap_ne
001836  1  68                   pla         ;load status
001837  1  49 30                eor_flag 0
001839  1  CD 1C 02             cmp fLDx    ;test flags
00183C  1  D0 FE                trap_ne
00183E  1  A9 00 48 28          set_stat 0
001842  1  A4 14                ldy zp1+1
001844  1  08                   php         ;test stores do not alter flags
001845  1  98                   tya
001846  1  49 C3                eor #$c3
001848  1  A8                   tay
001849  1  28                   plp
00184A  1  8C 04 02             sty abst+1
00184D  1  08                   php         ;flags after load/store sequence
00184E  1  49 C3                eor #$c3
001850  1  A8                   tay
001851  1  C0 82                cpy #$82    ;test result
001853  1  D0 FE                trap_ne
001855  1  68                   pla         ;load status
001856  1  49 30                eor_flag 0
001858  1  CD 1D 02             cmp fLDx+1  ;test flags
00185B  1  D0 FE                trap_ne
00185D  1  A9 00 48 28          set_stat 0
001861  1  A4 15                ldy zp1+2
001863  1  08                   php         ;test stores do not alter flags
001864  1  98                   tya
001865  1  49 C3                eor #$c3
001867  1  A8                   tay
001868  1  28                   plp
001869  1  8C 05 02             sty abst+2
00186C  1  08                   php         ;flags after load/store sequence
00186D  1  49 C3                eor #$c3
00186F  1  A8                   tay
001870  1  C0 41                cpy #$41    ;test result
001872  1  D0 FE                trap_ne
001874  1  68                   pla         ;load status
001875  1  49 30                eor_flag 0
001877  1  CD 1E 02             cmp fLDx+2  ;test flags
00187A  1  D0 FE                trap_ne
00187C  1  A9 00 48 28          set_stat 0
001880  1  A4 16                ldy zp1+3
001882  1  08                   php         ;test stores do not alter flags
001883  1  98                   tya
001884  1  49 C3                eor #$c3
001886  1  A8                   tay
001887  1  28                   plp
001888  1  8C 06 02             sty abst+3
00188B  1  08                   php         ;flags after load/store sequence
00188C  1  49 C3                eor #$c3
00188E  1  A8                   tay
00188F  1  C0 00                cpy #0      ;test result
001891  1  D0 FE                trap_ne
001893  1  68                   pla         ;load status
001894  1  49 30                eor_flag 0
001896  1  CD 1F 02             cmp fLDx+3  ;test flags
001899  1  D0 FE                trap_ne
00189B  1               
00189B  1  A9 FF 48 28          set_stat $ff
00189F  1  A4 13                ldy zp1
0018A1  1  08                   php         ;test stores do not alter flags
0018A2  1  98                   tya
0018A3  1  49 C3                eor #$c3
0018A5  1  A8                   tay
0018A6  1  28                   plp
0018A7  1  8C 03 02             sty abst
0018AA  1  08                   php         ;flags after load/store sequence
0018AB  1  49 C3                eor #$c3
0018AD  1  A8                   tay
0018AE  1  C0 C3                cpy #$c3    ;test result
0018B0  1  D0 FE                trap_ne
0018B2  1  68                   pla         ;load status
0018B3  1  49 7D                eor_flag <~fnz ;mask bits not altered
0018B5  1  CD 1C 02             cmp fLDx    ;test flags
0018B8  1  D0 FE                trap_ne
0018BA  1  A9 FF 48 28          set_stat $ff
0018BE  1  A4 14                ldy zp1+1
0018C0  1  08                   php         ;test stores do not alter flags
0018C1  1  98                   tya
0018C2  1  49 C3                eor #$c3
0018C4  1  A8                   tay
0018C5  1  28                   plp
0018C6  1  8C 04 02             sty abst+1
0018C9  1  08                   php         ;flags after load/store sequence
0018CA  1  49 C3                eor #$c3
0018CC  1  A8                   tay
0018CD  1  C0 82                cpy #$82   ;test result
0018CF  1  D0 FE                trap_ne
0018D1  1  68                   pla         ;load status
0018D2  1  49 7D                eor_flag <~fnz ;mask bits not altered
0018D4  1  CD 1D 02             cmp fLDx+1  ;test flags
0018D7  1  D0 FE                trap_ne
0018D9  1  A9 FF 48 28          set_stat $ff
0018DD  1  A4 15                ldy zp1+2
0018DF  1  08                   php         ;test stores do not alter flags
0018E0  1  98                   tya
0018E1  1  49 C3                eor #$c3
0018E3  1  A8                   tay
0018E4  1  28                   plp
0018E5  1  8C 05 02             sty abst+2
0018E8  1  08                   php         ;flags after load/store sequence
0018E9  1  49 C3                eor #$c3
0018EB  1  A8                   tay
0018EC  1  C0 41                cpy #$41    ;test result
0018EE  1  D0 FE                trap_ne
0018F0  1  68                   pla         ;load status
0018F1  1  49 7D                eor_flag <~fnz ;mask bits not altered
0018F3  1  CD 1E 02             cmp fLDx+2  ;test flags
0018F6  1  D0 FE                trap_ne
0018F8  1  A9 FF 48 28          set_stat $ff
0018FC  1  A4 16                ldy zp1+3
0018FE  1  08                   php         ;test stores do not alter flags
0018FF  1  98                   tya
001900  1  49 C3                eor #$c3
001902  1  A8                   tay
001903  1  28                   plp
001904  1  8C 06 02             sty abst+3
001907  1  08                   php         ;flags after load/store sequence
001908  1  49 C3                eor #$c3
00190A  1  A8                   tay
00190B  1  C0 00                cpy #0      ;test result
00190D  1  D0 FE                trap_ne
00190F  1  68                   pla         ;load status
001910  1  49 7D                eor_flag <~fnz ;mask bits not altered
001912  1  CD 1F 02             cmp fLDx+3  ;test flags
001915  1  D0 FE                trap_ne
001917  1               
001917  1  A9 00 48 28          set_stat 0
00191B  1  AC 17 02             ldy abs1
00191E  1  08                   php         ;test stores do not alter flags
00191F  1  98                   tya
001920  1  49 C3                eor #$c3
001922  1  A8                   tay
001923  1  28                   plp
001924  1  84 0C                sty zpt
001926  1  08                   php         ;flags after load/store sequence
001927  1  49 C3                eor #$c3
001929  1  A8                   tay
00192A  1  C4 13                cpy zp1     ;test result
00192C  1  D0 FE                trap_ne
00192E  1  68                   pla         ;load status
00192F  1  49 30                eor_flag 0
001931  1  CD 1C 02             cmp fLDx    ;test flags
001934  1  D0 FE                trap_ne
001936  1  A9 00 48 28          set_stat 0
00193A  1  AC 18 02             ldy abs1+1
00193D  1  08                   php         ;test stores do not alter flags
00193E  1  98                   tya
00193F  1  49 C3                eor #$c3
001941  1  A8                   tay
001942  1  28                   plp
001943  1  84 0D                sty zpt+1
001945  1  08                   php         ;flags after load/store sequence
001946  1  49 C3                eor #$c3
001948  1  A8                   tay
001949  1  C4 14                cpy zp1+1   ;test result
00194B  1  D0 FE                trap_ne
00194D  1  68                   pla         ;load status
00194E  1  49 30                eor_flag 0
001950  1  CD 1D 02             cmp fLDx+1  ;test flags
001953  1  D0 FE                trap_ne
001955  1  A9 00 48 28          set_stat 0
001959  1  AC 19 02             ldy abs1+2
00195C  1  08                   php         ;test stores do not alter flags
00195D  1  98                   tya
00195E  1  49 C3                eor #$c3
001960  1  A8                   tay
001961  1  28                   plp
001962  1  84 0E                sty zpt+2
001964  1  08                   php         ;flags after load/store sequence
001965  1  49 C3                eor #$c3
001967  1  A8                   tay
001968  1  C4 15                cpy zp1+2   ;test result
00196A  1  D0 FE                trap_ne
00196C  1  68                   pla         ;load status
00196D  1  49 30                eor_flag 0
00196F  1  CD 1E 02             cmp fLDx+2  ;test flags
001972  1  D0 FE                trap_ne
001974  1  A9 00 48 28          set_stat 0
001978  1  AC 1A 02             ldy abs1+3
00197B  1  08                   php         ;test stores do not alter flags
00197C  1  98                   tya
00197D  1  49 C3                eor #$c3
00197F  1  A8                   tay
001980  1  28                   plp
001981  1  84 0F                sty zpt+3
001983  1  08                   php         ;flags after load/store sequence
001984  1  49 C3                eor #$c3
001986  1  A8                   tay
001987  1  C4 16                cpy zp1+3   ;test result
001989  1  D0 FE                trap_ne
00198B  1  68                   pla         ;load status
00198C  1  49 30                eor_flag 0
00198E  1  CD 1F 02             cmp fLDx+3  ;test flags
001991  1  D0 FE                trap_ne
001993  1               
001993  1  A9 FF 48 28          set_stat $ff
001997  1  AC 17 02             ldy abs1
00199A  1  08                   php         ;test stores do not alter flags
00199B  1  98                   tya
00199C  1  49 C3                eor #$c3
00199E  1  A8                   tay
00199F  1  28                   plp
0019A0  1  84 0C                sty zpt
0019A2  1  08                   php         ;flags after load/store sequence
0019A3  1  49 C3                eor #$c3
0019A5  1  A8                   tay
0019A6  1  C5 13                cmp zp1     ;test result
0019A8  1  D0 FE                trap_ne
0019AA  1  68                   pla         ;load status
0019AB  1  49 7D                eor_flag <~fnz ;mask bits not altered
0019AD  1  CD 1C 02             cmp fLDx    ;test flags
0019B0  1  D0 FE                trap_ne
0019B2  1  A9 FF 48 28          set_stat $ff
0019B6  1  AC 18 02             ldy abs1+1
0019B9  1  08                   php         ;test stores do not alter flags
0019BA  1  98                   tya
0019BB  1  49 C3                eor #$c3
0019BD  1  A8                   tay
0019BE  1  28                   plp
0019BF  1  84 0D                sty zpt+1
0019C1  1  08                   php         ;flags after load/store sequence
0019C2  1  49 C3                eor #$c3
0019C4  1  A8                   tay
0019C5  1  C5 14                cmp zp1+1   ;test result
0019C7  1  D0 FE                trap_ne
0019C9  1  68                   pla         ;load status
0019CA  1  49 7D                eor_flag <~fnz ;mask bits not altered
0019CC  1  CD 1D 02             cmp fLDx+1  ;test flags
0019CF  1  D0 FE                trap_ne
0019D1  1  A9 FF 48 28          set_stat $ff
0019D5  1  AC 19 02             ldy abs1+2
0019D8  1  08                   php         ;test stores do not alter flags
0019D9  1  98                   tya
0019DA  1  49 C3                eor #$c3
0019DC  1  A8                   tay
0019DD  1  28                   plp
0019DE  1  84 0E                sty zpt+2
0019E0  1  08                   php         ;flags after load/store sequence
0019E1  1  49 C3                eor #$c3
0019E3  1  A8                   tay
0019E4  1  C5 15                cmp zp1+2   ;test result
0019E6  1  D0 FE                trap_ne
0019E8  1  68                   pla         ;load status
0019E9  1  49 7D                eor_flag <~fnz ;mask bits not altered
0019EB  1  CD 1E 02             cmp fLDx+2  ;test flags
0019EE  1  D0 FE                trap_ne
0019F0  1  A9 FF 48 28          set_stat $ff
0019F4  1  AC 1A 02             ldy abs1+3
0019F7  1  08                   php         ;test stores do not alter flags
0019F8  1  98                   tya
0019F9  1  49 C3                eor #$c3
0019FB  1  A8                   tay
0019FC  1  28                   plp
0019FD  1  84 0F                sty zpt+3
0019FF  1  08                   php         ;flags after load/store sequence
001A00  1  49 C3                eor #$c3
001A02  1  A8                   tay
001A03  1  C5 16                cmp zp1+3   ;test result
001A05  1  D0 FE                trap_ne
001A07  1  68                   pla         ;load status
001A08  1  49 7D                eor_flag <~fnz ;mask bits not altered
001A0A  1  CD 1F 02             cmp fLDx+3  ;test flags
001A0D  1  D0 FE                trap_ne
001A0F  1               
001A0F  1               
001A0F  1  A9 00 48 28          set_stat 0
001A13  1  A0 C3                ldy #$c3
001A15  1  08                   php
001A16  1  CC 17 02             cpy abs1    ;test result
001A19  1  D0 FE                trap_ne
001A1B  1  68                   pla         ;load status
001A1C  1  49 30                eor_flag 0
001A1E  1  CD 1C 02             cmp fLDx    ;test flags
001A21  1  D0 FE                trap_ne
001A23  1  A9 00 48 28          set_stat 0
001A27  1  A0 82                ldy #$82
001A29  1  08                   php
001A2A  1  CC 18 02             cpy abs1+1  ;test result
001A2D  1  D0 FE                trap_ne
001A2F  1  68                   pla         ;load status
001A30  1  49 30                eor_flag 0
001A32  1  CD 1D 02             cmp fLDx+1  ;test flags
001A35  1  D0 FE                trap_ne
001A37  1  A9 00 48 28          set_stat 0
001A3B  1  A0 41                ldy #$41
001A3D  1  08                   php
001A3E  1  CC 19 02             cpy abs1+2  ;test result
001A41  1  D0 FE                trap_ne
001A43  1  68                   pla         ;load status
001A44  1  49 30                eor_flag 0
001A46  1  CD 1E 02             cmp fLDx+2  ;test flags
001A49  1  D0 FE                trap_ne
001A4B  1  A9 00 48 28          set_stat 0
001A4F  1  A0 00                ldy #0
001A51  1  08                   php
001A52  1  CC 1A 02             cpy abs1+3  ;test result
001A55  1  D0 FE                trap_ne
001A57  1  68                   pla         ;load status
001A58  1  49 30                eor_flag 0
001A5A  1  CD 1F 02             cmp fLDx+3  ;test flags
001A5D  1  D0 FE                trap_ne
001A5F  1               
001A5F  1  A9 FF 48 28          set_stat $ff
001A63  1  A0 C3                ldy #$c3
001A65  1  08                   php
001A66  1  CC 17 02             cpy abs1    ;test result
001A69  1  D0 FE                trap_ne
001A6B  1  68                   pla         ;load status
001A6C  1  49 7D                eor_flag <~fnz ;mask bits not altered
001A6E  1  CD 1C 02             cmp fLDx    ;test flags
001A71  1  D0 FE                trap_ne
001A73  1  A9 FF 48 28          set_stat $ff
001A77  1  A0 82                ldy #$82
001A79  1  08                   php
001A7A  1  CC 18 02             cpy abs1+1  ;test result
001A7D  1  D0 FE                trap_ne
001A7F  1  68                   pla         ;load status
001A80  1  49 7D                eor_flag <~fnz ;mask bits not altered
001A82  1  CD 1D 02             cmp fLDx+1  ;test flags
001A85  1  D0 FE                trap_ne
001A87  1  A9 FF 48 28          set_stat $ff
001A8B  1  A0 41                ldy #$41
001A8D  1  08                   php
001A8E  1  CC 19 02             cpy abs1+2   ;test result
001A91  1  D0 FE                trap_ne
001A93  1  68                   pla         ;load status
001A94  1  49 7D                eor_flag <~fnz ;mask bits not altered
001A96  1  CD 1E 02             cmp fLDx+2  ;test flags
001A99  1  D0 FE                trap_ne
001A9B  1  A9 FF 48 28          set_stat $ff
001A9F  1  A0 00                ldy #0
001AA1  1  08                   php
001AA2  1  CC 1A 02             cpy abs1+3  ;test result
001AA5  1  D0 FE                trap_ne
001AA7  1  68                   pla         ;load status
001AA8  1  49 7D                eor_flag <~fnz ;mask bits not altered
001AAA  1  CD 1F 02             cmp fLDx+3  ;test flags
001AAD  1  D0 FE                trap_ne
001AAF  1               
001AAF  1  A0 00                ldy #0
001AB1  1  A5 0C                lda zpt
001AB3  1  49 C3                eor #$c3
001AB5  1  C5 13                cmp zp1
001AB7  1  D0 FE                trap_ne     ;store to zp   data
001AB9  1  84 0C                sty zpt     ;clear
001ABB  1  AD 03 02             lda abst
001ABE  1  49 C3                eor #$c3
001AC0  1  CD 17 02             cmp abs1
001AC3  1  D0 FE                trap_ne     ;store to abs   data
001AC5  1  8C 03 02             sty abst    ;clear
001AC8  1  A5 0D                lda zpt+1
001ACA  1  49 C3                eor #$c3
001ACC  1  C5 14                cmp zp1+1
001ACE  1  D0 FE                trap_ne     ;store to zp+1 data
001AD0  1  84 0D                sty zpt+1   ;clear
001AD2  1  AD 04 02             lda abst+1
001AD5  1  49 C3                eor #$c3
001AD7  1  CD 18 02             cmp abs1+1
001ADA  1  D0 FE                trap_ne     ;store to abs+1 data
001ADC  1  8C 04 02             sty abst+1  ;clear
001ADF  1  A5 0E                lda zpt+2
001AE1  1  49 C3                eor #$c3
001AE3  1  C5 15                cmp zp1+2
001AE5  1  D0 FE                trap_ne     ;store to zp+2 data
001AE7  1  84 0E                sty zpt+2   ;clear
001AE9  1  AD 05 02             lda abst+2
001AEC  1  49 C3                eor #$c3
001AEE  1  CD 19 02             cmp abs1+2
001AF1  1  D0 FE                trap_ne     ;store to abs+2 data
001AF3  1  8C 05 02             sty abst+2  ;clear
001AF6  1  A5 0F                lda zpt+3
001AF8  1  49 C3                eor #$c3
001AFA  1  C5 16                cmp zp1+3
001AFC  1  D0 FE                trap_ne     ;store to zp+3 data
001AFE  1  84 0F                sty zpt+3   ;clear
001B00  1  AD 06 02             lda abst+3
001B03  1  49 C3                eor #$c3
001B05  1  CD 1A 02             cmp abs1+3
001B08  1  D0 FE                trap_ne     ;store to abs+3 data
001B0A  1  8C 06 02             sty abst+3  ;clear
001B0D  1  AD 00 02 C9          next_test
001B11  1  14 D0 FE A9  
001B15  1  15 8D 00 02  
001B55  1               
001B55  1               ; testing load / store accumulator LDA / STA all addressing modes
001B55  1               ; LDA / STA - zp,x / abs,x
001B55  1  A2 03                ldx #3
001B57  1               tldax:
001B57  1  A9 00 48 28          set_stat 0
001B5B  1  B5 13                lda zp1,x
001B5D  1  08                   php         ;test stores do not alter flags
001B5E  1  49 C3                eor #$c3
001B60  1  28                   plp
001B61  1  9D 03 02             sta abst,x
001B64  1  08                   php         ;flags after load/store sequence
001B65  1  49 C3                eor #$c3
001B67  1  DD 17 02             cmp abs1,x  ;test result
001B6A  1  D0 FE                trap_ne
001B6C  1  68                   pla         ;load status
001B6D  1  49 30                eor_flag 0
001B6F  1  DD 1C 02             cmp fLDx,x  ;test flags
001B72  1  D0 FE                trap_ne
001B74  1  CA                   dex
001B75  1  10 E0                bpl tldax
001B77  1               
001B77  1  A2 03                ldx #3
001B79  1               tldax1:
001B79  1  A9 FF 48 28          set_stat $ff
001B7D  1  B5 13                lda zp1,x
001B7F  1  08                   php         ;test stores do not alter flags
001B80  1  49 C3                eor #$c3
001B82  1  28                   plp
001B83  1  9D 03 02             sta abst,x
001B86  1  08                   php         ;flags after load/store sequence
001B87  1  49 C3                eor #$c3
001B89  1  DD 17 02             cmp abs1,x   ;test result
001B8C  1  D0 FE                trap_ne
001B8E  1  68                   pla         ;load status
001B8F  1  49 7D                eor_flag <~fnz ;mask bits not altered
001B91  1  DD 1C 02             cmp fLDx,x  ;test flags
001B94  1  D0 FE                trap_ne
001B96  1  CA                   dex
001B97  1  10 E0                bpl tldax1
001B99  1               
001B99  1  A2 03                ldx #3
001B9B  1               tldax2:
001B9B  1  A9 00 48 28          set_stat 0
001B9F  1  BD 17 02             lda abs1,x
001BA2  1  08                   php         ;test stores do not alter flags
001BA3  1  49 C3                eor #$c3
001BA5  1  28                   plp
001BA6  1  95 0C                sta zpt,x
001BA8  1  08                   php         ;flags after load/store sequence
001BA9  1  49 C3                eor #$c3
001BAB  1  D5 13                cmp zp1,x   ;test result
001BAD  1  D0 FE                trap_ne
001BAF  1  68                   pla         ;load status
001BB0  1  49 30                eor_flag 0
001BB2  1  DD 1C 02             cmp fLDx,x  ;test flags
001BB5  1  D0 FE                trap_ne
001BB7  1  CA                   dex
001BB8  1  10 E1                bpl tldax2
001BBA  1               
001BBA  1  A2 03                ldx #3
001BBC  1               tldax3:
001BBC  1  A9 FF 48 28          set_stat $ff
001BC0  1  BD 17 02             lda abs1,x
001BC3  1  08                   php         ;test stores do not alter flags
001BC4  1  49 C3                eor #$c3
001BC6  1  28                   plp
001BC7  1  95 0C                sta zpt,x
001BC9  1  08                   php         ;flags after load/store sequence
001BCA  1  49 C3                eor #$c3
001BCC  1  D5 13                cmp zp1,x   ;test result
001BCE  1  D0 FE                trap_ne
001BD0  1  68                   pla         ;load status
001BD1  1  49 7D                eor_flag <~fnz ;mask bits not altered
001BD3  1  DD 1C 02             cmp fLDx,x  ;test flags
001BD6  1  D0 FE                trap_ne
001BD8  1  CA                   dex
001BD9  1  10 E1                bpl tldax3
001BDB  1               
001BDB  1  A2 03                ldx #3      ;testing store result
001BDD  1  A0 00                ldy #0
001BDF  1  B5 0C        tstax:  lda zpt,x
001BE1  1  49 C3                eor #$c3
001BE3  1  D5 13                cmp zp1,x
001BE5  1  D0 FE                trap_ne     ;store to zp,x data
001BE7  1  94 0C                sty zpt,x   ;clear
001BE9  1  BD 03 02             lda abst,x
001BEC  1  49 C3                eor #$c3
001BEE  1  DD 17 02             cmp abs1,x
001BF1  1  D0 FE                trap_ne     ;store to abs,x data
001BF3  1  8A                   txa
001BF4  1  9D 03 02             sta abst,x  ;clear
001BF7  1  CA                   dex
001BF8  1  10 E5                bpl tstax
001BFA  1  AD 00 02 C9          next_test
001BFE  1  15 D0 FE A9  
001C02  1  16 8D 00 02  
001C42  1               
001C42  1               ; LDA / STA - (zp),y / abs,y / (zp,x)
001C42  1  A0 03                ldy #3
001C44  1               tlday:
001C44  1  A9 00 48 28          set_stat 0
001C48  1  B1 24                lda (ind1),y
001C4A  1  08                   php         ;test stores do not alter flags
001C4B  1  49 C3                eor #$c3
001C4D  1  28                   plp
001C4E  1  99 03 02             sta abst,y
001C51  1  08                   php         ;flags after load/store sequence
001C52  1  49 C3                eor #$c3
001C54  1  D9 17 02             cmp abs1,y  ;test result
001C57  1  D0 FE                trap_ne
001C59  1  68                   pla         ;load status
001C5A  1  49 30                eor_flag 0
001C5C  1  D9 1C 02             cmp fLDx,y  ;test flags
001C5F  1  D0 FE                trap_ne
001C61  1  88                   dey
001C62  1  10 E0                bpl tlday
001C64  1               
001C64  1  A0 03                ldy #3
001C66  1               tlday1:
001C66  1  A9 FF 48 28          set_stat $ff
001C6A  1  B1 24                lda (ind1),y
001C6C  1  08                   php         ;test stores do not alter flags
001C6D  1  49 C3                eor #$c3
001C6F  1  28                   plp
001C70  1  99 03 02             sta abst,y
001C73  1  08                   php         ;flags after load/store sequence
001C74  1  49 C3                eor #$c3
001C76  1  D9 17 02             cmp abs1,y  ;test result
001C79  1  D0 FE                trap_ne
001C7B  1  68                   pla         ;load status
001C7C  1  49 7D                eor_flag <~fnz ;mask bits not altered
001C7E  1  D9 1C 02             cmp fLDx,y  ;test flags
001C81  1  D0 FE                trap_ne
001C83  1  88                   dey
001C84  1  10 E0                bpl tlday1
001C86  1               
001C86  1  A0 03                ldy #3      ;testing store result
001C88  1  A2 00                ldx #0
001C8A  1  B9 03 02     tstay:  lda abst,y
001C8D  1  49 C3                eor #$c3
001C8F  1  D9 17 02             cmp abs1,y
001C92  1  D0 FE                trap_ne     ;store to abs data
001C94  1  8A                   txa
001C95  1  99 03 02             sta abst,y  ;clear
001C98  1  88                   dey
001C99  1  10 EF                bpl tstay
001C9B  1               
001C9B  1  A0 03                ldy #3
001C9D  1               tlday2:
001C9D  1  A9 00 48 28          set_stat 0
001CA1  1  B9 17 02             lda abs1,y
001CA4  1  08                   php         ;test stores do not alter flags
001CA5  1  49 C3                eor #$c3
001CA7  1  28                   plp
001CA8  1  91 30                sta (indt),y
001CAA  1  08                   php         ;flags after load/store sequence
001CAB  1  49 C3                eor #$c3
001CAD  1  D1 24                cmp (ind1),y    ;test result
001CAF  1  D0 FE                trap_ne
001CB1  1  68                   pla         ;load status
001CB2  1  49 30                eor_flag 0
001CB4  1  D9 1C 02             cmp fLDx,y  ;test flags
001CB7  1  D0 FE                trap_ne
001CB9  1  88                   dey
001CBA  1  10 E1                bpl tlday2
001CBC  1               
001CBC  1  A0 03                ldy #3
001CBE  1               tlday3:
001CBE  1  A9 FF 48 28          set_stat $ff
001CC2  1  B9 17 02             lda abs1,y
001CC5  1  08                   php         ;test stores do not alter flags
001CC6  1  49 C3                eor #$c3
001CC8  1  28                   plp
001CC9  1  91 30                sta (indt),y
001CCB  1  08                   php         ;flags after load/store sequence
001CCC  1  49 C3                eor #$c3
001CCE  1  D1 24                cmp (ind1),y   ;test result
001CD0  1  D0 FE                trap_ne
001CD2  1  68                   pla         ;load status
001CD3  1  49 7D                eor_flag <~fnz ;mask bits not altered
001CD5  1  D9 1C 02             cmp fLDx,y  ;test flags
001CD8  1  D0 FE                trap_ne
001CDA  1  88                   dey
001CDB  1  10 E1                bpl tlday3
001CDD  1               
001CDD  1  A0 03                ldy #3      ;testing store result
001CDF  1  A2 00                ldx #0
001CE1  1  B9 03 02     tstay1: lda abst,y
001CE4  1  49 C3                eor #$c3
001CE6  1  D9 17 02             cmp abs1,y
001CE9  1  D0 FE                trap_ne     ;store to abs data
001CEB  1  8A                   txa
001CEC  1  99 03 02             sta abst,y  ;clear
001CEF  1  88                   dey
001CF0  1  10 EF                bpl tstay1
001CF2  1               
001CF2  1  A2 06                ldx #6
001CF4  1  A0 03                ldy #3
001CF6  1               tldax4:
001CF6  1  A9 00 48 28          set_stat 0
001CFA  1  A1 24                lda (ind1,x)
001CFC  1  08                   php         ;test stores do not alter flags
001CFD  1  49 C3                eor #$c3
001CFF  1  28                   plp
001D00  1  81 30                sta (indt,x)
001D02  1  08                   php         ;flags after load/store sequence
001D03  1  49 C3                eor #$c3
001D05  1  D9 17 02             cmp abs1,y  ;test result
001D08  1  D0 FE                trap_ne
001D0A  1  68                   pla         ;load status
001D0B  1  49 30                eor_flag 0
001D0D  1  D9 1C 02             cmp fLDx,y  ;test flags
001D10  1  D0 FE                trap_ne
001D12  1  CA                   dex
001D13  1  CA                   dex
001D14  1  88                   dey
001D15  1  10 DF                bpl tldax4
001D17  1               
001D17  1  A2 06                ldx #6
001D19  1  A0 03                ldy #3
001D1B  1               tldax5:
001D1B  1  A9 FF 48 28          set_stat $ff
001D1F  1  A1 24                lda (ind1,x)
001D21  1  08                   php         ;test stores do not alter flags
001D22  1  49 C3                eor #$c3
001D24  1  28                   plp
001D25  1  81 30                sta (indt,x)
001D27  1  08                   php         ;flags after load/store sequence
001D28  1  49 C3                eor #$c3
001D2A  1  D9 17 02             cmp abs1,y  ;test result
001D2D  1  D0 FE                trap_ne
001D2F  1  68                   pla         ;load status
001D30  1  49 7D                eor_flag <~fnz ;mask bits not altered
001D32  1  D9 1C 02             cmp fLDx,y  ;test flags
001D35  1  D0 FE                trap_ne
001D37  1  CA                   dex
001D38  1  CA                   dex
001D39  1  88                   dey
001D3A  1  10 DF                bpl tldax5
001D3C  1               
001D3C  1  A0 03                ldy #3      ;testing store result
001D3E  1  A2 00                ldx #0
001D40  1  B9 03 02     tstay2: lda abst,y
001D43  1  49 C3                eor #$c3
001D45  1  D9 17 02             cmp abs1,y
001D48  1  D0 FE                trap_ne     ;store to abs data
001D4A  1  8A                   txa
001D4B  1  99 03 02             sta abst,y  ;clear
001D4E  1  88                   dey
001D4F  1  10 EF                bpl tstay2
001D51  1  AD 00 02 C9          next_test
001D55  1  16 D0 FE A9  
001D59  1  17 8D 00 02  
001D99  1               
001D99  1               ; indexed wraparound test (only zp should wrap)
001D99  1  A2 FD                ldx #3+$fa
001D9B  1  B5 19        tldax6: lda <(zp1-$fa),x   ;wrap on indexed zp
001D9D  1  9D 09 01             sta abst-$fa,x      ;no STX abs,x!
001DA0  1  CA                   dex
001DA1  1  E0 FA                cpx #$fa
001DA3  1  B0 F6                bcs tldax6
001DA5  1  A2 FD                ldx #3+$fa
001DA7  1  BD 1D 01     tldax7: lda abs1-$fa,x      ;no wrap on indexed abs
001DAA  1  95 12                sta <(zpt-$fa),x
001DAC  1  CA                   dex
001DAD  1  E0 FA                cpx #$fa
001DAF  1  B0 F6                bcs tldax7
001DB1  1               
001DB1  1  A2 03                ldx #3      ;testing wraparound result
001DB3  1  A0 00                ldy #0
001DB5  1  B5 0C        tstax1: lda zpt,x
001DB7  1  D5 13                cmp zp1,x
001DB9  1  D0 FE                trap_ne     ;store to zp,x data
001DBB  1  94 0C                sty zpt,x   ;clear
001DBD  1  BD 03 02             lda abst,x
001DC0  1  DD 17 02             cmp abs1,x
001DC3  1  D0 FE                trap_ne     ;store to abs,x data
001DC5  1  8A                   txa
001DC6  1  9D 03 02             sta abst,x  ;clear
001DC9  1  CA                   dex
001DCA  1  10 E9                bpl tstax1
001DCC  1               
001DCC  1  A0 FB                ldy #3+$f8
001DCE  1  A2 FE                ldx #6+$f8
001DD0  1  A1 2C        tlday4: lda (<(ind1-$f8),x) ;wrap on indexed zp indirect
001DD2  1  99 0B 01             sta abst-$f8,y
001DD5  1  CA                   dex
001DD6  1  CA                   dex
001DD7  1  88                   dey
001DD8  1  C0 F8                cpy #$f8
001DDA  1  B0 F4                bcs tlday4
001DDC  1  A0 03                ldy #3      ;testing wraparound result
001DDE  1  A2 00                ldx #0
001DE0  1  B9 03 02     tstay4: lda abst,y
001DE3  1  D9 17 02             cmp abs1,y
001DE6  1  D0 FE                trap_ne     ;store to abs data
001DE8  1  8A                   txa
001DE9  1  99 03 02             sta abst,y  ;clear
001DEC  1  88                   dey
001DED  1  10 F1                bpl tstay4
001DEF  1               
001DEF  1  A0 FB                ldy #3+$f8
001DF1  1  B9 1F 01     tlday5: lda abs1-$f8,y  ;no wrap on indexed abs
001DF4  1  91 38                sta (inwt),y
001DF6  1  88                   dey
001DF7  1  C0 F8                cpy #$f8
001DF9  1  B0 F6                bcs tlday5
001DFB  1  A0 03                ldy #3      ;testing wraparound result
001DFD  1  A2 00                ldx #0
001DFF  1  B9 03 02     tstay5: lda abst,y
001E02  1  D9 17 02             cmp abs1,y
001E05  1  D0 FE                trap_ne     ;store to abs data
001E07  1  8A                   txa
001E08  1  99 03 02             sta abst,y  ;clear
001E0B  1  88                   dey
001E0C  1  10 F1                bpl tstay5
001E0E  1               
001E0E  1  A0 FB                ldy #3+$f8
001E10  1  A2 FE                ldx #6+$f8
001E12  1  B1 2E        tlday6: lda (inw1),y    ;no wrap on zp indirect indexed
001E14  1  81 38                sta (<(indt-$f8),x)
001E16  1  CA                   dex
001E17  1  CA                   dex
001E18  1  88                   dey
001E19  1  C0 F8                cpy #$f8
001E1B  1  B0 F5                bcs tlday6
001E1D  1  A0 03                ldy #3      ;testing wraparound result
001E1F  1  A2 00                ldx #0
001E21  1  B9 03 02     tstay6: lda abst,y
001E24  1  D9 17 02             cmp abs1,y
001E27  1  D0 FE                trap_ne     ;store to abs data
001E29  1  8A                   txa
001E2A  1  99 03 02             sta abst,y  ;clear
001E2D  1  88                   dey
001E2E  1  10 F1                bpl tstay6
001E30  1  AD 00 02 C9          next_test
001E34  1  17 D0 FE A9  
001E38  1  18 8D 00 02  
001E78  1               
001E78  1               ; LDA / STA - zp / abs / #
001E78  1  A9 00 48 28          set_stat 0
001E7C  1  A5 13                lda zp1
001E7E  1  08                   php         ;test stores do not alter flags
001E7F  1  49 C3                eor #$c3
001E81  1  28                   plp
001E82  1  8D 03 02             sta abst
001E85  1  08                   php         ;flags after load/store sequence
001E86  1  49 C3                eor #$c3
001E88  1  C9 C3                cmp #$c3    ;test result
001E8A  1  D0 FE                trap_ne
001E8C  1  68                   pla         ;load status
001E8D  1  49 30                eor_flag 0
001E8F  1  CD 1C 02             cmp fLDx    ;test flags
001E92  1  D0 FE                trap_ne
001E94  1  A9 00 48 28          set_stat 0
001E98  1  A5 14                lda zp1+1
001E9A  1  08                   php         ;test stores do not alter flags
001E9B  1  49 C3                eor #$c3
001E9D  1  28                   plp
001E9E  1  8D 04 02             sta abst+1
001EA1  1  08                   php         ;flags after load/store sequence
001EA2  1  49 C3                eor #$c3
001EA4  1  C9 82                cmp #$82    ;test result
001EA6  1  D0 FE                trap_ne
001EA8  1  68                   pla         ;load status
001EA9  1  49 30                eor_flag 0
001EAB  1  CD 1D 02             cmp fLDx+1  ;test flags
001EAE  1  D0 FE                trap_ne
001EB0  1  A9 00 48 28          set_stat 0
001EB4  1  A5 15                lda zp1+2
001EB6  1  08                   php         ;test stores do not alter flags
001EB7  1  49 C3                eor #$c3
001EB9  1  28                   plp
001EBA  1  8D 05 02             sta abst+2
001EBD  1  08                   php         ;flags after load/store sequence
001EBE  1  49 C3                eor #$c3
001EC0  1  C9 41                cmp #$41    ;test result
001EC2  1  D0 FE                trap_ne
001EC4  1  68                   pla         ;load status
001EC5  1  49 30                eor_flag 0
001EC7  1  CD 1E 02             cmp fLDx+2  ;test flags
001ECA  1  D0 FE                trap_ne
001ECC  1  A9 00 48 28          set_stat 0
001ED0  1  A5 16                lda zp1+3
001ED2  1  08                   php         ;test stores do not alter flags
001ED3  1  49 C3                eor #$c3
001ED5  1  28                   plp
001ED6  1  8D 06 02             sta abst+3
001ED9  1  08                   php         ;flags after load/store sequence
001EDA  1  49 C3                eor #$c3
001EDC  1  C9 00                cmp #0      ;test result
001EDE  1  D0 FE                trap_ne
001EE0  1  68                   pla         ;load status
001EE1  1  49 30                eor_flag 0
001EE3  1  CD 1F 02             cmp fLDx+3  ;test flags
001EE6  1  D0 FE                trap_ne
001EE8  1  A9 FF 48 28          set_stat $ff
001EEC  1  A5 13                lda zp1
001EEE  1  08                   php         ;test stores do not alter flags
001EEF  1  49 C3                eor #$c3
001EF1  1  28                   plp
001EF2  1  8D 03 02             sta abst
001EF5  1  08                   php         ;flags after load/store sequence
001EF6  1  49 C3                eor #$c3
001EF8  1  C9 C3                cmp #$c3    ;test result
001EFA  1  D0 FE                trap_ne
001EFC  1  68                   pla         ;load status
001EFD  1  49 7D                eor_flag <~fnz ;mask bits not altered
001EFF  1  CD 1C 02             cmp fLDx    ;test flags
001F02  1  D0 FE                trap_ne
001F04  1  A9 FF 48 28          set_stat $ff
001F08  1  A5 14                lda zp1+1
001F0A  1  08                   php         ;test stores do not alter flags
001F0B  1  49 C3                eor #$c3
001F0D  1  28                   plp
001F0E  1  8D 04 02             sta abst+1
001F11  1  08                   php         ;flags after load/store sequence
001F12  1  49 C3                eor #$c3
001F14  1  C9 82                cmp #$82    ;test result
001F16  1  D0 FE                trap_ne
001F18  1  68                   pla         ;load status
001F19  1  49 7D                eor_flag <~fnz ;mask bits not altered
001F1B  1  CD 1D 02             cmp fLDx+1  ;test flags
001F1E  1  D0 FE                trap_ne
001F20  1  A9 FF 48 28          set_stat $ff
001F24  1  A5 15                lda zp1+2
001F26  1  08                   php         ;test stores do not alter flags
001F27  1  49 C3                eor #$c3
001F29  1  28                   plp
001F2A  1  8D 05 02             sta abst+2
001F2D  1  08                   php         ;flags after load/store sequence
001F2E  1  49 C3                eor #$c3
001F30  1  C9 41                cmp #$41    ;test result
001F32  1  D0 FE                trap_ne
001F34  1  68                   pla         ;load status
001F35  1  49 7D                eor_flag <~fnz ;mask bits not altered
001F37  1  CD 1E 02             cmp fLDx+2  ;test flags
001F3A  1  D0 FE                trap_ne
001F3C  1  A9 FF 48 28          set_stat $ff
001F40  1  A5 16                lda zp1+3
001F42  1  08                   php         ;test stores do not alter flags
001F43  1  49 C3                eor #$c3
001F45  1  28                   plp
001F46  1  8D 06 02             sta abst+3
001F49  1  08                   php         ;flags after load/store sequence
001F4A  1  49 C3                eor #$c3
001F4C  1  C9 00                cmp #0      ;test result
001F4E  1  D0 FE                trap_ne
001F50  1  68                   pla         ;load status
001F51  1  49 7D                eor_flag <~fnz ;mask bits not altered
001F53  1  CD 1F 02             cmp fLDx+3  ;test flags
001F56  1  D0 FE                trap_ne
001F58  1  A9 00 48 28          set_stat 0
001F5C  1  AD 17 02             lda abs1
001F5F  1  08                   php         ;test stores do not alter flags
001F60  1  49 C3                eor #$c3
001F62  1  28                   plp
001F63  1  85 0C                sta zpt
001F65  1  08                   php         ;flags after load/store sequence
001F66  1  49 C3                eor #$c3
001F68  1  C5 13                cmp zp1     ;test result
001F6A  1  D0 FE                trap_ne
001F6C  1  68                   pla         ;load status
001F6D  1  49 30                eor_flag 0
001F6F  1  CD 1C 02             cmp fLDx    ;test flags
001F72  1  D0 FE                trap_ne
001F74  1  A9 00 48 28          set_stat 0
001F78  1  AD 18 02             lda abs1+1
001F7B  1  08                   php         ;test stores do not alter flags
001F7C  1  49 C3                eor #$c3
001F7E  1  28                   plp
001F7F  1  85 0D                sta zpt+1
001F81  1  08                   php         ;flags after load/store sequence
001F82  1  49 C3                eor #$c3
001F84  1  C5 14                cmp zp1+1   ;test result
001F86  1  D0 FE                trap_ne
001F88  1  68                   pla         ;load status
001F89  1  49 30                eor_flag 0
001F8B  1  CD 1D 02             cmp fLDx+1  ;test flags
001F8E  1  D0 FE                trap_ne
001F90  1  A9 00 48 28          set_stat 0
001F94  1  AD 19 02             lda abs1+2
001F97  1  08                   php         ;test stores do not alter flags
001F98  1  49 C3                eor #$c3
001F9A  1  28                   plp
001F9B  1  85 0E                sta zpt+2
001F9D  1  08                   php         ;flags after load/store sequence
001F9E  1  49 C3                eor #$c3
001FA0  1  C5 15                cmp zp1+2   ;test result
001FA2  1  D0 FE                trap_ne
001FA4  1  68                   pla         ;load status
001FA5  1  49 30                eor_flag 0
001FA7  1  CD 1E 02             cmp fLDx+2  ;test flags
001FAA  1  D0 FE                trap_ne
001FAC  1  A9 00 48 28          set_stat 0
001FB0  1  AD 1A 02             lda abs1+3
001FB3  1  08                   php         ;test stores do not alter flags
001FB4  1  49 C3                eor #$c3
001FB6  1  28                   plp
001FB7  1  85 0F                sta zpt+3
001FB9  1  08                   php         ;flags after load/store sequence
001FBA  1  49 C3                eor #$c3
001FBC  1  C5 16                cmp zp1+3   ;test result
001FBE  1  D0 FE                trap_ne
001FC0  1  68                   pla         ;load status
001FC1  1  49 30                eor_flag 0
001FC3  1  CD 1F 02             cmp fLDx+3  ;test flags
001FC6  1  D0 FE                trap_ne
001FC8  1  A9 FF 48 28          set_stat $ff
001FCC  1  AD 17 02             lda abs1
001FCF  1  08                   php         ;test stores do not alter flags
001FD0  1  49 C3                eor #$c3
001FD2  1  28                   plp
001FD3  1  85 0C                sta zpt
001FD5  1  08                   php         ;flags after load/store sequence
001FD6  1  49 C3                eor #$c3
001FD8  1  C5 13                cmp zp1     ;test result
001FDA  1  D0 FE                trap_ne
001FDC  1  68                   pla         ;load status
001FDD  1  49 7D                eor_flag <~fnz ;mask bits not altered
001FDF  1  CD 1C 02             cmp fLDx    ;test flags
001FE2  1  D0 FE                trap_ne
001FE4  1  A9 FF 48 28          set_stat $ff
001FE8  1  AD 18 02             lda abs1+1
001FEB  1  08                   php         ;test stores do not alter flags
001FEC  1  49 C3                eor #$c3
001FEE  1  28                   plp
001FEF  1  85 0D                sta zpt+1
001FF1  1  08                   php         ;flags after load/store sequence
001FF2  1  49 C3                eor #$c3
001FF4  1  C5 14                cmp zp1+1   ;test result
001FF6  1  D0 FE                trap_ne
001FF8  1  68                   pla         ;load status
001FF9  1  49 7D                eor_flag <~fnz ;mask bits not altered
001FFB  1  CD 1D 02             cmp fLDx+1  ;test flags
001FFE  1  D0 FE                trap_ne
002000  1  A9 FF 48 28          set_stat $ff
002004  1  AD 19 02             lda abs1+2
002007  1  08                   php         ;test stores do not alter flags
002008  1  49 C3                eor #$c3
00200A  1  28                   plp
00200B  1  85 0E                sta zpt+2
00200D  1  08                   php         ;flags after load/store sequence
00200E  1  49 C3                eor #$c3
002010  1  C5 15                cmp zp1+2   ;test result
002012  1  D0 FE                trap_ne
002014  1  68                   pla         ;load status
002015  1  49 7D                eor_flag <~fnz ;mask bits not altered
002017  1  CD 1E 02             cmp fLDx+2  ;test flags
00201A  1  D0 FE                trap_ne
00201C  1  A9 FF 48 28          set_stat $ff
002020  1  AD 1A 02             lda abs1+3
002023  1  08                   php         ;test stores do not alter flags
002024  1  49 C3                eor #$c3
002026  1  28                   plp
002027  1  85 0F                sta zpt+3
002029  1  08                   php         ;flags after load/store sequence
00202A  1  49 C3                eor #$c3
00202C  1  C5 16                cmp zp1+3   ;test result
00202E  1  D0 FE                trap_ne
002030  1  68                   pla         ;load status
002031  1  49 7D                eor_flag <~fnz ;mask bits not altered
002033  1  CD 1F 02             cmp fLDx+3  ;test flags
002036  1  D0 FE                trap_ne
002038  1  A9 00 48 28          set_stat 0
00203C  1  A9 C3                lda #$c3
00203E  1  08                   php
00203F  1  CD 17 02             cmp abs1    ;test result
002042  1  D0 FE                trap_ne
002044  1  68                   pla         ;load status
002045  1  49 30                eor_flag 0
002047  1  CD 1C 02             cmp fLDx    ;test flags
00204A  1  D0 FE                trap_ne
00204C  1  A9 00 48 28          set_stat 0
002050  1  A9 82                lda #$82
002052  1  08                   php
002053  1  CD 18 02             cmp abs1+1  ;test result
002056  1  D0 FE                trap_ne
002058  1  68                   pla         ;load status
002059  1  49 30                eor_flag 0
00205B  1  CD 1D 02             cmp fLDx+1  ;test flags
00205E  1  D0 FE                trap_ne
002060  1  A9 00 48 28          set_stat 0
002064  1  A9 41                lda #$41
002066  1  08                   php
002067  1  CD 19 02             cmp abs1+2  ;test result
00206A  1  D0 FE                trap_ne
00206C  1  68                   pla         ;load status
00206D  1  49 30                eor_flag 0
00206F  1  CD 1E 02             cmp fLDx+2  ;test flags
002072  1  D0 FE                trap_ne
002074  1  A9 00 48 28          set_stat 0
002078  1  A9 00                lda #0
00207A  1  08                   php
00207B  1  CD 1A 02             cmp abs1+3  ;test result
00207E  1  D0 FE                trap_ne
002080  1  68                   pla         ;load status
002081  1  49 30                eor_flag 0
002083  1  CD 1F 02             cmp fLDx+3  ;test flags
002086  1  D0 FE                trap_ne
002088  1               
002088  1  A9 FF 48 28          set_stat $ff
00208C  1  A9 C3                lda #$c3
00208E  1  08                   php
00208F  1  CD 17 02             cmp abs1    ;test result
002092  1  D0 FE                trap_ne
002094  1  68                   pla         ;load status
002095  1  49 7D                eor_flag <~fnz ;mask bits not altered
002097  1  CD 1C 02             cmp fLDx    ;test flags
00209A  1  D0 FE                trap_ne
00209C  1  A9 FF 48 28          set_stat $ff
0020A0  1  A9 82                lda #$82
0020A2  1  08                   php
0020A3  1  CD 18 02             cmp abs1+1  ;test result
0020A6  1  D0 FE                trap_ne
0020A8  1  68                   pla         ;load status
0020A9  1  49 7D                eor_flag <~fnz ;mask bits not altered
0020AB  1  CD 1D 02             cmp fLDx+1  ;test flags
0020AE  1  D0 FE                trap_ne
0020B0  1  A9 FF 48 28          set_stat $ff
0020B4  1  A9 41                lda #$41
0020B6  1  08                   php
0020B7  1  CD 19 02             cmp abs1+2  ;test result
0020BA  1  D0 FE                trap_ne
0020BC  1  68                   pla         ;load status
0020BD  1  49 7D                eor_flag <~fnz ;mask bits not altered
0020BF  1  CD 1E 02             cmp fLDx+2  ;test flags
0020C2  1  D0 FE                trap_ne
0020C4  1  A9 FF 48 28          set_stat $ff
0020C8  1  A9 00                lda #0
0020CA  1  08                   php
0020CB  1  CD 1A 02             cmp abs1+3  ;test result
0020CE  1  D0 FE                trap_ne
0020D0  1  68                   pla         ;load status
0020D1  1  49 7D                eor_flag <~fnz ;mask bits not altered
0020D3  1  CD 1F 02             cmp fLDx+3  ;test flags
0020D6  1  D0 FE                trap_ne
0020D8  1               
0020D8  1  A2 00                ldx #0
0020DA  1  A5 0C                lda zpt
0020DC  1  49 C3                eor #$c3
0020DE  1  C5 13                cmp zp1
0020E0  1  D0 FE                trap_ne     ;store to zp data
0020E2  1  86 0C                stx zpt     ;clear
0020E4  1  AD 03 02             lda abst
0020E7  1  49 C3                eor #$c3
0020E9  1  CD 17 02             cmp abs1
0020EC  1  D0 FE                trap_ne     ;store to abs data
0020EE  1  8E 03 02             stx abst    ;clear
0020F1  1  A5 0D                lda zpt+1
0020F3  1  49 C3                eor #$c3
0020F5  1  C5 14                cmp zp1+1
0020F7  1  D0 FE                trap_ne     ;store to zp data
0020F9  1  86 0D                stx zpt+1   ;clear
0020FB  1  AD 04 02             lda abst+1
0020FE  1  49 C3                eor #$c3
002100  1  CD 18 02             cmp abs1+1
002103  1  D0 FE                trap_ne     ;store to abs data
002105  1  8E 04 02             stx abst+1  ;clear
002108  1  A5 0E                lda zpt+2
00210A  1  49 C3                eor #$c3
00210C  1  C5 15                cmp zp1+2
00210E  1  D0 FE                trap_ne     ;store to zp data
002110  1  86 0E                stx zpt+2   ;clear
002112  1  AD 05 02             lda abst+2
002115  1  49 C3                eor #$c3
002117  1  CD 19 02             cmp abs1+2
00211A  1  D0 FE                trap_ne     ;store to abs data
00211C  1  8E 05 02             stx abst+2  ;clear
00211F  1  A5 0F                lda zpt+3
002121  1  49 C3                eor #$c3
002123  1  C5 16                cmp zp1+3
002125  1  D0 FE                trap_ne     ;store to zp data
002127  1  86 0F                stx zpt+3   ;clear
002129  1  AD 06 02             lda abst+3
00212C  1  49 C3                eor #$c3
00212E  1  CD 1A 02             cmp abs1+3
002131  1  D0 FE                trap_ne     ;store to abs data
002133  1  8E 06 02             stx abst+3  ;clear
002136  1  AD 00 02 C9          next_test
00213A  1  18 D0 FE A9  
00213E  1  19 8D 00 02  
00217E  1               
00217E  1               ; testing bit test & compares BIT CPX CPY CMP all addressing modes
00217E  1               ; BIT - zp / abs
00217E  1  A9 00 48 A9          set_a $ff,0
002182  1  FF 28        
002184  1  24 16                bit zp1+3   ;00 - should set Z / clear  NV
002186  1  08 C9 FF D0          tst_a $ff,fz
00218A  1  FE 68 48 C9  
00218E  1  32 D0 FE 28  
002192  1  A9 00 48 A9          set_a 1,0
002196  1  01 28        
002198  1  24 15                bit zp1+2   ;41 - should set V (M6) / clear NZ
00219A  1  08 C9 01 D0          tst_a 1,fv
00219E  1  FE 68 48 C9  
0021A2  1  70 D0 FE 28  
0021A6  1  A9 00 48 A9          set_a 1,0
0021AA  1  01 28        
0021AC  1  24 14                bit zp1+1   ;82 - should set N (M7) & Z / clear V
0021AE  1  08 C9 01 D0          tst_a 1,fnz
0021B2  1  FE 68 48 C9  
0021B6  1  B2 D0 FE 28  
0021BA  1  A9 00 48 A9          set_a 1,0
0021BE  1  01 28        
0021C0  1  24 13                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
0021C2  1  08 C9 01 D0          tst_a 1,fnv
0021C6  1  FE 68 48 C9  
0021CA  1  F0 D0 FE 28  
0021CE  1               
0021CE  1  A9 FF 48 A9          set_a $ff,$ff
0021D2  1  FF 28        
0021D4  1  24 16                bit zp1+3   ;00 - should set Z / clear  NV
0021D6  1  08 C9 FF D0          tst_a $ff,~fnv
0021DA  1  FE 68 48 C9  
0021DE  1  3F D0 FE 28  
0021E2  1  A9 FF 48 A9          set_a 1,$ff
0021E6  1  01 28        
0021E8  1  24 15                bit zp1+2   ;41 - should set V (M6) / clear NZ
0021EA  1  08 C9 01 D0          tst_a 1,~fnz
0021EE  1  FE 68 48 C9  
0021F2  1  7D D0 FE 28  
0021F6  1  A9 FF 48 A9          set_a 1,$ff
0021FA  1  01 28        
0021FC  1  24 14                bit zp1+1   ;82 - should set N (M7) & Z / clear V
0021FE  1  08 C9 01 D0          tst_a 1,~fv
002202  1  FE 68 48 C9  
002206  1  BF D0 FE 28  
00220A  1  A9 FF 48 A9          set_a 1,$ff
00220E  1  01 28        
002210  1  24 13                bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
002212  1  08 C9 01 D0          tst_a 1,~fz
002216  1  FE 68 48 C9  
00221A  1  FD D0 FE 28  
00221E  1               
00221E  1  A9 00 48 A9          set_a $ff,0
002222  1  FF 28        
002224  1  2C 1A 02             bit abs1+3  ;00 - should set Z / clear  NV
002227  1  08 C9 FF D0          tst_a $ff,fz
00222B  1  FE 68 48 C9  
00222F  1  32 D0 FE 28  
002233  1  A9 00 48 A9          set_a 1,0
002237  1  01 28        
002239  1  2C 19 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
00223C  1  08 C9 01 D0          tst_a 1,fv
002240  1  FE 68 48 C9  
002244  1  70 D0 FE 28  
002248  1  A9 00 48 A9          set_a 1,0
00224C  1  01 28        
00224E  1  2C 18 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
002251  1  08 C9 01 D0          tst_a 1,fnz
002255  1  FE 68 48 C9  
002259  1  B2 D0 FE 28  
00225D  1  A9 00 48 A9          set_a 1,0
002261  1  01 28        
002263  1  2C 17 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
002266  1  08 C9 01 D0          tst_a 1,fnv
00226A  1  FE 68 48 C9  
00226E  1  F0 D0 FE 28  
002272  1               
002272  1  A9 FF 48 A9          set_a $ff,$ff
002276  1  FF 28        
002278  1  2C 1A 02             bit abs1+3  ;00 - should set Z / clear  NV
00227B  1  08 C9 FF D0          tst_a $ff,~fnv
00227F  1  FE 68 48 C9  
002283  1  3F D0 FE 28  
002287  1  A9 FF 48 A9          set_a 1,$ff
00228B  1  01 28        
00228D  1  2C 19 02             bit abs1+2  ;41 - should set V (M6) / clear NZ
002290  1  08 C9 01 D0          tst_a 1,~fnz
002294  1  FE 68 48 C9  
002298  1  7D D0 FE 28  
00229C  1  A9 FF 48 A9          set_a 1,$ff
0022A0  1  01 28        
0022A2  1  2C 18 02             bit abs1+1  ;82 - should set N (M7) & Z / clear V
0022A5  1  08 C9 01 D0          tst_a 1,~fv
0022A9  1  FE 68 48 C9  
0022AD  1  BF D0 FE 28  
0022B1  1  A9 FF 48 A9          set_a 1,$ff
0022B5  1  01 28        
0022B7  1  2C 17 02             bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
0022BA  1  08 C9 01 D0          tst_a 1,~fz
0022BE  1  FE 68 48 C9  
0022C2  1  FD D0 FE 28  
0022C6  1  AD 00 02 C9          next_test
0022CA  1  19 D0 FE A9  
0022CE  1  1A 8D 00 02  
00230E  1               
00230E  1               ; CPX - zp / abs / #
00230E  1  A9 00 48 A2          set_x $80,0
002312  1  80 28        
002314  1  E4 17                cpx zp7f
002316  1  08 68 48 C9          tst_stat fc
00231A  1  31 D0 FE 28  
00231E  1  CA                   dex
00231F  1  E4 17                cpx zp7f
002321  1  08 68 48 C9          tst_stat fzc
002325  1  33 D0 FE 28  
002329  1  CA                   dex
00232A  1  E4 17                cpx zp7f
00232C  1  08 E0 7E D0          tst_x $7e,fn
002330  1  FE 68 48 C9  
002334  1  B0 D0 FE 28  
002338  1  A9 FF 48 A2          set_x $80,$ff
00233C  1  80 28        
00233E  1  E4 17                cpx zp7f
002340  1  08 68 48 C9          tst_stat ~fnz
002344  1  7D D0 FE 28  
002348  1  CA                   dex
002349  1  E4 17                cpx zp7f
00234B  1  08 68 48 C9          tst_stat ~fn
00234F  1  7F D0 FE 28  
002353  1  CA                   dex
002354  1  E4 17                cpx zp7f
002356  1  08 E0 7E D0          tst_x $7e,~fzc
00235A  1  FE 68 48 C9  
00235E  1  FC D0 FE 28  
002362  1               
002362  1  A9 00 48 A2          set_x $80,0
002366  1  80 28        
002368  1  EC 1B 02             cpx abs7f
00236B  1  08 68 48 C9          tst_stat fc
00236F  1  31 D0 FE 28  
002373  1  CA                   dex
002374  1  EC 1B 02             cpx abs7f
002377  1  08 68 48 C9          tst_stat fzc
00237B  1  33 D0 FE 28  
00237F  1  CA                   dex
002380  1  EC 1B 02             cpx abs7f
002383  1  08 E0 7E D0          tst_x $7e,fn
002387  1  FE 68 48 C9  
00238B  1  B0 D0 FE 28  
00238F  1  A9 FF 48 A2          set_x $80,$ff
002393  1  80 28        
002395  1  EC 1B 02             cpx abs7f
002398  1  08 68 48 C9          tst_stat ~fnz
00239C  1  7D D0 FE 28  
0023A0  1  CA                   dex
0023A1  1  EC 1B 02             cpx abs7f
0023A4  1  08 68 48 C9          tst_stat ~fn
0023A8  1  7F D0 FE 28  
0023AC  1  CA                   dex
0023AD  1  EC 1B 02             cpx abs7f
0023B0  1  08 E0 7E D0          tst_x $7e,~fzc
0023B4  1  FE 68 48 C9  
0023B8  1  FC D0 FE 28  
0023BC  1               
0023BC  1  A9 00 48 A2          set_x $80,0
0023C0  1  80 28        
0023C2  1  E0 7F                cpx #$7f
0023C4  1  08 68 48 C9          tst_stat fc
0023C8  1  31 D0 FE 28  
0023CC  1  CA                   dex
0023CD  1  E0 7F                cpx #$7f
0023CF  1  08 68 48 C9          tst_stat fzc
0023D3  1  33 D0 FE 28  
0023D7  1  CA                   dex
0023D8  1  E0 7F                cpx #$7f
0023DA  1  08 E0 7E D0          tst_x $7e,fn
0023DE  1  FE 68 48 C9  
0023E2  1  B0 D0 FE 28  
0023E6  1  A9 FF 48 A2          set_x $80,$ff
0023EA  1  80 28        
0023EC  1  E0 7F                cpx #$7f
0023EE  1  08 68 48 C9          tst_stat ~fnz
0023F2  1  7D D0 FE 28  
0023F6  1  CA                   dex
0023F7  1  E0 7F                cpx #$7f
0023F9  1  08 68 48 C9          tst_stat ~fn
0023FD  1  7F D0 FE 28  
002401  1  CA                   dex
002402  1  E0 7F                cpx #$7f
002404  1  08 E0 7E D0          tst_x $7e,~fzc
002408  1  FE 68 48 C9  
00240C  1  FC D0 FE 28  
002410  1  AD 00 02 C9          next_test
002414  1  1A D0 FE A9  
002418  1  1B 8D 00 02  
002458  1               
002458  1               ; CPY - zp / abs / #
002458  1  A9 00 48 A0          set_y $80,0
00245C  1  80 28        
00245E  1  C4 17                cpy zp7f
002460  1  08 68 48 C9          tst_stat fc
002464  1  31 D0 FE 28  
002468  1  88                   dey
002469  1  C4 17                cpy zp7f
00246B  1  08 68 48 C9          tst_stat fzc
00246F  1  33 D0 FE 28  
002473  1  88                   dey
002474  1  C4 17                cpy zp7f
002476  1  08 C0 7E D0          tst_y $7e,fn
00247A  1  FE 68 48 C9  
00247E  1  B0 D0 FE 28  
002482  1  A9 FF 48 A0          set_y $80,$ff
002486  1  80 28        
002488  1  C4 17                cpy zp7f
00248A  1  08 68 48 C9          tst_stat ~fnz
00248E  1  7D D0 FE 28  
002492  1  88                   dey
002493  1  C4 17                cpy zp7f
002495  1  08 68 48 C9          tst_stat ~fn
002499  1  7F D0 FE 28  
00249D  1  88                   dey
00249E  1  C4 17                cpy zp7f
0024A0  1  08 C0 7E D0          tst_y $7e,~fzc
0024A4  1  FE 68 48 C9  
0024A8  1  FC D0 FE 28  
0024AC  1               
0024AC  1  A9 00 48 A0          set_y $80,0
0024B0  1  80 28        
0024B2  1  CC 1B 02             cpy abs7f
0024B5  1  08 68 48 C9          tst_stat fc
0024B9  1  31 D0 FE 28  
0024BD  1  88                   dey
0024BE  1  CC 1B 02             cpy abs7f
0024C1  1  08 68 48 C9          tst_stat fzc
0024C5  1  33 D0 FE 28  
0024C9  1  88                   dey
0024CA  1  CC 1B 02             cpy abs7f
0024CD  1  08 C0 7E D0          tst_y $7e,fn
0024D1  1  FE 68 48 C9  
0024D5  1  B0 D0 FE 28  
0024D9  1  A9 FF 48 A0          set_y $80,$ff
0024DD  1  80 28        
0024DF  1  CC 1B 02             cpy abs7f
0024E2  1  08 68 48 C9          tst_stat ~fnz
0024E6  1  7D D0 FE 28  
0024EA  1  88                   dey
0024EB  1  CC 1B 02             cpy abs7f
0024EE  1  08 68 48 C9          tst_stat ~fn
0024F2  1  7F D0 FE 28  
0024F6  1  88                   dey
0024F7  1  CC 1B 02             cpy abs7f
0024FA  1  08 C0 7E D0          tst_y $7e,~fzc
0024FE  1  FE 68 48 C9  
002502  1  FC D0 FE 28  
002506  1               
002506  1  A9 00 48 A0          set_y $80,0
00250A  1  80 28        
00250C  1  C0 7F                cpy #$7f
00250E  1  08 68 48 C9          tst_stat fc
002512  1  31 D0 FE 28  
002516  1  88                   dey
002517  1  C0 7F                cpy #$7f
002519  1  08 68 48 C9          tst_stat fzc
00251D  1  33 D0 FE 28  
002521  1  88                   dey
002522  1  C0 7F                cpy #$7f
002524  1  08 C0 7E D0          tst_y $7e,fn
002528  1  FE 68 48 C9  
00252C  1  B0 D0 FE 28  
002530  1  A9 FF 48 A0          set_y $80,$ff
002534  1  80 28        
002536  1  C0 7F                cpy #$7f
002538  1  08 68 48 C9          tst_stat ~fnz
00253C  1  7D D0 FE 28  
002540  1  88                   dey
002541  1  C0 7F                cpy #$7f
002543  1  08 68 48 C9          tst_stat ~fn
002547  1  7F D0 FE 28  
00254B  1  88                   dey
00254C  1  C0 7F                cpy #$7f
00254E  1  08 C0 7E D0          tst_y $7e,~fzc
002552  1  FE 68 48 C9  
002556  1  FC D0 FE 28  
00255A  1  AD 00 02 C9          next_test
00255E  1  1B D0 FE A9  
002562  1  1C 8D 00 02  
0025A2  1               
0025A2  1               ; CMP - zp / abs / #
0025A2  1  A9 00 48 A9          set_a $80,0
0025A6  1  80 28        
0025A8  1  C5 17                cmp zp7f
0025AA  1  08 C9 80 D0          tst_a $80,fc
0025AE  1  FE 68 48 C9  
0025B2  1  31 D0 FE 28  
0025B6  1  A9 00 48 A9          set_a $7f,0
0025BA  1  7F 28        
0025BC  1  C5 17                cmp zp7f
0025BE  1  08 C9 7F D0          tst_a $7f,fzc
0025C2  1  FE 68 48 C9  
0025C6  1  33 D0 FE 28  
0025CA  1  A9 00 48 A9          set_a $7e,0
0025CE  1  7E 28        
0025D0  1  C5 17                cmp zp7f
0025D2  1  08 C9 7E D0          tst_a $7e,fn
0025D6  1  FE 68 48 C9  
0025DA  1  B0 D0 FE 28  
0025DE  1  A9 FF 48 A9          set_a $80,$ff
0025E2  1  80 28        
0025E4  1  C5 17                cmp zp7f
0025E6  1  08 C9 80 D0          tst_a $80,~fnz
0025EA  1  FE 68 48 C9  
0025EE  1  7D D0 FE 28  
0025F2  1  A9 FF 48 A9          set_a $7f,$ff
0025F6  1  7F 28        
0025F8  1  C5 17                cmp zp7f
0025FA  1  08 C9 7F D0          tst_a $7f,~fn
0025FE  1  FE 68 48 C9  
002602  1  7F D0 FE 28  
002606  1  A9 FF 48 A9          set_a $7e,$ff
00260A  1  7E 28        
00260C  1  C5 17                cmp zp7f
00260E  1  08 C9 7E D0          tst_a $7e,~fzc
002612  1  FE 68 48 C9  
002616  1  FC D0 FE 28  
00261A  1               
00261A  1  A9 00 48 A9          set_a $80,0
00261E  1  80 28        
002620  1  CD 1B 02             cmp abs7f
002623  1  08 C9 80 D0          tst_a $80,fc
002627  1  FE 68 48 C9  
00262B  1  31 D0 FE 28  
00262F  1  A9 00 48 A9          set_a $7f,0
002633  1  7F 28        
002635  1  CD 1B 02             cmp abs7f
002638  1  08 C9 7F D0          tst_a $7f,fzc
00263C  1  FE 68 48 C9  
002640  1  33 D0 FE 28  
002644  1  A9 00 48 A9          set_a $7e,0
002648  1  7E 28        
00264A  1  CD 1B 02             cmp abs7f
00264D  1  08 C9 7E D0          tst_a $7e,fn
002651  1  FE 68 48 C9  
002655  1  B0 D0 FE 28  
002659  1  A9 FF 48 A9          set_a $80,$ff
00265D  1  80 28        
00265F  1  CD 1B 02             cmp abs7f
002662  1  08 C9 80 D0          tst_a $80,~fnz
002666  1  FE 68 48 C9  
00266A  1  7D D0 FE 28  
00266E  1  A9 FF 48 A9          set_a $7f,$ff
002672  1  7F 28        
002674  1  CD 1B 02             cmp abs7f
002677  1  08 C9 7F D0          tst_a $7f,~fn
00267B  1  FE 68 48 C9  
00267F  1  7F D0 FE 28  
002683  1  A9 FF 48 A9          set_a $7e,$ff
002687  1  7E 28        
002689  1  CD 1B 02             cmp abs7f
00268C  1  08 C9 7E D0          tst_a $7e,~fzc
002690  1  FE 68 48 C9  
002694  1  FC D0 FE 28  
002698  1               
002698  1  A9 00 48 A9          set_a $80,0
00269C  1  80 28        
00269E  1  C9 7F                cmp #$7f
0026A0  1  08 C9 80 D0          tst_a $80,fc
0026A4  1  FE 68 48 C9  
0026A8  1  31 D0 FE 28  
0026AC  1  A9 00 48 A9          set_a $7f,0
0026B0  1  7F 28        
0026B2  1  C9 7F                cmp #$7f
0026B4  1  08 C9 7F D0          tst_a $7f,fzc
0026B8  1  FE 68 48 C9  
0026BC  1  33 D0 FE 28  
0026C0  1  A9 00 48 A9          set_a $7e,0
0026C4  1  7E 28        
0026C6  1  C9 7F                cmp #$7f
0026C8  1  08 C9 7E D0          tst_a $7e,fn
0026CC  1  FE 68 48 C9  
0026D0  1  B0 D0 FE 28  
0026D4  1  A9 FF 48 A9          set_a $80,$ff
0026D8  1  80 28        
0026DA  1  C9 7F                cmp #$7f
0026DC  1  08 C9 80 D0          tst_a $80,~fnz
0026E0  1  FE 68 48 C9  
0026E4  1  7D D0 FE 28  
0026E8  1  A9 FF 48 A9          set_a $7f,$ff
0026EC  1  7F 28        
0026EE  1  C9 7F                cmp #$7f
0026F0  1  08 C9 7F D0          tst_a $7f,~fn
0026F4  1  FE 68 48 C9  
0026F8  1  7F D0 FE 28  
0026FC  1  A9 FF 48 A9          set_a $7e,$ff
002700  1  7E 28        
002702  1  C9 7F                cmp #$7f
002704  1  08 C9 7E D0          tst_a $7e,~fzc
002708  1  FE 68 48 C9  
00270C  1  FC D0 FE 28  
002710  1               
002710  1  A2 04                ldx #4          ;with indexing by X
002712  1  A9 00 48 A9          set_a $80,0
002716  1  80 28        
002718  1  D5 13                cmp zp1,x
00271A  1  08 C9 80 D0          tst_a $80,fc
00271E  1  FE 68 48 C9  
002722  1  31 D0 FE 28  
002726  1  A9 00 48 A9          set_a $7f,0
00272A  1  7F 28        
00272C  1  D5 13                cmp zp1,x
00272E  1  08 C9 7F D0          tst_a $7f,fzc
002732  1  FE 68 48 C9  
002736  1  33 D0 FE 28  
00273A  1  A9 00 48 A9          set_a $7e,0
00273E  1  7E 28        
002740  1  D5 13                cmp zp1,x
002742  1  08 C9 7E D0          tst_a $7e,fn
002746  1  FE 68 48 C9  
00274A  1  B0 D0 FE 28  
00274E  1  A9 FF 48 A9          set_a $80,$ff
002752  1  80 28        
002754  1  D5 13                cmp zp1,x
002756  1  08 C9 80 D0          tst_a $80,~fnz
00275A  1  FE 68 48 C9  
00275E  1  7D D0 FE 28  
002762  1  A9 FF 48 A9          set_a $7f,$ff
002766  1  7F 28        
002768  1  D5 13                cmp zp1,x
00276A  1  08 C9 7F D0          tst_a $7f,~fn
00276E  1  FE 68 48 C9  
002772  1  7F D0 FE 28  
002776  1  A9 FF 48 A9          set_a $7e,$ff
00277A  1  7E 28        
00277C  1  D5 13                cmp zp1,x
00277E  1  08 C9 7E D0          tst_a $7e,~fzc
002782  1  FE 68 48 C9  
002786  1  FC D0 FE 28  
00278A  1               
00278A  1  A9 00 48 A9          set_a $80,0
00278E  1  80 28        
002790  1  DD 17 02             cmp abs1,x
002793  1  08 C9 80 D0          tst_a $80,fc
002797  1  FE 68 48 C9  
00279B  1  31 D0 FE 28  
00279F  1  A9 00 48 A9          set_a $7f,0
0027A3  1  7F 28        
0027A5  1  DD 17 02             cmp abs1,x
0027A8  1  08 C9 7F D0          tst_a $7f,fzc
0027AC  1  FE 68 48 C9  
0027B0  1  33 D0 FE 28  
0027B4  1  A9 00 48 A9          set_a $7e,0
0027B8  1  7E 28        
0027BA  1  DD 17 02             cmp abs1,x
0027BD  1  08 C9 7E D0          tst_a $7e,fn
0027C1  1  FE 68 48 C9  
0027C5  1  B0 D0 FE 28  
0027C9  1  A9 FF 48 A9          set_a $80,$ff
0027CD  1  80 28        
0027CF  1  DD 17 02             cmp abs1,x
0027D2  1  08 C9 80 D0          tst_a $80,~fnz
0027D6  1  FE 68 48 C9  
0027DA  1  7D D0 FE 28  
0027DE  1  A9 FF 48 A9          set_a $7f,$ff
0027E2  1  7F 28        
0027E4  1  DD 17 02             cmp abs1,x
0027E7  1  08 C9 7F D0          tst_a $7f,~fn
0027EB  1  FE 68 48 C9  
0027EF  1  7F D0 FE 28  
0027F3  1  A9 FF 48 A9          set_a $7e,$ff
0027F7  1  7E 28        
0027F9  1  DD 17 02             cmp abs1,x
0027FC  1  08 C9 7E D0          tst_a $7e,~fzc
002800  1  FE 68 48 C9  
002804  1  FC D0 FE 28  
002808  1               
002808  1  A0 04                ldy #4          ;with indexing by Y
00280A  1  A2 08                ldx #8          ;with indexed indirect
00280C  1  A9 00 48 A9          set_a $80,0
002810  1  80 28        
002812  1  D9 17 02             cmp abs1,y
002815  1  08 C9 80 D0          tst_a $80,fc
002819  1  FE 68 48 C9  
00281D  1  31 D0 FE 28  
002821  1  A9 00 48 A9          set_a $7f,0
002825  1  7F 28        
002827  1  D9 17 02             cmp abs1,y
00282A  1  08 C9 7F D0          tst_a $7f,fzc
00282E  1  FE 68 48 C9  
002832  1  33 D0 FE 28  
002836  1  A9 00 48 A9          set_a $7e,0
00283A  1  7E 28        
00283C  1  D9 17 02             cmp abs1,y
00283F  1  08 C9 7E D0          tst_a $7e,fn
002843  1  FE 68 48 C9  
002847  1  B0 D0 FE 28  
00284B  1  A9 FF 48 A9          set_a $80,$ff
00284F  1  80 28        
002851  1  D9 17 02             cmp abs1,y
002854  1  08 C9 80 D0          tst_a $80,~fnz
002858  1  FE 68 48 C9  
00285C  1  7D D0 FE 28  
002860  1  A9 FF 48 A9          set_a $7f,$ff
002864  1  7F 28        
002866  1  D9 17 02             cmp abs1,y
002869  1  08 C9 7F D0          tst_a $7f,~fn
00286D  1  FE 68 48 C9  
002871  1  7F D0 FE 28  
002875  1  A9 FF 48 A9          set_a $7e,$ff
002879  1  7E 28        
00287B  1  D9 17 02             cmp abs1,y
00287E  1  08 C9 7E D0          tst_a $7e,~fzc
002882  1  FE 68 48 C9  
002886  1  FC D0 FE 28  
00288A  1               
00288A  1  A9 00 48 A9          set_a $80,0
00288E  1  80 28        
002890  1  C1 24                cmp (ind1,x)
002892  1  08 C9 80 D0          tst_a $80,fc
002896  1  FE 68 48 C9  
00289A  1  31 D0 FE 28  
00289E  1  A9 00 48 A9          set_a $7f,0
0028A2  1  7F 28        
0028A4  1  C1 24                cmp (ind1,x)
0028A6  1  08 C9 7F D0          tst_a $7f,fzc
0028AA  1  FE 68 48 C9  
0028AE  1  33 D0 FE 28  
0028B2  1  A9 00 48 A9          set_a $7e,0
0028B6  1  7E 28        
0028B8  1  C1 24                cmp (ind1,x)
0028BA  1  08 C9 7E D0          tst_a $7e,fn
0028BE  1  FE 68 48 C9  
0028C2  1  B0 D0 FE 28  
0028C6  1  A9 FF 48 A9          set_a $80,$ff
0028CA  1  80 28        
0028CC  1  C1 24                cmp (ind1,x)
0028CE  1  08 C9 80 D0          tst_a $80,~fnz
0028D2  1  FE 68 48 C9  
0028D6  1  7D D0 FE 28  
0028DA  1  A9 FF 48 A9          set_a $7f,$ff
0028DE  1  7F 28        
0028E0  1  C1 24                cmp (ind1,x)
0028E2  1  08 C9 7F D0          tst_a $7f,~fn
0028E6  1  FE 68 48 C9  
0028EA  1  7F D0 FE 28  
0028EE  1  A9 FF 48 A9          set_a $7e,$ff
0028F2  1  7E 28        
0028F4  1  C1 24                cmp (ind1,x)
0028F6  1  08 C9 7E D0          tst_a $7e,~fzc
0028FA  1  FE 68 48 C9  
0028FE  1  FC D0 FE 28  
002902  1               
002902  1  A9 00 48 A9          set_a $80,0
002906  1  80 28        
002908  1  D1 24                cmp (ind1),y
00290A  1  08 C9 80 D0          tst_a $80,fc
00290E  1  FE 68 48 C9  
002912  1  31 D0 FE 28  
002916  1  A9 00 48 A9          set_a $7f,0
00291A  1  7F 28        
00291C  1  D1 24                cmp (ind1),y
00291E  1  08 C9 7F D0          tst_a $7f,fzc
002922  1  FE 68 48 C9  
002926  1  33 D0 FE 28  
00292A  1  A9 00 48 A9          set_a $7e,0
00292E  1  7E 28        
002930  1  D1 24                cmp (ind1),y
002932  1  08 C9 7E D0          tst_a $7e,fn
002936  1  FE 68 48 C9  
00293A  1  B0 D0 FE 28  
00293E  1  A9 FF 48 A9          set_a $80,$ff
002942  1  80 28        
002944  1  D1 24                cmp (ind1),y
002946  1  08 C9 80 D0          tst_a $80,~fnz
00294A  1  FE 68 48 C9  
00294E  1  7D D0 FE 28  
002952  1  A9 FF 48 A9          set_a $7f,$ff
002956  1  7F 28        
002958  1  D1 24                cmp (ind1),y
00295A  1  08 C9 7F D0          tst_a $7f,~fn
00295E  1  FE 68 48 C9  
002962  1  7F D0 FE 28  
002966  1  A9 FF 48 A9          set_a $7e,$ff
00296A  1  7E 28        
00296C  1  D1 24                cmp (ind1),y
00296E  1  08 C9 7E D0          tst_a $7e,~fzc
002972  1  FE 68 48 C9  
002976  1  FC D0 FE 28  
00297A  1  AD 00 02 C9          next_test
00297E  1  1C D0 FE A9  
002982  1  1D 8D 00 02  
0029C2  1               
0029C2  1               ; testing shifts - ASL LSR ROL ROR all addressing modes
0029C2  1               ; shifts - accumulator
0029C2  1  A2 03                ldx #3
0029C4  1               tasl:
0029C4  1  A9 00 48 B5          set_ax zp1,0
0029C8  1  13 28        
0029CA  1  0A                   asl a
0029CB  1  08 DD 20 02          tst_ax rASL,fASL,0
0029CF  1  D0 FE 68 49  
0029D3  1  30 DD 30 02  
0029D9  1  CA                   dex
0029DA  1  10 E8                bpl tasl
0029DC  1  A2 03                ldx #3
0029DE  1               tasl1:
0029DE  1  A9 FF 48 B5          set_ax zp1,$ff
0029E2  1  13 28        
0029E4  1  0A                   asl a
0029E5  1  08 DD 20 02          tst_ax rASL,fASL,$ff-fnzc
0029E9  1  D0 FE 68 49  
0029ED  1  7C DD 30 02  
0029F3  1  CA                   dex
0029F4  1  10 E8                bpl tasl1
0029F6  1               
0029F6  1  A2 03                ldx #3
0029F8  1               tlsr:
0029F8  1  A9 00 48 B5          set_ax zp1,0
0029FC  1  13 28        
0029FE  1  4A                   lsr a
0029FF  1  08 DD 28 02          tst_ax rLSR,fLSR,0
002A03  1  D0 FE 68 49  
002A07  1  30 DD 38 02  
002A0D  1  CA                   dex
002A0E  1  10 E8                bpl tlsr
002A10  1  A2 03                ldx #3
002A12  1               tlsr1:
002A12  1  A9 FF 48 B5          set_ax zp1,$ff
002A16  1  13 28        
002A18  1  4A                   lsr a
002A19  1  08 DD 28 02          tst_ax rLSR,fLSR,$ff-fnzc
002A1D  1  D0 FE 68 49  
002A21  1  7C DD 38 02  
002A27  1  CA                   dex
002A28  1  10 E8                bpl tlsr1
002A2A  1               
002A2A  1  A2 03                ldx #3
002A2C  1               trol:
002A2C  1  A9 00 48 B5          set_ax zp1,0
002A30  1  13 28        
002A32  1  2A                   rol a
002A33  1  08 DD 20 02          tst_ax rROL,fROL,0
002A37  1  D0 FE 68 49  
002A3B  1  30 DD 30 02  
002A41  1  CA                   dex
002A42  1  10 E8                bpl trol
002A44  1  A2 03                ldx #3
002A46  1               trol1:
002A46  1  A9 FE 48 B5          set_ax zp1,$ff-fc
002A4A  1  13 28        
002A4C  1  2A                   rol a
002A4D  1  08 DD 20 02          tst_ax rROL,fROL,$ff-fnzc
002A51  1  D0 FE 68 49  
002A55  1  7C DD 30 02  
002A5B  1  CA                   dex
002A5C  1  10 E8                bpl trol1
002A5E  1               
002A5E  1  A2 03                ldx #3
002A60  1               trolc:
002A60  1  A9 01 48 B5          set_ax zp1,fc
002A64  1  13 28        
002A66  1  2A                   rol a
002A67  1  08 DD 24 02          tst_ax rROLc,fROLc,0
002A6B  1  D0 FE 68 49  
002A6F  1  30 DD 34 02  
002A75  1  CA                   dex
002A76  1  10 E8                bpl trolc
002A78  1  A2 03                ldx #3
002A7A  1               trolc1:
002A7A  1  A9 FF 48 B5          set_ax zp1,$ff
002A7E  1  13 28        
002A80  1  2A                   rol a
002A81  1  08 DD 24 02          tst_ax rROLc,fROLc,$ff-fnzc
002A85  1  D0 FE 68 49  
002A89  1  7C DD 34 02  
002A8F  1  CA                   dex
002A90  1  10 E8                bpl trolc1
002A92  1               
002A92  1  A2 03                ldx #3
002A94  1               tror:
002A94  1  A9 00 48 B5          set_ax zp1,0
002A98  1  13 28        
002A9A  1  6A                   ror a
002A9B  1  08 DD 28 02          tst_ax rROR,fROR,0
002A9F  1  D0 FE 68 49  
002AA3  1  30 DD 38 02  
002AA9  1  CA                   dex
002AAA  1  10 E8                bpl tror
002AAC  1  A2 03                ldx #3
002AAE  1               tror1:
002AAE  1  A9 FE 48 B5          set_ax zp1,$ff-fc
002AB2  1  13 28        
002AB4  1  6A                   ror a
002AB5  1  08 DD 28 02          tst_ax rROR,fROR,$ff-fnzc
002AB9  1  D0 FE 68 49  
002ABD  1  7C DD 38 02  
002AC3  1  CA                   dex
002AC4  1  10 E8                bpl tror1
002AC6  1               
002AC6  1  A2 03                ldx #3
002AC8  1               trorc:
002AC8  1  A9 01 48 B5          set_ax zp1,fc
002ACC  1  13 28        
002ACE  1  6A                   ror a
002ACF  1  08 DD 2C 02          tst_ax rRORc,fRORc,0
002AD3  1  D0 FE 68 49  
002AD7  1  30 DD 3C 02  
002ADD  1  CA                   dex
002ADE  1  10 E8                bpl trorc
002AE0  1  A2 03                ldx #3
002AE2  1               trorc1:
002AE2  1  A9 FF 48 B5          set_ax zp1,$ff
002AE6  1  13 28        
002AE8  1  6A                   ror a
002AE9  1  08 DD 2C 02          tst_ax rRORc,fRORc,$ff-fnzc
002AED  1  D0 FE 68 49  
002AF1  1  7C DD 3C 02  
002AF7  1  CA                   dex
002AF8  1  10 E8                bpl trorc1
002AFA  1  AD 00 02 C9          next_test
002AFE  1  1D D0 FE A9  
002B02  1  1E 8D 00 02  
002B42  1               
002B42  1               ; shifts - zeropage
002B42  1  A2 03                ldx #3
002B44  1               tasl2:
002B44  1  A9 00 48 B5          set_z zp1,0
002B48  1  13 85 0C 28  
002B4C  1  06 0C                asl zpt
002B4E  1  08 A5 0C DD          tst_z rASL,fASL,0
002B52  1  20 02 D0 FE  
002B56  1  68 49 30 DD  
002B5E  1  CA                   dex
002B5F  1  10 E3                bpl tasl2
002B61  1  A2 03                ldx #3
002B63  1               tasl3:
002B63  1  A9 FF 48 B5          set_z zp1,$ff
002B67  1  13 85 0C 28  
002B6B  1  06 0C                asl zpt
002B6D  1  08 A5 0C DD          tst_z rASL,fASL,$ff-fnzc
002B71  1  20 02 D0 FE  
002B75  1  68 49 7C DD  
002B7D  1  CA                   dex
002B7E  1  10 E3                bpl tasl3
002B80  1               
002B80  1  A2 03                ldx #3
002B82  1               tlsr2:
002B82  1  A9 00 48 B5          set_z zp1,0
002B86  1  13 85 0C 28  
002B8A  1  46 0C                lsr zpt
002B8C  1  08 A5 0C DD          tst_z rLSR,fLSR,0
002B90  1  28 02 D0 FE  
002B94  1  68 49 30 DD  
002B9C  1  CA                   dex
002B9D  1  10 E3                bpl tlsr2
002B9F  1  A2 03                ldx #3
002BA1  1               tlsr3:
002BA1  1  A9 FF 48 B5          set_z zp1,$ff
002BA5  1  13 85 0C 28  
002BA9  1  46 0C                lsr zpt
002BAB  1  08 A5 0C DD          tst_z rLSR,fLSR,$ff-fnzc
002BAF  1  28 02 D0 FE  
002BB3  1  68 49 7C DD  
002BBB  1  CA                   dex
002BBC  1  10 E3                bpl tlsr3
002BBE  1               
002BBE  1  A2 03                ldx #3
002BC0  1               trol2:
002BC0  1  A9 00 48 B5          set_z zp1,0
002BC4  1  13 85 0C 28  
002BC8  1  26 0C                rol zpt
002BCA  1  08 A5 0C DD          tst_z rROL,fROL,0
002BCE  1  20 02 D0 FE  
002BD2  1  68 49 30 DD  
002BDA  1  CA                   dex
002BDB  1  10 E3                bpl trol2
002BDD  1  A2 03                ldx #3
002BDF  1               trol3:
002BDF  1  A9 FE 48 B5          set_z zp1,$ff-fc
002BE3  1  13 85 0C 28  
002BE7  1  26 0C                rol zpt
002BE9  1  08 A5 0C DD          tst_z rROL,fROL,$ff-fnzc
002BED  1  20 02 D0 FE  
002BF1  1  68 49 7C DD  
002BF9  1  CA                   dex
002BFA  1  10 E3                bpl trol3
002BFC  1               
002BFC  1  A2 03                ldx #3
002BFE  1               trolc2:
002BFE  1  A9 01 48 B5          set_z zp1,fc
002C02  1  13 85 0C 28  
002C06  1  26 0C                rol zpt
002C08  1  08 A5 0C DD          tst_z rROLc,fROLc,0
002C0C  1  24 02 D0 FE  
002C10  1  68 49 30 DD  
002C18  1  CA                   dex
002C19  1  10 E3                bpl trolc2
002C1B  1  A2 03                ldx #3
002C1D  1               trolc3:
002C1D  1  A9 FF 48 B5          set_z zp1,$ff
002C21  1  13 85 0C 28  
002C25  1  26 0C                rol zpt
002C27  1  08 A5 0C DD          tst_z rROLc,fROLc,$ff-fnzc
002C2B  1  24 02 D0 FE  
002C2F  1  68 49 7C DD  
002C37  1  CA                   dex
002C38  1  10 E3                bpl trolc3
002C3A  1               
002C3A  1  A2 03                ldx #3
002C3C  1               tror2:
002C3C  1  A9 00 48 B5          set_z zp1,0
002C40  1  13 85 0C 28  
002C44  1  66 0C                ror zpt
002C46  1  08 A5 0C DD          tst_z rROR,fROR,0
002C4A  1  28 02 D0 FE  
002C4E  1  68 49 30 DD  
002C56  1  CA                   dex
002C57  1  10 E3                bpl tror2
002C59  1  A2 03                ldx #3
002C5B  1               tror3:
002C5B  1  A9 FE 48 B5          set_z zp1,$ff-fc
002C5F  1  13 85 0C 28  
002C63  1  66 0C                ror zpt
002C65  1  08 A5 0C DD          tst_z rROR,fROR,$ff-fnzc
002C69  1  28 02 D0 FE  
002C6D  1  68 49 7C DD  
002C75  1  CA                   dex
002C76  1  10 E3                bpl tror3
002C78  1               
002C78  1  A2 03                ldx #3
002C7A  1               trorc2:
002C7A  1  A9 01 48 B5          set_z zp1,fc
002C7E  1  13 85 0C 28  
002C82  1  66 0C                ror zpt
002C84  1  08 A5 0C DD          tst_z rRORc,fRORc,0
002C88  1  2C 02 D0 FE  
002C8C  1  68 49 30 DD  
002C94  1  CA                   dex
002C95  1  10 E3                bpl trorc2
002C97  1  A2 03                ldx #3
002C99  1               trorc3:
002C99  1  A9 FF 48 B5          set_z zp1,$ff
002C9D  1  13 85 0C 28  
002CA1  1  66 0C                ror zpt
002CA3  1  08 A5 0C DD          tst_z rRORc,fRORc,$ff-fnzc
002CA7  1  2C 02 D0 FE  
002CAB  1  68 49 7C DD  
002CB3  1  CA                   dex
002CB4  1  10 E3                bpl trorc3
002CB6  1  AD 00 02 C9          next_test
002CBA  1  1E D0 FE A9  
002CBE  1  1F 8D 00 02  
002CFE  1               
002CFE  1               ; shifts - absolute
002CFE  1  A2 03                ldx #3
002D00  1               tasl4:
002D00  1  A9 00 48 B5          set_abs zp1,0
002D04  1  13 8D 03 02  
002D08  1  28           
002D09  1  0E 03 02             asl abst
002D0C  1  08 AD 03 02          tst_abs rASL,fASL,0
002D10  1  DD 20 02 D0  
002D14  1  FE 68 49 30  
002D1D  1  CA                   dex
002D1E  1  10 E0                bpl tasl4
002D20  1  A2 03                ldx #3
002D22  1               tasl5:
002D22  1  A9 FF 48 B5          set_abs zp1,$ff
002D26  1  13 8D 03 02  
002D2A  1  28           
002D2B  1  0E 03 02             asl abst
002D2E  1  08 AD 03 02          tst_abs rASL,fASL,$ff-fnzc
002D32  1  DD 20 02 D0  
002D36  1  FE 68 49 7C  
002D3F  1  CA                   dex
002D40  1  10 E0                bpl tasl5
002D42  1               
002D42  1  A2 03                ldx #3
002D44  1               tlsr4:
002D44  1  A9 00 48 B5          set_abs zp1,0
002D48  1  13 8D 03 02  
002D4C  1  28           
002D4D  1  4E 03 02             lsr abst
002D50  1  08 AD 03 02          tst_abs rLSR,fLSR,0
002D54  1  DD 28 02 D0  
002D58  1  FE 68 49 30  
002D61  1  CA                   dex
002D62  1  10 E0                bpl tlsr4
002D64  1  A2 03                ldx #3
002D66  1               tlsr5:
002D66  1  A9 FF 48 B5          set_abs zp1,$ff
002D6A  1  13 8D 03 02  
002D6E  1  28           
002D6F  1  4E 03 02             lsr abst
002D72  1  08 AD 03 02          tst_abs rLSR,fLSR,$ff-fnzc
002D76  1  DD 28 02 D0  
002D7A  1  FE 68 49 7C  
002D83  1  CA                   dex
002D84  1  10 E0                bpl tlsr5
002D86  1               
002D86  1  A2 03                ldx #3
002D88  1               trol4:
002D88  1  A9 00 48 B5          set_abs zp1,0
002D8C  1  13 8D 03 02  
002D90  1  28           
002D91  1  2E 03 02             rol abst
002D94  1  08 AD 03 02          tst_abs rROL,fROL,0
002D98  1  DD 20 02 D0  
002D9C  1  FE 68 49 30  
002DA5  1  CA                   dex
002DA6  1  10 E0                bpl trol4
002DA8  1  A2 03                ldx #3
002DAA  1               trol5:
002DAA  1  A9 FE 48 B5          set_abs zp1,$ff-fc
002DAE  1  13 8D 03 02  
002DB2  1  28           
002DB3  1  2E 03 02             rol abst
002DB6  1  08 AD 03 02          tst_abs rROL,fROL,$ff-fnzc
002DBA  1  DD 20 02 D0  
002DBE  1  FE 68 49 7C  
002DC7  1  CA                   dex
002DC8  1  10 E0                bpl trol5
002DCA  1               
002DCA  1  A2 03                ldx #3
002DCC  1               trolc4:
002DCC  1  A9 01 48 B5          set_abs zp1,fc
002DD0  1  13 8D 03 02  
002DD4  1  28           
002DD5  1  2E 03 02             rol abst
002DD8  1  08 AD 03 02          tst_abs rROLc,fROLc,0
002DDC  1  DD 24 02 D0  
002DE0  1  FE 68 49 30  
002DE9  1  CA                   dex
002DEA  1  10 E0                bpl trolc4
002DEC  1  A2 03                ldx #3
002DEE  1               trolc5:
002DEE  1  A9 FF 48 B5          set_abs zp1,$ff
002DF2  1  13 8D 03 02  
002DF6  1  28           
002DF7  1  2E 03 02             rol abst
002DFA  1  08 AD 03 02          tst_abs rROLc,fROLc,$ff-fnzc
002DFE  1  DD 24 02 D0  
002E02  1  FE 68 49 7C  
002E0B  1  CA                   dex
002E0C  1  10 E0                bpl trolc5
002E0E  1               
002E0E  1  A2 03                ldx #3
002E10  1               tror4:
002E10  1  A9 00 48 B5          set_abs zp1,0
002E14  1  13 8D 03 02  
002E18  1  28           
002E19  1  6E 03 02             ror abst
002E1C  1  08 AD 03 02          tst_abs rROR,fROR,0
002E20  1  DD 28 02 D0  
002E24  1  FE 68 49 30  
002E2D  1  CA                   dex
002E2E  1  10 E0                bpl tror4
002E30  1  A2 03                ldx #3
002E32  1               tror5:
002E32  1  A9 FE 48 B5          set_abs zp1,$ff-fc
002E36  1  13 8D 03 02  
002E3A  1  28           
002E3B  1  6E 03 02             ror abst
002E3E  1  08 AD 03 02          tst_abs rROR,fROR,$ff-fnzc
002E42  1  DD 28 02 D0  
002E46  1  FE 68 49 7C  
002E4F  1  CA                   dex
002E50  1  10 E0                bpl tror5
002E52  1               
002E52  1  A2 03                ldx #3
002E54  1               trorc4:
002E54  1  A9 01 48 B5          set_abs zp1,fc
002E58  1  13 8D 03 02  
002E5C  1  28           
002E5D  1  6E 03 02             ror abst
002E60  1  08 AD 03 02          tst_abs rRORc,fRORc,0
002E64  1  DD 2C 02 D0  
002E68  1  FE 68 49 30  
002E71  1  CA                   dex
002E72  1  10 E0                bpl trorc4
002E74  1  A2 03                ldx #3
002E76  1               trorc5:
002E76  1  A9 FF 48 B5          set_abs zp1,$ff
002E7A  1  13 8D 03 02  
002E7E  1  28           
002E7F  1  6E 03 02             ror abst
002E82  1  08 AD 03 02          tst_abs rRORc,fRORc,$ff-fnzc
002E86  1  DD 2C 02 D0  
002E8A  1  FE 68 49 7C  
002E93  1  CA                   dex
002E94  1  10 E0                bpl trorc5
002E96  1  AD 00 02 C9          next_test
002E9A  1  1F D0 FE A9  
002E9E  1  20 8D 00 02  
002EDE  1               
002EDE  1               ; shifts - zp indexed
002EDE  1  A2 03                ldx #3
002EE0  1               tasl6:
002EE0  1  A9 00 48 B5          set_zx zp1,0
002EE4  1  13 95 0C 28  
002EE8  1  16 0C                asl zpt,x
002EEA  1  08 B5 0C DD          tst_zx rASL,fASL,0
002EEE  1  20 02 D0 FE  
002EF2  1  68 49 30 DD  
002EFA  1  CA                   dex
002EFB  1  10 E3                bpl tasl6
002EFD  1  A2 03                ldx #3
002EFF  1               tasl7:
002EFF  1  A9 FF 48 B5          set_zx zp1,$ff
002F03  1  13 95 0C 28  
002F07  1  16 0C                asl zpt,x
002F09  1  08 B5 0C DD          tst_zx rASL,fASL,$ff-fnzc
002F0D  1  20 02 D0 FE  
002F11  1  68 49 7C DD  
002F19  1  CA                   dex
002F1A  1  10 E3                bpl tasl7
002F1C  1               
002F1C  1  A2 03                ldx #3
002F1E  1               tlsr6:
002F1E  1  A9 00 48 B5          set_zx zp1,0
002F22  1  13 95 0C 28  
002F26  1  56 0C                lsr zpt,x
002F28  1  08 B5 0C DD          tst_zx rLSR,fLSR,0
002F2C  1  28 02 D0 FE  
002F30  1  68 49 30 DD  
002F38  1  CA                   dex
002F39  1  10 E3                bpl tlsr6
002F3B  1  A2 03                ldx #3
002F3D  1               tlsr7:
002F3D  1  A9 FF 48 B5          set_zx zp1,$ff
002F41  1  13 95 0C 28  
002F45  1  56 0C                lsr zpt,x
002F47  1  08 B5 0C DD          tst_zx rLSR,fLSR,$ff-fnzc
002F4B  1  28 02 D0 FE  
002F4F  1  68 49 7C DD  
002F57  1  CA                   dex
002F58  1  10 E3                bpl tlsr7
002F5A  1               
002F5A  1  A2 03                ldx #3
002F5C  1               trol6:
002F5C  1  A9 00 48 B5          set_zx zp1,0
002F60  1  13 95 0C 28  
002F64  1  36 0C                rol zpt,x
002F66  1  08 B5 0C DD          tst_zx rROL,fROL,0
002F6A  1  20 02 D0 FE  
002F6E  1  68 49 30 DD  
002F76  1  CA                   dex
002F77  1  10 E3                bpl trol6
002F79  1  A2 03                ldx #3
002F7B  1               trol7:
002F7B  1  A9 FE 48 B5          set_zx zp1,$ff-fc
002F7F  1  13 95 0C 28  
002F83  1  36 0C                rol zpt,x
002F85  1  08 B5 0C DD          tst_zx rROL,fROL,$ff-fnzc
002F89  1  20 02 D0 FE  
002F8D  1  68 49 7C DD  
002F95  1  CA                   dex
002F96  1  10 E3                bpl trol7
002F98  1               
002F98  1  A2 03                ldx #3
002F9A  1               trolc6:
002F9A  1  A9 01 48 B5          set_zx zp1,fc
002F9E  1  13 95 0C 28  
002FA2  1  36 0C                rol zpt,x
002FA4  1  08 B5 0C DD          tst_zx rROLc,fROLc,0
002FA8  1  24 02 D0 FE  
002FAC  1  68 49 30 DD  
002FB4  1  CA                   dex
002FB5  1  10 E3                bpl trolc6
002FB7  1  A2 03                ldx #3
002FB9  1               trolc7:
002FB9  1  A9 FF 48 B5          set_zx zp1,$ff
002FBD  1  13 95 0C 28  
002FC1  1  36 0C                rol zpt,x
002FC3  1  08 B5 0C DD          tst_zx rROLc,fROLc,$ff-fnzc
002FC7  1  24 02 D0 FE  
002FCB  1  68 49 7C DD  
002FD3  1  CA                   dex
002FD4  1  10 E3                bpl trolc7
002FD6  1               
002FD6  1  A2 03                ldx #3
002FD8  1               tror6:
002FD8  1  A9 00 48 B5          set_zx zp1,0
002FDC  1  13 95 0C 28  
002FE0  1  76 0C                ror zpt,x
002FE2  1  08 B5 0C DD          tst_zx rROR,fROR,0
002FE6  1  28 02 D0 FE  
002FEA  1  68 49 30 DD  
002FF2  1  CA                   dex
002FF3  1  10 E3                bpl tror6
002FF5  1  A2 03                ldx #3
002FF7  1               tror7:
002FF7  1  A9 FE 48 B5          set_zx zp1,$ff-fc
002FFB  1  13 95 0C 28  
002FFF  1  76 0C                ror zpt,x
003001  1  08 B5 0C DD          tst_zx rROR,fROR,$ff-fnzc
003005  1  28 02 D0 FE  
003009  1  68 49 7C DD  
003011  1  CA                   dex
003012  1  10 E3                bpl tror7
003014  1               
003014  1  A2 03                ldx #3
003016  1               trorc6:
003016  1  A9 01 48 B5          set_zx zp1,fc
00301A  1  13 95 0C 28  
00301E  1  76 0C                ror zpt,x
003020  1  08 B5 0C DD          tst_zx rRORc,fRORc,0
003024  1  2C 02 D0 FE  
003028  1  68 49 30 DD  
003030  1  CA                   dex
003031  1  10 E3                bpl trorc6
003033  1  A2 03                ldx #3
003035  1               trorc7:
003035  1  A9 FF 48 B5          set_zx zp1,$ff
003039  1  13 95 0C 28  
00303D  1  76 0C                ror zpt,x
00303F  1  08 B5 0C DD          tst_zx rRORc,fRORc,$ff-fnzc
003043  1  2C 02 D0 FE  
003047  1  68 49 7C DD  
00304F  1  CA                   dex
003050  1  10 E3                bpl trorc7
003052  1  AD 00 02 C9          next_test
003056  1  20 D0 FE A9  
00305A  1  21 8D 00 02  
00309A  1               
00309A  1               ; shifts - abs indexed
00309A  1  A2 03                ldx #3
00309C  1               tasl8:
00309C  1  A9 00 48 B5          set_absx zp1,0
0030A0  1  13 9D 03 02  
0030A4  1  28           
0030A5  1  1E 03 02             asl abst,x
0030A8  1  08 BD 03 02          tst_absx rASL,fASL,0
0030AC  1  DD 20 02 D0  
0030B0  1  FE 68 49 30  
0030B9  1  CA                   dex
0030BA  1  10 E0                bpl tasl8
0030BC  1  A2 03                ldx #3
0030BE  1               tasl9:
0030BE  1  A9 FF 48 B5          set_absx zp1,$ff
0030C2  1  13 9D 03 02  
0030C6  1  28           
0030C7  1  1E 03 02             asl abst,x
0030CA  1  08 BD 03 02          tst_absx rASL,fASL,$ff-fnzc
0030CE  1  DD 20 02 D0  
0030D2  1  FE 68 49 7C  
0030DB  1  CA                   dex
0030DC  1  10 E0                bpl tasl9
0030DE  1               
0030DE  1  A2 03                ldx #3
0030E0  1               tlsr8:
0030E0  1  A9 00 48 B5          set_absx zp1,0
0030E4  1  13 9D 03 02  
0030E8  1  28           
0030E9  1  5E 03 02             lsr abst,x
0030EC  1  08 BD 03 02          tst_absx rLSR,fLSR,0
0030F0  1  DD 28 02 D0  
0030F4  1  FE 68 49 30  
0030FD  1  CA                   dex
0030FE  1  10 E0                bpl tlsr8
003100  1  A2 03                ldx #3
003102  1               tlsr9:
003102  1  A9 FF 48 B5          set_absx zp1,$ff
003106  1  13 9D 03 02  
00310A  1  28           
00310B  1  5E 03 02             lsr abst,x
00310E  1  08 BD 03 02          tst_absx rLSR,fLSR,$ff-fnzc
003112  1  DD 28 02 D0  
003116  1  FE 68 49 7C  
00311F  1  CA                   dex
003120  1  10 E0                bpl tlsr9
003122  1               
003122  1  A2 03                ldx #3
003124  1               trol8:
003124  1  A9 00 48 B5          set_absx zp1,0
003128  1  13 9D 03 02  
00312C  1  28           
00312D  1  3E 03 02             rol abst,x
003130  1  08 BD 03 02          tst_absx rROL,fROL,0
003134  1  DD 20 02 D0  
003138  1  FE 68 49 30  
003141  1  CA                   dex
003142  1  10 E0                bpl trol8
003144  1  A2 03                ldx #3
003146  1               trol9:
003146  1  A9 FE 48 B5          set_absx zp1,$ff-fc
00314A  1  13 9D 03 02  
00314E  1  28           
00314F  1  3E 03 02             rol abst,x
003152  1  08 BD 03 02          tst_absx rROL,fROL,$ff-fnzc
003156  1  DD 20 02 D0  
00315A  1  FE 68 49 7C  
003163  1  CA                   dex
003164  1  10 E0                bpl trol9
003166  1               
003166  1  A2 03                ldx #3
003168  1               trolc8:
003168  1  A9 01 48 B5          set_absx zp1,fc
00316C  1  13 9D 03 02  
003170  1  28           
003171  1  3E 03 02             rol abst,x
003174  1  08 BD 03 02          tst_absx rROLc,fROLc,0
003178  1  DD 24 02 D0  
00317C  1  FE 68 49 30  
003185  1  CA                   dex
003186  1  10 E0                bpl trolc8
003188  1  A2 03                ldx #3
00318A  1               trolc9:
00318A  1  A9 FF 48 B5          set_absx zp1,$ff
00318E  1  13 9D 03 02  
003192  1  28           
003193  1  3E 03 02             rol abst,x
003196  1  08 BD 03 02          tst_absx rROLc,fROLc,$ff-fnzc
00319A  1  DD 24 02 D0  
00319E  1  FE 68 49 7C  
0031A7  1  CA                   dex
0031A8  1  10 E0                bpl trolc9
0031AA  1               
0031AA  1  A2 03                ldx #3
0031AC  1               tror8:
0031AC  1  A9 00 48 B5          set_absx zp1,0
0031B0  1  13 9D 03 02  
0031B4  1  28           
0031B5  1  7E 03 02             ror abst,x
0031B8  1  08 BD 03 02          tst_absx rROR,fROR,0
0031BC  1  DD 28 02 D0  
0031C0  1  FE 68 49 30  
0031C9  1  CA                   dex
0031CA  1  10 E0                bpl tror8
0031CC  1  A2 03                ldx #3
0031CE  1               tror9:
0031CE  1  A9 FE 48 B5          set_absx zp1,$ff-fc
0031D2  1  13 9D 03 02  
0031D6  1  28           
0031D7  1  7E 03 02             ror abst,x
0031DA  1  08 BD 03 02          tst_absx rROR,fROR,$ff-fnzc
0031DE  1  DD 28 02 D0  
0031E2  1  FE 68 49 7C  
0031EB  1  CA                   dex
0031EC  1  10 E0                bpl tror9
0031EE  1               
0031EE  1  A2 03                ldx #3
0031F0  1               trorc8:
0031F0  1  A9 01 48 B5          set_absx zp1,fc
0031F4  1  13 9D 03 02  
0031F8  1  28           
0031F9  1  7E 03 02             ror abst,x
0031FC  1  08 BD 03 02          tst_absx rRORc,fRORc,0
003200  1  DD 2C 02 D0  
003204  1  FE 68 49 30  
00320D  1  CA                   dex
00320E  1  10 E0                bpl trorc8
003210  1  A2 03                ldx #3
003212  1               trorc9:
003212  1  A9 FF 48 B5          set_absx zp1,$ff
003216  1  13 9D 03 02  
00321A  1  28           
00321B  1  7E 03 02             ror abst,x
00321E  1  08 BD 03 02          tst_absx rRORc,fRORc,$ff-fnzc
003222  1  DD 2C 02 D0  
003226  1  FE 68 49 7C  
00322F  1  CA                   dex
003230  1  10 E0                bpl trorc9
003232  1  AD 00 02 C9          next_test
003236  1  21 D0 FE A9  
00323A  1  22 8D 00 02  
00327A  1               
00327A  1               ; testing memory increment/decrement - INC DEC all addressing modes
00327A  1               ; zeropage
00327A  1  A2 00                ldx #0
00327C  1  A9 7E                lda #$7e
00327E  1  85 0C                sta zpt
003280  1               tinc:
003280  1  A9 00 48 28          set_stat 0
003284  1  E6 0C                inc zpt
003286  1  08 A5 0C DD          tst_z rINC,fINC,0
00328A  1  40 02 D0 FE  
00328E  1  68 49 30 DD  
003296  1  E8                   inx
003297  1  E0 02                cpx #2
003299  1  D0 04                bne tinc1
00329B  1  A9 FE                lda #$fe
00329D  1  85 0C                sta zpt
00329F  1  E0 05        tinc1:  cpx #5
0032A1  1  D0 DD                bne tinc
0032A3  1  CA                   dex
0032A4  1  E6 0C                inc zpt
0032A6  1               tdec:
0032A6  1  A9 00 48 28          set_stat 0
0032AA  1  C6 0C                dec zpt
0032AC  1  08 A5 0C DD          tst_z rINC,fINC,0
0032B0  1  40 02 D0 FE  
0032B4  1  68 49 30 DD  
0032BC  1  CA                   dex
0032BD  1  30 0A                bmi tdec1
0032BF  1  E0 01                cpx #1
0032C1  1  D0 E3                bne tdec
0032C3  1  A9 81                lda #$81
0032C5  1  85 0C                sta zpt
0032C7  1  D0 DD                bne tdec
0032C9  1               tdec1:
0032C9  1  A2 00                ldx #0
0032CB  1  A9 7E                lda #$7e
0032CD  1  85 0C                sta zpt
0032CF  1               tinc10:
0032CF  1  A9 FF 48 28          set_stat $ff
0032D3  1  E6 0C                inc zpt
0032D5  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
0032D9  1  40 02 D0 FE  
0032DD  1  68 49 7D DD  
0032E5  1  E8                   inx
0032E6  1  E0 02                cpx #2
0032E8  1  D0 04                bne tinc11
0032EA  1  A9 FE                lda #$fe
0032EC  1  85 0C                sta zpt
0032EE  1  E0 05        tinc11: cpx #5
0032F0  1  D0 DD                bne tinc10
0032F2  1  CA                   dex
0032F3  1  E6 0C                inc zpt
0032F5  1               tdec10:
0032F5  1  A9 FF 48 28          set_stat $ff
0032F9  1  C6 0C                dec zpt
0032FB  1  08 A5 0C DD          tst_z rINC,fINC,$ff-fnz
0032FF  1  40 02 D0 FE  
003303  1  68 49 7D DD  
00330B  1  CA                   dex
00330C  1  30 0A                bmi tdec11
00330E  1  E0 01                cpx #1
003310  1  D0 E3                bne tdec10
003312  1  A9 81                lda #$81
003314  1  85 0C                sta zpt
003316  1  D0 DD                bne tdec10
003318  1               tdec11:
003318  1  AD 00 02 C9          next_test
00331C  1  22 D0 FE A9  
003320  1  23 8D 00 02  
003360  1               
003360  1               ; absolute memory
003360  1  A2 00                ldx #0
003362  1  A9 7E                lda #$7e
003364  1  8D 03 02             sta abst
003367  1               tinc2:
003367  1  A9 00 48 28          set_stat 0
00336B  1  EE 03 02             inc abst
00336E  1  08 AD 03 02          tst_abs rINC,fINC,0
003372  1  DD 40 02 D0  
003376  1  FE 68 49 30  
00337F  1  E8                   inx
003380  1  E0 02                cpx #2
003382  1  D0 05                bne tinc3
003384  1  A9 FE                lda #$fe
003386  1  8D 03 02             sta abst
003389  1  E0 05        tinc3:  cpx #5
00338B  1  D0 DA                bne tinc2
00338D  1  CA                   dex
00338E  1  EE 03 02             inc abst
003391  1               tdec2:
003391  1  A9 00 48 28          set_stat 0
003395  1  CE 03 02             dec abst
003398  1  08 AD 03 02          tst_abs rINC,fINC,0
00339C  1  DD 40 02 D0  
0033A0  1  FE 68 49 30  
0033A9  1  CA                   dex
0033AA  1  30 0B                bmi tdec3
0033AC  1  E0 01                cpx #1
0033AE  1  D0 E1                bne tdec2
0033B0  1  A9 81                lda #$81
0033B2  1  8D 03 02             sta abst
0033B5  1  D0 DA                bne tdec2
0033B7  1               tdec3:
0033B7  1  A2 00                ldx #0
0033B9  1  A9 7E                lda #$7e
0033BB  1  8D 03 02             sta abst
0033BE  1               tinc12:
0033BE  1  A9 FF 48 28          set_stat $ff
0033C2  1  EE 03 02             inc abst
0033C5  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
0033C9  1  DD 40 02 D0  
0033CD  1  FE 68 49 7D  
0033D6  1  E8                   inx
0033D7  1  E0 02                cpx #2
0033D9  1  D0 05                bne tinc13
0033DB  1  A9 FE                lda #$fe
0033DD  1  8D 03 02             sta abst
0033E0  1  E0 05        tinc13:  cpx #5
0033E2  1  D0 DA                bne tinc12
0033E4  1  CA                   dex
0033E5  1  EE 03 02             inc abst
0033E8  1               tdec12:
0033E8  1  A9 FF 48 28          set_stat $ff
0033EC  1  CE 03 02             dec abst
0033EF  1  08 AD 03 02          tst_abs rINC,fINC,$ff-fnz
0033F3  1  DD 40 02 D0  
0033F7  1  FE 68 49 7D  
003400  1  CA                   dex
003401  1  30 0B                bmi tdec13
003403  1  E0 01                cpx #1
003405  1  D0 E1                bne tdec12
003407  1  A9 81                lda #$81
003409  1  8D 03 02             sta abst
00340C  1  D0 DA                bne tdec12
00340E  1               tdec13:
00340E  1  AD 00 02 C9          next_test
003412  1  23 D0 FE A9  
003416  1  24 8D 00 02  
003456  1               
003456  1               ; zeropage indexed
003456  1  A2 00                ldx #0
003458  1  A9 7E                lda #$7e
00345A  1  95 0C        tinc4:  sta zpt,x
00345C  1  A9 00 48 28          set_stat 0
003460  1  F6 0C                inc zpt,x
003462  1  08 B5 0C DD          tst_zx rINC,fINC,0
003466  1  40 02 D0 FE  
00346A  1  68 49 30 DD  
003472  1  B5 0C                lda zpt,x
003474  1  E8                   inx
003475  1  E0 02                cpx #2
003477  1  D0 02                bne tinc5
003479  1  A9 FE                lda #$fe
00347B  1  E0 05        tinc5:  cpx #5
00347D  1  D0 DB                bne tinc4
00347F  1  CA                   dex
003480  1  A9 02                lda #2
003482  1  95 0C        tdec4:  sta zpt,x
003484  1  A9 00 48 28          set_stat 0
003488  1  D6 0C                dec zpt,x
00348A  1  08 B5 0C DD          tst_zx rINC,fINC,0
00348E  1  40 02 D0 FE  
003492  1  68 49 30 DD  
00349A  1  B5 0C                lda zpt,x
00349C  1  CA                   dex
00349D  1  30 08                bmi tdec5
00349F  1  E0 01                cpx #1
0034A1  1  D0 DF                bne tdec4
0034A3  1  A9 81                lda #$81
0034A5  1  D0 DB                bne tdec4
0034A7  1               tdec5:
0034A7  1  A2 00                ldx #0
0034A9  1  A9 7E                lda #$7e
0034AB  1  95 0C        tinc14: sta zpt,x
0034AD  1  A9 FF 48 28          set_stat $ff
0034B1  1  F6 0C                inc zpt,x
0034B3  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
0034B7  1  40 02 D0 FE  
0034BB  1  68 49 7D DD  
0034C3  1  B5 0C                lda zpt,x
0034C5  1  E8                   inx
0034C6  1  E0 02                cpx #2
0034C8  1  D0 02                bne tinc15
0034CA  1  A9 FE                lda #$fe
0034CC  1  E0 05        tinc15: cpx #5
0034CE  1  D0 DB                bne tinc14
0034D0  1  CA                   dex
0034D1  1  A9 02                lda #2
0034D3  1  95 0C        tdec14: sta zpt,x
0034D5  1  A9 FF 48 28          set_stat $ff
0034D9  1  D6 0C                dec zpt,x
0034DB  1  08 B5 0C DD          tst_zx rINC,fINC,$ff-fnz
0034DF  1  40 02 D0 FE  
0034E3  1  68 49 7D DD  
0034EB  1  B5 0C                lda zpt,x
0034ED  1  CA                   dex
0034EE  1  30 08                bmi tdec15
0034F0  1  E0 01                cpx #1
0034F2  1  D0 DF                bne tdec14
0034F4  1  A9 81                lda #$81
0034F6  1  D0 DB                bne tdec14
0034F8  1               tdec15:
0034F8  1  AD 00 02 C9          next_test
0034FC  1  24 D0 FE A9  
003500  1  25 8D 00 02  
003540  1               
003540  1               ; memory indexed
003540  1  A2 00                ldx #0
003542  1  A9 7E                lda #$7e
003544  1  9D 03 02     tinc6:  sta abst,x
003547  1  A9 00 48 28          set_stat 0
00354B  1  FE 03 02             inc abst,x
00354E  1  08 BD 03 02          tst_absx rINC,fINC,0
003552  1  DD 40 02 D0  
003556  1  FE 68 49 30  
00355F  1  BD 03 02             lda abst,x
003562  1  E8                   inx
003563  1  E0 02                cpx #2
003565  1  D0 02                bne tinc7
003567  1  A9 FE                lda #$fe
003569  1  E0 05        tinc7:  cpx #5
00356B  1  D0 D7                bne tinc6
00356D  1  CA                   dex
00356E  1  A9 02                lda #2
003570  1  9D 03 02     tdec6:  sta abst,x
003573  1  A9 00 48 28          set_stat 0
003577  1  DE 03 02             dec abst,x
00357A  1  08 BD 03 02          tst_absx rINC,fINC,0
00357E  1  DD 40 02 D0  
003582  1  FE 68 49 30  
00358B  1  BD 03 02             lda abst,x
00358E  1  CA                   dex
00358F  1  30 08                bmi tdec7
003591  1  E0 01                cpx #1
003593  1  D0 DB                bne tdec6
003595  1  A9 81                lda #$81
003597  1  D0 D7                bne tdec6
003599  1               tdec7:
003599  1  A2 00                ldx #0
00359B  1  A9 7E                lda #$7e
00359D  1  9D 03 02     tinc16: sta abst,x
0035A0  1  A9 FF 48 28          set_stat $ff
0035A4  1  FE 03 02             inc abst,x
0035A7  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
0035AB  1  DD 40 02 D0  
0035AF  1  FE 68 49 7D  
0035B8  1  BD 03 02             lda abst,x
0035BB  1  E8                   inx
0035BC  1  E0 02                cpx #2
0035BE  1  D0 02                bne tinc17
0035C0  1  A9 FE                lda #$fe
0035C2  1  E0 05        tinc17: cpx #5
0035C4  1  D0 D7                bne tinc16
0035C6  1  CA                   dex
0035C7  1  A9 02                lda #2
0035C9  1  9D 03 02     tdec16: sta abst,x
0035CC  1  A9 FF 48 28          set_stat $ff
0035D0  1  DE 03 02             dec abst,x
0035D3  1  08 BD 03 02          tst_absx rINC,fINC,$ff-fnz
0035D7  1  DD 40 02 D0  
0035DB  1  FE 68 49 7D  
0035E4  1  BD 03 02             lda abst,x
0035E7  1  CA                   dex
0035E8  1  30 08                bmi tdec17
0035EA  1  E0 01                cpx #1
0035EC  1  D0 DB                bne tdec16
0035EE  1  A9 81                lda #$81
0035F0  1  D0 D7                bne tdec16
0035F2  1               tdec17:
0035F2  1  AD 00 02 C9          next_test
0035F6  1  25 D0 FE A9  
0035FA  1  26 8D 00 02  
00363A  1               
00363A  1               ; testing logical instructions - AND EOR ORA all addressing modes
00363A  1               ; AND
00363A  1  A2 03                ldx #3          ;immediate
00363C  1  B5 1C        tand:   lda zpAN,x
00363E  1  8D 09 02             sta ex_andi+1   ;set AND # operand
003641  1  A9 00 48 BD          set_ax  absANa,0
003645  1  5A 02 28     
003648  1  20 08 02             jsr ex_andi     ;execute AND # in RAM
00364B  1  08 DD 62 02          tst_ax  absrlo,absflo,0
00364F  1  D0 FE 68 49  
003653  1  30 DD 66 02  
003659  1  CA                   dex
00365A  1  10 E0                bpl tand
00365C  1  A2 03                ldx #3
00365E  1  B5 1C        tand1:  lda zpAN,x
003660  1  8D 09 02             sta ex_andi+1   ;set AND # operand
003663  1  A9 FF 48 BD          set_ax  absANa,$ff
003667  1  5A 02 28     
00366A  1  20 08 02             jsr ex_andi     ;execute AND # in RAM
00366D  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003671  1  D0 FE 68 49  
003675  1  7D DD 66 02  
00367B  1  CA                   dex
00367C  1  10 E0                bpl tand1
00367E  1               
00367E  1  A2 03                ldx #3      ;zp
003680  1  B5 1C        tand2:  lda zpAN,x
003682  1  85 0C                sta zpt
003684  1  A9 00 48 BD          set_ax  absANa,0
003688  1  5A 02 28     
00368B  1  25 0C                and zpt
00368D  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003691  1  D0 FE 68 49  
003695  1  30 DD 66 02  
00369B  1  CA                   dex
00369C  1  10 E2                bpl tand2
00369E  1  A2 03                ldx #3
0036A0  1  B5 1C        tand3:  lda zpAN,x
0036A2  1  85 0C                sta zpt
0036A4  1  A9 FF 48 BD          set_ax  absANa,$ff
0036A8  1  5A 02 28     
0036AB  1  25 0C                and zpt
0036AD  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0036B1  1  D0 FE 68 49  
0036B5  1  7D DD 66 02  
0036BB  1  CA                   dex
0036BC  1  10 E2                bpl tand3
0036BE  1               
0036BE  1  A2 03                ldx #3      ;abs
0036C0  1  B5 1C        tand4:  lda zpAN,x
0036C2  1  8D 03 02             sta abst
0036C5  1  A9 00 48 BD          set_ax  absANa,0
0036C9  1  5A 02 28     
0036CC  1  2D 03 02             and abst
0036CF  1  08 DD 62 02          tst_ax  absrlo,absflo,0
0036D3  1  D0 FE 68 49  
0036D7  1  30 DD 66 02  
0036DD  1  CA                   dex
0036DE  1  10 E0                bpl tand4
0036E0  1  A2 03                ldx #3
0036E2  1  B5 1C        tand5:  lda zpAN,x
0036E4  1  8D 03 02             sta abst
0036E7  1  A9 FF 48 BD          set_ax  absANa,$ff
0036EB  1  5A 02 28     
0036EE  1  2D 03 02             and abst
0036F1  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0036F5  1  D0 FE 68 49  
0036F9  1  7D DD 66 02  
0036FF  1  CA                   dex
003700  1  10 02                bpl tand6
003702  1               
003702  1  A2 03                ldx #3      ;zp,x
003704  1               tand6:
003704  1  A9 00 48 BD          set_ax  absANa,0
003708  1  5A 02 28     
00370B  1  35 1C                and zpAN,x
00370D  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003711  1  D0 FE 68 49  
003715  1  30 DD 66 02  
00371B  1  CA                   dex
00371C  1  10 E6                bpl tand6
00371E  1  A2 03                ldx #3
003720  1               tand7:
003720  1  A9 FF 48 BD          set_ax  absANa,$ff
003724  1  5A 02 28     
003727  1  35 1C                and zpAN,x
003729  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
00372D  1  D0 FE 68 49  
003731  1  7D DD 66 02  
003737  1  CA                   dex
003738  1  10 E6                bpl tand7
00373A  1               
00373A  1  A2 03                ldx #3      ;abs,x
00373C  1               tand8:
00373C  1  A9 00 48 BD          set_ax  absANa,0
003740  1  5A 02 28     
003743  1  3D 4E 02             and absAN,x
003746  1  08 DD 62 02          tst_ax  absrlo,absflo,0
00374A  1  D0 FE 68 49  
00374E  1  30 DD 66 02  
003754  1  CA                   dex
003755  1  10 E5                bpl tand8
003757  1  A2 03                ldx #3
003759  1               tand9:
003759  1  A9 FF 48 BD          set_ax  absANa,$ff
00375D  1  5A 02 28     
003760  1  3D 4E 02             and absAN,x
003763  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003767  1  D0 FE 68 49  
00376B  1  7D DD 66 02  
003771  1  CA                   dex
003772  1  10 E5                bpl tand9
003774  1               
003774  1  A0 03                ldy #3      ;abs,y
003776  1               tand10:
003776  1  A9 00 48 B9          set_ay  absANa,0
00377A  1  5A 02 28     
00377D  1  39 4E 02             and absAN,y
003780  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003784  1  D0 FE 68 49  
003788  1  30 D9 66 02  
00378E  1  88                   dey
00378F  1  10 E5                bpl tand10
003791  1  A0 03                ldy #3
003793  1               tand11:
003793  1  A9 FF 48 B9          set_ay  absANa,$ff
003797  1  5A 02 28     
00379A  1  39 4E 02             and absAN,y
00379D  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
0037A1  1  D0 FE 68 49  
0037A5  1  7D D9 66 02  
0037AB  1  88                   dey
0037AC  1  10 E5                bpl tand11
0037AE  1               
0037AE  1  A2 06                ldx #6      ;(zp,x)
0037B0  1  A0 03                ldy #3
0037B2  1               tand12:
0037B2  1  A9 00 48 B9          set_ay  absANa,0
0037B6  1  5A 02 28     
0037B9  1  21 3A                and (indAN,x)
0037BB  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0037BF  1  D0 FE 68 49  
0037C3  1  30 D9 66 02  
0037C9  1  CA                   dex
0037CA  1  CA                   dex
0037CB  1  88                   dey
0037CC  1  10 E4                bpl tand12
0037CE  1  A2 06                ldx #6
0037D0  1  A0 03                ldy #3
0037D2  1               tand13:
0037D2  1  A9 FF 48 B9          set_ay  absANa,$ff
0037D6  1  5A 02 28     
0037D9  1  21 3A                and (indAN,x)
0037DB  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
0037DF  1  D0 FE 68 49  
0037E3  1  7D D9 66 02  
0037E9  1  CA                   dex
0037EA  1  CA                   dex
0037EB  1  88                   dey
0037EC  1  10 E4                bpl tand13
0037EE  1               
0037EE  1  A0 03                ldy #3      ;(zp),y
0037F0  1               tand14:
0037F0  1  A9 00 48 B9          set_ay  absANa,0
0037F4  1  5A 02 28     
0037F7  1  31 3A                and (indAN),y
0037F9  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0037FD  1  D0 FE 68 49  
003801  1  30 D9 66 02  
003807  1  88                   dey
003808  1  10 E6                bpl tand14
00380A  1  A0 03                ldy #3
00380C  1               tand15:
00380C  1  A9 FF 48 B9          set_ay  absANa,$ff
003810  1  5A 02 28     
003813  1  31 3A                and (indAN),y
003815  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003819  1  D0 FE 68 49  
00381D  1  7D D9 66 02  
003823  1  88                   dey
003824  1  10 E6                bpl tand15
003826  1  AD 00 02 C9          next_test
00382A  1  26 D0 FE A9  
00382E  1  27 8D 00 02  
00386E  1               
00386E  1               ; EOR
00386E  1  A2 03                ldx #3          ;immediate - self modifying code
003870  1  B5 20        teor:   lda zpEO,x
003872  1  8D 0C 02             sta ex_eori+1   ;set EOR # operand
003875  1  A9 00 48 BD          set_ax  absEOa,0
003879  1  5E 02 28     
00387C  1  20 0B 02             jsr ex_eori     ;execute EOR # in RAM
00387F  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003883  1  D0 FE 68 49  
003887  1  30 DD 66 02  
00388D  1  CA                   dex
00388E  1  10 E0                bpl teor
003890  1  A2 03                ldx #3
003892  1  B5 20        teor1:  lda zpEO,x
003894  1  8D 0C 02             sta ex_eori+1   ;set EOR # operand
003897  1  A9 FF 48 BD          set_ax  absEOa,$ff
00389B  1  5E 02 28     
00389E  1  20 0B 02             jsr ex_eori     ;execute EOR # in RAM
0038A1  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0038A5  1  D0 FE 68 49  
0038A9  1  7D DD 66 02  
0038AF  1  CA                   dex
0038B0  1  10 E0                bpl teor1
0038B2  1               
0038B2  1  A2 03                ldx #3      ;zp
0038B4  1  B5 20        teor2:   lda zpEO,x
0038B6  1  85 0C                sta zpt
0038B8  1  A9 00 48 BD          set_ax  absEOa,0
0038BC  1  5E 02 28     
0038BF  1  45 0C                eor zpt
0038C1  1  08 DD 62 02          tst_ax  absrlo,absflo,0
0038C5  1  D0 FE 68 49  
0038C9  1  30 DD 66 02  
0038CF  1  CA                   dex
0038D0  1  10 E2                bpl teor2
0038D2  1  A2 03                ldx #3
0038D4  1  B5 20        teor3:  lda zpEO,x
0038D6  1  85 0C                sta zpt
0038D8  1  A9 FF 48 BD          set_ax  absEOa,$ff
0038DC  1  5E 02 28     
0038DF  1  45 0C                eor zpt
0038E1  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
0038E5  1  D0 FE 68 49  
0038E9  1  7D DD 66 02  
0038EF  1  CA                   dex
0038F0  1  10 E2                bpl teor3
0038F2  1               
0038F2  1  A2 03                ldx #3      ;abs
0038F4  1  B5 20        teor4:  lda zpEO,x
0038F6  1  8D 03 02             sta abst
0038F9  1  A9 00 48 BD          set_ax  absEOa,0
0038FD  1  5E 02 28     
003900  1  4D 03 02             eor abst
003903  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003907  1  D0 FE 68 49  
00390B  1  30 DD 66 02  
003911  1  CA                   dex
003912  1  10 E0                bpl teor4
003914  1  A2 03                ldx #3
003916  1  B5 20        teor5:  lda zpEO,x
003918  1  8D 03 02             sta abst
00391B  1  A9 FF 48 BD          set_ax  absEOa,$ff
00391F  1  5E 02 28     
003922  1  4D 03 02             eor abst
003925  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003929  1  D0 FE 68 49  
00392D  1  7D DD 66 02  
003933  1  CA                   dex
003934  1  10 02                bpl teor6
003936  1               
003936  1  A2 03                ldx #3      ;zp,x
003938  1               teor6:
003938  1  A9 00 48 BD          set_ax  absEOa,0
00393C  1  5E 02 28     
00393F  1  55 20                eor zpEO,x
003941  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003945  1  D0 FE 68 49  
003949  1  30 DD 66 02  
00394F  1  CA                   dex
003950  1  10 E6                bpl teor6
003952  1  A2 03                ldx #3
003954  1               teor7:
003954  1  A9 FF 48 BD          set_ax  absEOa,$ff
003958  1  5E 02 28     
00395B  1  55 20                eor zpEO,x
00395D  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003961  1  D0 FE 68 49  
003965  1  7D DD 66 02  
00396B  1  CA                   dex
00396C  1  10 E6                bpl teor7
00396E  1               
00396E  1  A2 03                ldx #3      ;abs,x
003970  1               teor8:
003970  1  A9 00 48 BD          set_ax  absEOa,0
003974  1  5E 02 28     
003977  1  5D 52 02             eor absEO,x
00397A  1  08 DD 62 02          tst_ax  absrlo,absflo,0
00397E  1  D0 FE 68 49  
003982  1  30 DD 66 02  
003988  1  CA                   dex
003989  1  10 E5                bpl teor8
00398B  1  A2 03                ldx #3
00398D  1               teor9:
00398D  1  A9 FF 48 BD          set_ax  absEOa,$ff
003991  1  5E 02 28     
003994  1  5D 52 02             eor absEO,x
003997  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
00399B  1  D0 FE 68 49  
00399F  1  7D DD 66 02  
0039A5  1  CA                   dex
0039A6  1  10 E5                bpl teor9
0039A8  1               
0039A8  1  A0 03                ldy #3      ;abs,y
0039AA  1               teor10:
0039AA  1  A9 00 48 B9          set_ay  absEOa,0
0039AE  1  5E 02 28     
0039B1  1  59 52 02             eor absEO,y
0039B4  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0039B8  1  D0 FE 68 49  
0039BC  1  30 D9 66 02  
0039C2  1  88                   dey
0039C3  1  10 E5                bpl teor10
0039C5  1  A0 03                ldy #3
0039C7  1               teor11:
0039C7  1  A9 FF 48 B9          set_ay  absEOa,$ff
0039CB  1  5E 02 28     
0039CE  1  59 52 02             eor absEO,y
0039D1  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
0039D5  1  D0 FE 68 49  
0039D9  1  7D D9 66 02  
0039DF  1  88                   dey
0039E0  1  10 E5                bpl teor11
0039E2  1               
0039E2  1  A2 06                ldx #6      ;(zp,x)
0039E4  1  A0 03                ldy #3
0039E6  1               teor12:
0039E6  1  A9 00 48 B9          set_ay  absEOa,0
0039EA  1  5E 02 28     
0039ED  1  41 42                eor (indEO,x)
0039EF  1  08 D9 62 02          tst_ay  absrlo,absflo,0
0039F3  1  D0 FE 68 49  
0039F7  1  30 D9 66 02  
0039FD  1  CA                   dex
0039FE  1  CA                   dex
0039FF  1  88                   dey
003A00  1  10 E4                bpl teor12
003A02  1  A2 06                ldx #6
003A04  1  A0 03                ldy #3
003A06  1               teor13:
003A06  1  A9 FF 48 B9          set_ay  absEOa,$ff
003A0A  1  5E 02 28     
003A0D  1  41 42                eor (indEO,x)
003A0F  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003A13  1  D0 FE 68 49  
003A17  1  7D D9 66 02  
003A1D  1  CA                   dex
003A1E  1  CA                   dex
003A1F  1  88                   dey
003A20  1  10 E4                bpl teor13
003A22  1               
003A22  1  A0 03                ldy #3      ;(zp),y
003A24  1               teor14:
003A24  1  A9 00 48 B9          set_ay  absEOa,0
003A28  1  5E 02 28     
003A2B  1  51 42                eor (indEO),y
003A2D  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003A31  1  D0 FE 68 49  
003A35  1  30 D9 66 02  
003A3B  1  88                   dey
003A3C  1  10 E6                bpl teor14
003A3E  1  A0 03                ldy #3
003A40  1               teor15:
003A40  1  A9 FF 48 B9          set_ay  absEOa,$ff
003A44  1  5E 02 28     
003A47  1  51 42                eor (indEO),y
003A49  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003A4D  1  D0 FE 68 49  
003A51  1  7D D9 66 02  
003A57  1  88                   dey
003A58  1  10 E6                bpl teor15
003A5A  1  AD 00 02 C9          next_test
003A5E  1  27 D0 FE A9  
003A62  1  28 8D 00 02  
003AA2  1               
003AA2  1               ; OR
003AA2  1  A2 03                ldx #3          ;immediate - self modifying code
003AA4  1  B5 18        tora:   lda zpOR,x
003AA6  1  8D 0F 02             sta ex_orai+1   ;set ORA # operand
003AA9  1  A9 00 48 BD          set_ax  absORa,0
003AAD  1  56 02 28     
003AB0  1  20 0E 02             jsr ex_orai     ;execute ORA # in RAM
003AB3  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003AB7  1  D0 FE 68 49  
003ABB  1  30 DD 66 02  
003AC1  1  CA                   dex
003AC2  1  10 E0                bpl tora
003AC4  1  A2 03                ldx #3
003AC6  1  B5 18        tora1:  lda zpOR,x
003AC8  1  8D 0F 02             sta ex_orai+1   ;set ORA # operand
003ACB  1  A9 FF 48 BD          set_ax  absORa,$ff
003ACF  1  56 02 28     
003AD2  1  20 0E 02             jsr ex_orai     ;execute ORA # in RAM
003AD5  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003AD9  1  D0 FE 68 49  
003ADD  1  7D DD 66 02  
003AE3  1  CA                   dex
003AE4  1  10 E0                bpl tora1
003AE6  1               
003AE6  1  A2 03                ldx #3      ;zp
003AE8  1  B5 18        tora2:  lda zpOR,x
003AEA  1  85 0C                sta zpt
003AEC  1  A9 00 48 BD          set_ax  absORa,0
003AF0  1  56 02 28     
003AF3  1  05 0C                ora zpt
003AF5  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003AF9  1  D0 FE 68 49  
003AFD  1  30 DD 66 02  
003B03  1  CA                   dex
003B04  1  10 E2                bpl tora2
003B06  1  A2 03                ldx #3
003B08  1  B5 18        tora3:  lda zpOR,x
003B0A  1  85 0C                sta zpt
003B0C  1  A9 FF 48 BD          set_ax  absORa,$ff
003B10  1  56 02 28     
003B13  1  05 0C                ora zpt
003B15  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003B19  1  D0 FE 68 49  
003B1D  1  7D DD 66 02  
003B23  1  CA                   dex
003B24  1  10 E2                bpl tora3
003B26  1               
003B26  1  A2 03                ldx #3      ;abs
003B28  1  B5 18        tora4:  lda zpOR,x
003B2A  1  8D 03 02             sta abst
003B2D  1  A9 00 48 BD          set_ax  absORa,0
003B31  1  56 02 28     
003B34  1  0D 03 02             ora abst
003B37  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003B3B  1  D0 FE 68 49  
003B3F  1  30 DD 66 02  
003B45  1  CA                   dex
003B46  1  10 E0                bpl tora4
003B48  1  A2 03                ldx #3
003B4A  1  B5 18        tora5:  lda zpOR,x
003B4C  1  8D 03 02             sta abst
003B4F  1  A9 FF 48 BD          set_ax  absORa,$ff
003B53  1  56 02 28     
003B56  1  0D 03 02             ora abst
003B59  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003B5D  1  D0 FE 68 49  
003B61  1  7D DD 66 02  
003B67  1  CA                   dex
003B68  1  10 02                bpl tora6
003B6A  1               
003B6A  1  A2 03                ldx #3      ;zp,x
003B6C  1               tora6:
003B6C  1  A9 00 48 BD          set_ax  absORa,0
003B70  1  56 02 28     
003B73  1  15 18                ora zpOR,x
003B75  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003B79  1  D0 FE 68 49  
003B7D  1  30 DD 66 02  
003B83  1  CA                   dex
003B84  1  10 E6                bpl tora6
003B86  1  A2 03                ldx #3
003B88  1               tora7:
003B88  1  A9 FF 48 BD          set_ax  absORa,$ff
003B8C  1  56 02 28     
003B8F  1  15 18                ora zpOR,x
003B91  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003B95  1  D0 FE 68 49  
003B99  1  7D DD 66 02  
003B9F  1  CA                   dex
003BA0  1  10 E6                bpl tora7
003BA2  1               
003BA2  1  A2 03                ldx #3      ;abs,x
003BA4  1               tora8:
003BA4  1  A9 00 48 BD          set_ax  absORa,0
003BA8  1  56 02 28     
003BAB  1  1D 4A 02             ora absOR,x
003BAE  1  08 DD 62 02          tst_ax  absrlo,absflo,0
003BB2  1  D0 FE 68 49  
003BB6  1  30 DD 66 02  
003BBC  1  CA                   dex
003BBD  1  10 E5                bpl tora8
003BBF  1  A2 03                ldx #3
003BC1  1               tora9:
003BC1  1  A9 FF 48 BD          set_ax  absORa,$ff
003BC5  1  56 02 28     
003BC8  1  1D 4A 02             ora absOR,x
003BCB  1  08 DD 62 02          tst_ax  absrlo,absflo,$ff-fnz
003BCF  1  D0 FE 68 49  
003BD3  1  7D DD 66 02  
003BD9  1  CA                   dex
003BDA  1  10 E5                bpl tora9
003BDC  1               
003BDC  1  A0 03                ldy #3      ;abs,y
003BDE  1               tora10:
003BDE  1  A9 00 48 B9          set_ay  absORa,0
003BE2  1  56 02 28     
003BE5  1  19 4A 02             ora absOR,y
003BE8  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003BEC  1  D0 FE 68 49  
003BF0  1  30 D9 66 02  
003BF6  1  88                   dey
003BF7  1  10 E5                bpl tora10
003BF9  1  A0 03                ldy #3
003BFB  1               tora11:
003BFB  1  A9 FF 48 B9          set_ay  absORa,$ff
003BFF  1  56 02 28     
003C02  1  19 4A 02             ora absOR,y
003C05  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003C09  1  D0 FE 68 49  
003C0D  1  7D D9 66 02  
003C13  1  88                   dey
003C14  1  10 E5                bpl tora11
003C16  1               
003C16  1  A2 06                ldx #6      ;(zp,x)
003C18  1  A0 03                ldy #3
003C1A  1               tora12:
003C1A  1  A9 00 48 B9          set_ay  absORa,0
003C1E  1  56 02 28     
003C21  1  01 4A                ora (indOR,x)
003C23  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003C27  1  D0 FE 68 49  
003C2B  1  30 D9 66 02  
003C31  1  CA                   dex
003C32  1  CA                   dex
003C33  1  88                   dey
003C34  1  10 E4                bpl tora12
003C36  1  A2 06                ldx #6
003C38  1  A0 03                ldy #3
003C3A  1               tora13:
003C3A  1  A9 FF 48 B9          set_ay  absORa,$ff
003C3E  1  56 02 28     
003C41  1  01 4A                ora (indOR,x)
003C43  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003C47  1  D0 FE 68 49  
003C4B  1  7D D9 66 02  
003C51  1  CA                   dex
003C52  1  CA                   dex
003C53  1  88                   dey
003C54  1  10 E4                bpl tora13
003C56  1               
003C56  1  A0 03                ldy #3      ;(zp),y
003C58  1               tora14:
003C58  1  A9 00 48 B9          set_ay  absORa,0
003C5C  1  56 02 28     
003C5F  1  11 4A                ora (indOR),y
003C61  1  08 D9 62 02          tst_ay  absrlo,absflo,0
003C65  1  D0 FE 68 49  
003C69  1  30 D9 66 02  
003C6F  1  88                   dey
003C70  1  10 E6                bpl tora14
003C72  1  A0 03                ldy #3
003C74  1               tora15:
003C74  1  A9 FF 48 B9          set_ay  absORa,$ff
003C78  1  56 02 28     
003C7B  1  11 4A                ora (indOR),y
003C7D  1  08 D9 62 02          tst_ay  absrlo,absflo,$ff-fnz
003C81  1  D0 FE 68 49  
003C85  1  7D D9 66 02  
003C8B  1  88                   dey
003C8C  1  10 E6                bpl tora15
003C8E  1                   .if I_flag = 3
003C8E  1  58                   cli
003C8F  1                   .endif
003C8F  1  AD 00 02 C9          next_test
003C93  1  28 D0 FE A9  
003C97  1  29 8D 00 02  
003CD7  1               
003CD7  1               ; full binary add/subtract test
003CD7  1               ; iterates through all combinations of operands and carry input
003CD7  1               ; uses increments/decrements to predict result & result flags
003CD7  1  D8                   cld
003CD8  1  A2 0E                ldx #ad2        ;for indexed test
003CDA  1  A0 FF                ldy #$ff        ;max range
003CDC  1  A9 00                lda #0          ;start with adding zeroes & no carry
003CDE  1  85 0C                sta adfc        ;carry in - for diag
003CE0  1  85 0D                sta ad1         ;operand 1 - accumulator
003CE2  1  85 0E                sta ad2         ;operand 2 - memory or immediate
003CE4  1  8D 03 02             sta ada2        ;non zp
003CE7  1  85 0F                sta adrl        ;expected result bits 0-7
003CE9  1  85 10                sta adrh        ;expected result bit 8 (carry out)
003CEB  1  A9 FF                lda #$ff        ;complemented operand 2 for subtract
003CED  1  85 12                sta sb2
003CEF  1  8D 04 02             sta sba2        ;non zp
003CF2  1  A9 02                lda #2          ;expected Z-flag
003CF4  1  85 11                sta adrf
003CF6  1  18           tadd:   clc             ;test with carry clear
003CF7  1  20 7E 3D             jsr chkadd
003CFA  1  E6 0C                inc adfc        ;now with carry
003CFC  1  E6 0F                inc adrl        ;result +1
003CFE  1  08                   php             ;save N & Z from low result
003CFF  1  08                   php
003D00  1  68                   pla             ;accu holds expected flags
003D01  1  29 82                and #$82        ;mask N & Z
003D03  1  28                   plp
003D04  1  D0 02                bne tadd1
003D06  1  E6 10                inc adrh        ;result bit 8 - carry
003D08  1  05 10        tadd1:  ora adrh        ;merge C to expected flags
003D0A  1  85 11                sta adrf        ;save expected flags except overflow
003D0C  1  38                   sec             ;test with carry set
003D0D  1  20 7E 3D             jsr chkadd
003D10  1  C6 0C                dec adfc        ;same for operand +1 but no carry
003D12  1  E6 0D                inc ad1
003D14  1  D0 E0                bne tadd        ;iterate op1
003D16  1  A9 00                lda #0          ;preset result to op2 when op1 = 0
003D18  1  85 10                sta adrh
003D1A  1  EE 03 02             inc ada2
003D1D  1  E6 0E                inc ad2
003D1F  1  08                   php             ;save NZ as operand 2 becomes the new result
003D20  1  68                   pla
003D21  1  29 82                and #$82        ;mask N00000Z0
003D23  1  85 11                sta adrf        ;no need to check carry as we are adding to 0
003D25  1  C6 12                dec sb2         ;complement subtract operand 2
003D27  1  CE 04 02             dec sba2
003D2A  1  A5 0E                lda ad2
003D2C  1  85 0F                sta adrl
003D2E  1  D0 C6                bne tadd        ;iterate op2
003D30  1                   .if disable_decimal < 1
003D30  1                       next_test
003D30  1               
003D30  1               ; decimal add/subtract test
003D30  1               ; *** WARNING - tests documented behavior only! ***
003D30  1               ;   only valid BCD operands are tested, N V Z flags are ignored
003D30  1               ; iterates through all valid combinations of operands and carry input
003D30  1               ; uses increments/decrements to predict result & carry flag
003D30  1                       sed
003D30  1                       ldx #ad2        ;for indexed test
003D30  1                       ldy #$ff        ;max range
003D30  1                       lda #$99        ;start with adding 99 to 99 with carry
003D30  1                       sta ad1         ;operand 1 - accumulator
003D30  1                       sta ad2         ;operand 2 - memory or immediate
003D30  1                       sta ada2        ;non zp
003D30  1                       sta adrl        ;expected result bits 0-7
003D30  1                       lda #1          ;set carry in & out
003D30  1                       sta adfc        ;carry in - for diag
003D30  1                       sta adrh        ;expected result bit 8 (carry out)
003D30  1                       lda #0          ;complemented operand 2 for subtract
003D30  1                       sta sb2
003D30  1                       sta sba2        ;non zp
003D30  1               tdad:   sec             ;test with carry set
003D30  1                       jsr chkdad
003D30  1                       dec adfc        ;now with carry clear
003D30  1                       lda adrl        ;decimal adjust result
003D30  1                       bne tdad1       ;skip clear carry & preset result 99 (9A-1)
003D30  1                       dec adrh
003D30  1                       lda #$99
003D30  1                       sta adrl
003D30  1                       bne tdad3
003D30  1               tdad1:  and #$f         ;lower nibble mask
003D30  1                       bne tdad2       ;no decimal adjust needed
003D30  1                       dec adrl        ;decimal adjust (?0-6)
003D30  1                       dec adrl
003D30  1                       dec adrl
003D30  1                       dec adrl
003D30  1                       dec adrl
003D30  1                       dec adrl
003D30  1               tdad2:  dec adrl        ;result -1
003D30  1               tdad3:  clc             ;test with carry clear
003D30  1                       jsr chkdad
003D30  1                       inc adfc        ;same for operand -1 but with carry
003D30  1                       lda ad1         ;decimal adjust operand 1
003D30  1                       beq tdad5       ;iterate operand 2
003D30  1                       and #$f         ;lower nibble mask
003D30  1                       bne tdad4       ;skip decimal adjust
003D30  1                       dec ad1         ;decimal adjust (?0-6)
003D30  1                       dec ad1
003D30  1                       dec ad1
003D30  1                       dec ad1
003D30  1                       dec ad1
003D30  1                       dec ad1
003D30  1               tdad4:  dec ad1         ;operand 1 -1
003D30  1                       jmp tdad        ;iterate op1
003D30  1               
003D30  1               tdad5:  lda #$99        ;precharge op1 max
003D30  1                       sta ad1
003D30  1                       lda ad2         ;decimal adjust operand 2
003D30  1                       beq tdad7       ;end of iteration
003D30  1                       and #$f         ;lower nibble mask
003D30  1                       bne tdad6       ;skip decimal adjust
003D30  1                       dec ad2         ;decimal adjust (?0-6)
003D30  1                       dec ad2
003D30  1                       dec ad2
003D30  1                       dec ad2
003D30  1                       dec ad2
003D30  1                       dec ad2
003D30  1                       inc sb2         ;complemented decimal adjust for subtract (?9+6)
003D30  1                       inc sb2
003D30  1                       inc sb2
003D30  1                       inc sb2
003D30  1                       inc sb2
003D30  1                       inc sb2
003D30  1               tdad6:  dec ad2         ;operand 2 -1
003D30  1                       inc sb2         ;complemented operand for subtract
003D30  1                       lda sb2
003D30  1                       sta sba2        ;copy as non zp operand
003D30  1                       lda ad2
003D30  1                       sta ada2        ;copy as non zp operand
003D30  1                       sta adrl        ;new result since op1+carry=00+carry +op2=op2
003D30  1                       inc adrh        ;result carry
003D30  1                       bne tdad        ;iterate op2
003D30  1               tdad7:
003D30  1                       next_test
003D30  1               
003D30  1               ; decimal/binary switch test
003D30  1               ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
003D30  1               ;   tables
003D30  1                       clc
003D30  1                       cld
003D30  1                       php
003D30  1                       lda #$55
003D30  1                       adc #$55
003D30  1                       cmp #$aa
003D30  1                       trap_ne         ;expected binary result after cld
003D30  1                       clc
003D30  1                       sed
003D30  1                       php
003D30  1                       lda #$55
003D30  1                       adc #$55
003D30  1                       cmp #$10
003D30  1                       trap_ne         ;expected decimal result after sed
003D30  1                       cld
003D30  1                       plp
003D30  1                       lda #$55
003D30  1                       adc #$55
003D30  1                       cmp #$10
003D30  1                       trap_ne         ;expected decimal result after plp D=1
003D30  1                       plp
003D30  1                       lda #$55
003D30  1                       adc #$55
003D30  1                       cmp #$aa
003D30  1                       trap_ne         ;expected binary result after plp D=0
003D30  1                       clc
003D30  1                       lda #>bin_rti_ret ;emulated interrupt for rti
003D30  1                       pha
003D30  1                       lda #<bin_rti_ret
003D30  1                       pha
003D30  1                       php
003D30  1                       sed
003D30  1                       lda #>dec_rti_ret ;emulated interrupt for rti
003D30  1                       pha
003D30  1                       lda #<dec_rti_ret
003D30  1                       pha
003D30  1                       php
003D30  1                       cld
003D30  1                       rti
003D30  1               dec_rti_ret:
003D30  1                       lda #$55
003D30  1                       adc #$55
003D30  1                       cmp #$10
003D30  1                       trap_ne         ;expected decimal result after rti D=1
003D30  1                       rti
003D30  1               bin_rti_ret:
003D30  1                       lda #$55
003D30  1                       adc #$55
003D30  1                       cmp #$aa
003D30  1                       trap_ne         ;expected binary result after rti D=0
003D30  1                   .endif
003D30  1               
003D30  1  AD 00 02             lda test_case
003D33  1  C9 29                cmp #test_num
003D35  1  D0 FE                trap_ne         ;previous test is out of sequence
003D37  1  A9 F0                lda #$f0        ;mark opcode testing complete
003D39  1  8D 00 02             sta test_case
003D3C  1               
003D3C  1               ; final RAM integrity test
003D3C  1               ;   verifies that none of the previous tests has altered RAM outside of the
003D3C  1               ;   designated write areas.
003D3C  1  D8 A9 00 85          check_ram
003D40  1  0C 85 0F 8D  
003D44  1  55 05 18 A2  
003D78  1               ; *** DEBUG INFO ***
003D78  1               ; to debug checksum errors uncomment check_ram in the next_test macro to
003D78  1               ; narrow down the responsible opcode.
003D78  1               ; may give false errors when monitor, OS or other background activity is
003D78  1               ; allowed during previous tests.
003D78  1               
003D78  1               
003D78  1               ; S U C C E S S ************************************************
003D78  1               ; -------------
003D78  1  4C 78 3D             success         ;if you get here everything went well
003D7B  1               ; -------------
003D7B  1               ; S U C C E S S ************************************************
003D7B  1  4C 00 04             jmp start       ;run again
003D7E  1               
003D7E  1                   .if disable_decimal < 1
003D7E  1               ; core subroutine of the decimal add/subtract test
003D7E  1               ; *** WARNING - tests documented behavior only! ***
003D7E  1               ;   only valid BCD operands are tested, N V Z flags are ignored
003D7E  1               ; iterates through all valid combinations of operands and carry input
003D7E  1               ; uses increments/decrements to predict result & carry flag
003D7E  1               chkdad:
003D7E  1               ; decimal ADC / SBC zp
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad1
003D7E  1                       adc ad2         ;perform add
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda ad1
003D7E  1                       sbc sb2         ;perform subtract
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad flags
003D7E  1                       plp
003D7E  1               ; decimal ADC / SBC abs
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad1
003D7E  1                       adc ada2        ;perform add
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda ad1
003D7E  1                       sbc sba2        ;perform subtract
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1               ; decimal ADC / SBC #
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad2
003D7E  1                       sta ex_adci+1   ;set ADC # operand
003D7E  1                       lda ad1
003D7E  1                       jsr ex_adci     ;execute ADC # in RAM
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda sb2
003D7E  1                       sta ex_sbci+1   ;set SBC # operand
003D7E  1                       lda ad1
003D7E  1                       jsr ex_sbci     ;execute SBC # in RAM
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1               ; decimal ADC / SBC zp,x
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad1
003D7E  1                       adc 0,x         ;perform add
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda ad1
003D7E  1                       sbc sb2-ad2,x   ;perform subtract
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1               ; decimal ADC / SBC abs,x
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad1
003D7E  1                       adc ada2-ad2,x  ;perform add
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda ad1
003D7E  1                       sbc sba2-ad2,x  ;perform subtract
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1               ; decimal ADC / SBC abs,y
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad1
003D7E  1                       adc ada2-$ff,y  ;perform add
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda ad1
003D7E  1                       sbc sba2-$ff,y  ;perform subtract
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1               ; decimal ADC / SBC (zp,x)
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad1
003D7E  1                       adc (<adi2-ad2,x) ;perform add
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda ad1
003D7E  1                       sbc (<sbi2-ad2,x) ;perform subtract
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1               ; decimal ADC / SBC (abs),y
003D7E  1                       php             ;save carry for subtract
003D7E  1                       lda ad1
003D7E  1                       adc (adiy2),y   ;perform add
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       php             ;save carry for next add
003D7E  1                       lda ad1
003D7E  1                       sbc (sbiy2),y   ;perform subtract
003D7E  1                       php
003D7E  1                       cmp adrl        ;check result
003D7E  1                       trap_ne         ;bad result
003D7E  1                       pla             ;check flags
003D7E  1                       and #1          ;mask carry
003D7E  1                       cmp adrh
003D7E  1                       trap_ne         ;bad carry
003D7E  1                       plp
003D7E  1                       rts
003D7E  1                   .endif
003D7E  1               
003D7E  1               ; core subroutine of the full binary add/subtract test
003D7E  1               ; iterates through all combinations of operands and carry input
003D7E  1               ; uses increments/decrements to predict result & result flags
003D7E  1  A5 11        chkadd: lda adrf        ;add V-flag if overflow
003D80  1  29 83                and #$83        ;keep N-----ZC / clear V
003D82  1  48                   pha
003D83  1  A5 0D                lda ad1         ;test sign unequal between operands
003D85  1  45 0E                eor ad2
003D87  1  30 0A                bmi ckad1       ;no overflow possible - operands have different sign
003D89  1  A5 0D                lda ad1         ;test sign equal between operands and result
003D8B  1  45 0F                eor adrl
003D8D  1  10 04                bpl ckad1       ;no overflow occured - operand and result have same sign
003D8F  1  68                   pla
003D90  1  09 40                ora #$40        ;set V
003D92  1  48                   pha
003D93  1  68           ckad1:  pla
003D94  1  85 11                sta adrf        ;save expected flags
003D96  1               ; binary ADC / SBC zp
003D96  1  08                   php             ;save carry for subtract
003D97  1  A5 0D                lda ad1
003D99  1  65 0E                adc ad2         ;perform add
003D9B  1  08                   php
003D9C  1  C5 0F                cmp adrl        ;check result
003D9E  1  D0 FE                trap_ne         ;bad result
003DA0  1  68                   pla             ;check flags
003DA1  1  29 C3                and #$c3        ;mask NV----ZC
003DA3  1  C5 11                cmp adrf
003DA5  1  D0 FE                trap_ne         ;bad flags
003DA7  1  28                   plp
003DA8  1  08                   php             ;save carry for next add
003DA9  1  A5 0D                lda ad1
003DAB  1  E5 12                sbc sb2         ;perform subtract
003DAD  1  08                   php
003DAE  1  C5 0F                cmp adrl        ;check result
003DB0  1  D0 FE                trap_ne         ;bad result
003DB2  1  68                   pla             ;check flags
003DB3  1  29 C3                and #$c3        ;mask NV----ZC
003DB5  1  C5 11                cmp adrf
003DB7  1  D0 FE                trap_ne         ;bad flags
003DB9  1  28                   plp
003DBA  1               ; binary ADC / SBC abs
003DBA  1  08                   php             ;save carry for subtract
003DBB  1  A5 0D                lda ad1
003DBD  1  6D 03 02             adc ada2        ;perform add
003DC0  1  08                   php
003DC1  1  C5 0F                cmp adrl        ;check result
003DC3  1  D0 FE                trap_ne         ;bad result
003DC5  1  68                   pla             ;check flags
003DC6  1  29 C3                and #$c3        ;mask NV----ZC
003DC8  1  C5 11                cmp adrf
003DCA  1  D0 FE                trap_ne         ;bad flags
003DCC  1  28                   plp
003DCD  1  08                   php             ;save carry for next add
003DCE  1  A5 0D                lda ad1
003DD0  1  ED 04 02             sbc sba2        ;perform subtract
003DD3  1  08                   php
003DD4  1  C5 0F                cmp adrl        ;check result
003DD6  1  D0 FE                trap_ne         ;bad result
003DD8  1  68                   pla             ;check flags
003DD9  1  29 C3                and #$c3        ;mask NV----ZC
003DDB  1  C5 11                cmp adrf
003DDD  1  D0 FE                trap_ne         ;bad flags
003DDF  1  28                   plp
003DE0  1               ; binary ADC / SBC #
003DE0  1  08                   php             ;save carry for subtract
003DE1  1  A5 0E                lda ad2
003DE3  1  8D 12 02             sta ex_adci+1   ;set ADC # operand
003DE6  1  A5 0D                lda ad1
003DE8  1  20 11 02             jsr ex_adci     ;execute ADC # in RAM
003DEB  1  08                   php
003DEC  1  C5 0F                cmp adrl        ;check result
003DEE  1  D0 FE                trap_ne         ;bad result
003DF0  1  68                   pla             ;check flags
003DF1  1  29 C3                and #$c3        ;mask NV----ZC
003DF3  1  C5 11                cmp adrf
003DF5  1  D0 FE                trap_ne         ;bad flags
003DF7  1  28                   plp
003DF8  1  08                   php             ;save carry for next add
003DF9  1  A5 12                lda sb2
003DFB  1  8D 15 02             sta ex_sbci+1   ;set SBC # operand
003DFE  1  A5 0D                lda ad1
003E00  1  20 14 02             jsr ex_sbci     ;execute SBC # in RAM
003E03  1  08                   php
003E04  1  C5 0F                cmp adrl        ;check result
003E06  1  D0 FE                trap_ne         ;bad result
003E08  1  68                   pla             ;check flags
003E09  1  29 C3                and #$c3        ;mask NV----ZC
003E0B  1  C5 11                cmp adrf
003E0D  1  D0 FE                trap_ne         ;bad flags
003E0F  1  28                   plp
003E10  1               ; binary ADC / SBC zp,x
003E10  1  08                   php             ;save carry for subtract
003E11  1  A5 0D                lda ad1
003E13  1  75 00                adc 0,x         ;perform add
003E15  1  08                   php
003E16  1  C5 0F                cmp adrl        ;check result
003E18  1  D0 FE                trap_ne         ;bad result
003E1A  1  68                   pla             ;check flags
003E1B  1  29 C3                and #$c3        ;mask NV----ZC
003E1D  1  C5 11                cmp adrf
003E1F  1  D0 FE                trap_ne         ;bad flags
003E21  1  28                   plp
003E22  1  08                   php             ;save carry for next add
003E23  1  A5 0D                lda ad1
003E25  1  F5 04                sbc sb2-ad2,x   ;perform subtract
003E27  1  08                   php
003E28  1  C5 0F                cmp adrl        ;check result
003E2A  1  D0 FE                trap_ne         ;bad result
003E2C  1  68                   pla             ;check flags
003E2D  1  29 C3                and #$c3        ;mask NV----ZC
003E2F  1  C5 11                cmp adrf
003E31  1  D0 FE                trap_ne         ;bad flags
003E33  1  28                   plp
003E34  1               ; binary ADC / SBC abs,x
003E34  1  08                   php             ;save carry for subtract
003E35  1  A5 0D                lda ad1
003E37  1  7D F5 01             adc ada2-ad2,x  ;perform add
003E3A  1  08                   php
003E3B  1  C5 0F                cmp adrl        ;check result
003E3D  1  D0 FE                trap_ne         ;bad result
003E3F  1  68                   pla             ;check flags
003E40  1  29 C3                and #$c3        ;mask NV----ZC
003E42  1  C5 11                cmp adrf
003E44  1  D0 FE                trap_ne         ;bad flags
003E46  1  28                   plp
003E47  1  08                   php             ;save carry for next add
003E48  1  A5 0D                lda ad1
003E4A  1  FD F6 01             sbc sba2-ad2,x  ;perform subtract
003E4D  1  08                   php
003E4E  1  C5 0F                cmp adrl        ;check result
003E50  1  D0 FE                trap_ne         ;bad result
003E52  1  68                   pla             ;check flags
003E53  1  29 C3                and #$c3        ;mask NV----ZC
003E55  1  C5 11                cmp adrf
003E57  1  D0 FE                trap_ne         ;bad flags
003E59  1  28                   plp
003E5A  1               ; binary ADC / SBC abs,y
003E5A  1  08                   php             ;save carry for subtract
003E5B  1  A5 0D                lda ad1
003E5D  1  79 04 01             adc ada2-$ff,y  ;perform add
003E60  1  08                   php
003E61  1  C5 0F                cmp adrl        ;check result
003E63  1  D0 FE                trap_ne         ;bad result
003E65  1  68                   pla             ;check flags
003E66  1  29 C3                and #$c3        ;mask NV----ZC
003E68  1  C5 11                cmp adrf
003E6A  1  D0 FE                trap_ne         ;bad flags
003E6C  1  28                   plp
003E6D  1  08                   php             ;save carry for next add
003E6E  1  A5 0D                lda ad1
003E70  1  F9 05 01             sbc sba2-$ff,y  ;perform subtract
003E73  1  08                   php
003E74  1  C5 0F                cmp adrl        ;check result
003E76  1  D0 FE                trap_ne         ;bad result
003E78  1  68                   pla             ;check flags
003E79  1  29 C3                and #$c3        ;mask NV----ZC
003E7B  1  C5 11                cmp adrf
003E7D  1  D0 FE                trap_ne         ;bad flags
003E7F  1  28                   plp
003E80  1               ; binary ADC / SBC (zp,x)
003E80  1  08                   php             ;save carry for subtract
003E81  1  A5 0D                lda ad1
003E83  1  61 44                adc (<adi2-ad2,x) ;perform add
003E85  1  08                   php
003E86  1  C5 0F                cmp adrl        ;check result
003E88  1  D0 FE                trap_ne         ;bad result
003E8A  1  68                   pla             ;check flags
003E8B  1  29 C3                and #$c3        ;mask NV----ZC
003E8D  1  C5 11                cmp adrf
003E8F  1  D0 FE                trap_ne         ;bad flags
003E91  1  28                   plp
003E92  1  08                   php             ;save carry for next add
003E93  1  A5 0D                lda ad1
003E95  1  E1 46                sbc (<sbi2-ad2,x) ;perform subtract
003E97  1  08                   php
003E98  1  C5 0F                cmp adrl        ;check result
003E9A  1  D0 FE                trap_ne         ;bad result
003E9C  1  68                   pla             ;check flags
003E9D  1  29 C3                and #$c3        ;mask NV----ZC
003E9F  1  C5 11                cmp adrf
003EA1  1  D0 FE                trap_ne         ;bad flags
003EA3  1  28                   plp
003EA4  1               ; binary ADC / SBC (abs),y
003EA4  1  08                   php             ;save carry for subtract
003EA5  1  A5 0D                lda ad1
003EA7  1  71 56                adc (adiy2),y   ;perform add
003EA9  1  08                   php
003EAA  1  C5 0F                cmp adrl        ;check result
003EAC  1  D0 FE                trap_ne         ;bad result
003EAE  1  68                   pla             ;check flags
003EAF  1  29 C3                and #$c3        ;mask NV----ZC
003EB1  1  C5 11                cmp adrf
003EB3  1  D0 FE                trap_ne         ;bad flags
003EB5  1  28                   plp
003EB6  1  08                   php             ;save carry for next add
003EB7  1  A5 0D                lda ad1
003EB9  1  F1 58                sbc (sbiy2),y   ;perform subtract
003EBB  1  08                   php
003EBC  1  C5 0F                cmp adrl        ;check result
003EBE  1  D0 FE                trap_ne         ;bad result
003EC0  1  68                   pla             ;check flags
003EC1  1  29 C3                and #$c3        ;mask NV----ZC
003EC3  1  C5 11                cmp adrf
003EC5  1  D0 FE                trap_ne         ;bad flags
003EC7  1  28                   plp
003EC8  1  60                   rts
003EC9  1               
003EC9  1               ; target for the jump absolute test
003EC9  1  88                   dey
003ECA  1  88                   dey
003ECB  1               test_far:
003ECB  1  08                   php             ;either SP or Y count will fail, if we do not hit
003ECC  1  88                   dey
003ECD  1  88                   dey
003ECE  1  88                   dey
003ECF  1  28                   plp
003ED0  1  B0 FE                trap_cs         ;flags loaded?
003ED2  1  70 FE                trap_vs
003ED4  1  30 FE                trap_mi
003ED6  1  F0 FE                trap_eq
003ED8  1  C9 46                cmp #'F'        ;registers loaded?
003EDA  1  D0 FE                trap_ne
003EDC  1  E0 41                cpx #'A'
003EDE  1  D0 FE                trap_ne
003EE0  1  C0 4F                cpy #('R'-3)
003EE2  1  D0 FE                trap_ne
003EE4  1  48                   pha             ;save a,x
003EE5  1  8A                   txa
003EE6  1  48                   pha
003EE7  1  BA                   tsx
003EE8  1  E0 FD                cpx #$fd        ;check SP
003EEA  1  D0 FE                trap_ne
003EEC  1  68                   pla             ;restore x
003EED  1  AA                   tax
003EEE  1  A9 FF 48 28          set_stat $ff
003EF2  1  68                   pla             ;restore a
003EF3  1  E8                   inx             ;return registers with modifications
003EF4  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
003EF6  1  4C 22 0B             jmp far_ret
003EF9  1               
003EF9  1               ; target for the jump indirect test
003EF9  1               ;       .align 2
003EF9  1                       .if * & 1       ; workaround for problems with .align 2
003EF9  1  00                       .byte 0     ;
003EFA  1                       .endif          ;
003EFA  1               ptr_tst_ind:
003EFA  1  03 3F                .word   test_ind
003EFC  1               ptr_ind_ret:
003EFC  1  B3 0B                .word   ind_ret
003EFE  1  4C FE 3E             trap            ;runover protection
003F01  1  88                   dey
003F02  1  88                   dey
003F03  1               test_ind:
003F03  1  08                   php             ;either SP or Y count will fail, if we do not hit
003F04  1  88                   dey
003F05  1  88                   dey
003F06  1  88                   dey
003F07  1  28                   plp
003F08  1  B0 FE                trap_cs         ;flags loaded?
003F0A  1  70 FE                trap_vs
003F0C  1  30 FE                trap_mi
003F0E  1  F0 FE                trap_eq
003F10  1  C9 49                cmp #'I'        ;registers loaded?
003F12  1  D0 FE                trap_ne
003F14  1  E0 4E                cpx #'N'
003F16  1  D0 FE                trap_ne
003F18  1  C0 41                cpy #('D'-3)
003F1A  1  D0 FE                trap_ne
003F1C  1  48                   pha             ;save a,x
003F1D  1  8A                   txa
003F1E  1  48                   pha
003F1F  1  BA                   tsx
003F20  1  E0 FD                cpx #$fd        ;check SP
003F22  1  D0 FE                trap_ne
003F24  1  68                   pla             ;restore x
003F25  1  AA                   tax
003F26  1  A9 FF 48 28          set_stat $ff
003F2A  1  68                   pla             ;restore a
003F2B  1  E8                   inx             ;return registers with modifications
003F2C  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
003F2E  1  6C FC 3E             jmp (ptr_ind_ret)
003F31  1  4C 31 3F             trap            ;runover protection
003F34  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003F37  1               
003F37  1               ; target for the jump subroutine test
003F37  1  88                   dey
003F38  1  88                   dey
003F39  1               test_jsr:
003F39  1  08                   php             ;either SP or Y count will fail, if we do not hit
003F3A  1  88                   dey
003F3B  1  88                   dey
003F3C  1  88                   dey
003F3D  1  28                   plp
003F3E  1  B0 FE                trap_cs         ;flags loaded?
003F40  1  70 FE                trap_vs
003F42  1  30 FE                trap_mi
003F44  1  F0 FE                trap_eq
003F46  1  C9 4A                cmp #'J'        ;registers loaded?
003F48  1  D0 FE                trap_ne
003F4A  1  E0 53                cpx #'S'
003F4C  1  D0 FE                trap_ne
003F4E  1  C0 4F                cpy #('R'-3)
003F50  1  D0 FE                trap_ne
003F52  1  48                   pha             ;save a,x
003F53  1  8A                   txa
003F54  1  48                   pha
003F55  1  BA                   tsx             ;sp -4? (return addr,a,x)
003F56  1  E0 FB                cpx #$fb
003F58  1  D0 FE                trap_ne
003F5A  1  AD FF 01             lda $1ff        ;propper return on stack
003F5D  1  C9 0C                cmp #>jsr_ret
003F5F  1  D0 FE                trap_ne
003F61  1  AD FE 01             lda $1fe
003F64  1  C9 25                cmp #<jsr_ret
003F66  1  D0 FE                trap_ne
003F68  1  A9 FF 48 28          set_stat $ff
003F6C  1  68                   pla             ;pull x,a
003F6D  1  AA                   tax
003F6E  1  68                   pla
003F6F  1  E8                   inx             ;return registers with modifications
003F70  1  49 AA                eor #$aa        ;N=1, V=1, Z=0, C=1
003F72  1  60                   rts
003F73  1  4C 73 3F             trap            ;runover protection
003F76  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003F79  1               
003F79  1               ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
003F79  1               nmi_trap:
003F79  1  4C 79 3F             trap            ;check stack for conditions at NMI
003F7C  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003F7F  1               res_trap:
003F7F  1  4C 7F 3F             trap            ;unexpected RESET
003F82  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003F85  1               
003F85  1  88                   dey
003F86  1  88                   dey
003F87  1               irq_trap:               ;BRK test or unextpected BRK or IRQ
003F87  1  08                   php             ;either SP or Y count will fail, if we do not hit
003F88  1  88                   dey
003F89  1  88                   dey
003F8A  1  88                   dey
003F8B  1                       ;next traps could be caused by unexpected BRK or IRQ
003F8B  1                       ;check stack for BREAK and originating location
003F8B  1                       ;possible jump/branch into weeds (uninitialized space)
003F8B  1  C9 BD                cmp #$ff-'B'    ;BRK pass 2 registers loaded?
003F8D  1  F0 42                beq break2
003F8F  1  C9 42                cmp #'B'        ;BRK pass 1 registers loaded?
003F91  1  D0 FE                trap_ne
003F93  1  E0 52                cpx #'R'
003F95  1  D0 FE                trap_ne
003F97  1  C0 48                cpy #'K'-3
003F99  1  D0 FE                trap_ne
003F9B  1  85 0A                sta irq_a       ;save registers during break test
003F9D  1  86 0B                stx irq_x
003F9F  1  BA                   tsx             ;test break on stack
003FA0  1  BD 02 01             lda $102,x
003FA3  1  C9 30                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
003FA5  1  D0 FE                trap_ne         ; - no break flag on stack
003FA7  1  68                   pla
003FA8  1  C9 34                cmp_flag intdis ;should have added interrupt disable
003FAA  1  D0 FE                trap_ne
003FAC  1  BA                   tsx
003FAD  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
003FAF  1  D0 FE                trap_ne
003FB1  1  AD FF 01             lda $1ff        ;propper return on stack
003FB4  1  C9 0C                cmp #>brk_ret0
003FB6  1  D0 FE                trap_ne
003FB8  1  AD FE 01             lda $1fe
003FBB  1  C9 98                cmp #<brk_ret0
003FBD  1  D0 FE                trap_ne
003FBF  1  A9 FF                load_flag $ff
003FC1  1  48                   pha
003FC2  1  A6 0B                ldx irq_x
003FC4  1  E8                   inx             ;return registers with modifications
003FC5  1  A5 0A                lda irq_a
003FC7  1  49 AA                eor #$aa
003FC9  1  28                   plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
003FCA  1  40                   rti
003FCB  1  4C CB 3F             trap            ;runover protection
003FCE  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
003FD1  1               
003FD1  1               break2:                 ;BRK pass 2
003FD1  1  E0 AD                cpx #$ff-'R'
003FD3  1  D0 FE                trap_ne
003FD5  1  C0 B1                cpy #$ff-'K'-3
003FD7  1  D0 FE                trap_ne
003FD9  1  85 0A                sta irq_a       ;save registers during break test
003FDB  1  86 0B                stx irq_x
003FDD  1  BA                   tsx             ;test break on stack
003FDE  1  BD 02 01             lda $102,x
003FE1  1  C9 FF                cmp_flag $ff    ;break test should have B=1
003FE3  1  D0 FE                trap_ne         ; - no break flag on stack
003FE5  1  68                   pla
003FE6  1  09 08                ora #decmode    ;ignore decmode cleared if 65c02
003FE8  1  C9 FF                cmp_flag $ff    ;actual passed flags
003FEA  1  D0 FE                trap_ne
003FEC  1  BA                   tsx
003FED  1  E0 FC                cpx #$fc        ;sp -3? (return addr, flags)
003FEF  1  D0 FE                trap_ne
003FF1  1  AD FF 01             lda $1ff        ;propper return on stack
003FF4  1  C9 0C                cmp #>brk_ret1
003FF6  1  D0 FE                trap_ne
003FF8  1  AD FE 01             lda $1fe
003FFB  1  C9 BE                cmp #<brk_ret1
003FFD  1  D0 FE                trap_ne
003FFF  1  A9 04                load_flag intdis
004001  1  48                   pha
004002  1  A6 0B                ldx irq_x
004004  1  E8                   inx             ;return registers with modifications
004005  1  A5 0A                lda irq_a
004007  1  49 AA                eor #$aa
004009  1  28                   plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
00400A  1  40                   rti
00400B  1  4C 0B 40             trap            ;runover protection
00400E  1  4C 00 04             jmp start       ;catastrophic error - cannot continue
004011  1               
004011  1                   .if report = 1
004011  1                       include "report.i65"
004011  1                   .endif
004011  1               
004011  1               ;copy of data to initialize BSS segment
004011  1                   .if load_data_direct <> 1
004011  1               zp_init:
004011  1               zp1_:   .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
004011  1               zp7f_:  .byte   $7f             ;test pattern for compare
004011  1               ;logical zeropage operands
004011  1               zpOR_:  .byte   0,$1f,$71,$80   ;test pattern for OR
004011  1               zpAN_:  .byte   $0f,$ff,$7f,$80 ;test pattern for AND
004011  1               zpEO_:  .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
004011  1               ;indirect addressing pointers
004011  1               ind1_:  .word   abs1            ;indirect pointer to pattern in absolute memory
004011  1                       .word   abs1+1
004011  1                       .word   abs1+2
004011  1                       .word   abs1+3
004011  1                       .word   abs7f
004011  1               inw1_:  .word   abs1-$f8        ;indirect pointer for wrap-test pattern
004011  1               indt_:  .word   abst            ;indirect pointer to store area in absolute memory
004011  1                       .word   abst+1
004011  1                       .word   abst+2
004011  1                       .word   abst+3
004011  1               inwt_:  .word   abst-$f8        ;indirect pointer for wrap-test store
004011  1               indAN_: .word   absAN           ;indirect pointer to AND pattern in absolute memory
004011  1                       .word   absAN+1
004011  1                       .word   absAN+2
004011  1                       .word   absAN+3
004011  1               indEO_: .word   absEO           ;indirect pointer to EOR pattern in absolute memory
004011  1                       .word   absEO+1
004011  1                       .word   absEO+2
004011  1                       .word   absEO+3
004011  1               indOR_: .word   absOR           ;indirect pointer to OR pattern in absolute memory
004011  1                       .word   absOR+1
004011  1                       .word   absOR+2
004011  1                       .word   absOR+3
004011  1               ;add/subtract indirect pointers
004011  1               adi2_:  .word   ada2            ;indirect pointer to operand 2 in absolute memory
004011  1               sbi2_:  .word   sba2            ;indirect pointer to complemented operand 2 (SBC)
004011  1               adiy2_: .word   ada2-$ff        ;with offset for indirect indexed
004011  1               sbiy2_: .word   sba2-$ff
004011  1               zp_end:
004011  1                   .if (zp_end - zp_init) <> (zp_bss_end - zp_bss)
004011  1                       ;force assembler error if size is different
004011  1                       .error "mismatch between bss and zeropage data"
004011  1                   .endif
004011  1               data_init:
004011  1               ex_and_:and #0              ;execute immediate opcodes
004011  1                       rts
004011  1               ex_eor_:eor #0              ;execute immediate opcodes
004011  1                       rts
004011  1               ex_ora_:ora #0              ;execute immediate opcodes
004011  1                       rts
004011  1               ex_adc_:adc #0              ;execute immediate opcodes
004011  1                       rts
004011  1               ex_sbc_:sbc #0              ;execute immediate opcodes
004011  1                       rts
004011  1               abs1_:  .byte   $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
004011  1               abs7f_: .byte   $7f             ;test pattern for compare
004011  1               ;loads
004011  1               fLDx_:  .byte   fn,fn,0,fz      ;expected flags for load
004011  1               ;shifts
004011  1               rASL_:                      ;expected result ASL & ROL -carry
004011  1               rROL_:  .byte   $86,$04,$82,0   ; "
004011  1               rROLc_: .byte   $87,$05,$83,1   ;expected result ROL +carry
004011  1               rLSR_:                      ;expected result LSR & ROR -carry
004011  1               rROR_:  .byte   $61,$41,$20,0   ; "
004011  1               rRORc_: .byte   $e1,$c1,$a0,$80 ;expected result ROR +carry
004011  1               fASL_:                      ;expected flags for shifts
004011  1               fROL_:  .byte   fnc,fc,fn,fz    ;no carry in
004011  1               fROLc_: .byte   fnc,fc,fn,0     ;carry in
004011  1               fLSR_:
004011  1               fROR_:  .byte   fc,0,fc,fz      ;no carry in
004011  1               fRORc_: .byte   fnc,fn,fnc,fn   ;carry in
004011  1               ;increments (decrements)
004011  1               rINC_:  .byte   $7f,$80,$ff,0,1 ;expected result for INC/DEC
004011  1               fINC_:  .byte   0,fn,fn,fz,0    ;expected flags for INC/DEC
004011  1               ;logical memory operand
004011  1               absOR_: .byte   0,$1f,$71,$80   ;test pattern for OR
004011  1               absAN_: .byte   $0f,$ff,$7f,$80 ;test pattern for AND
004011  1               absEO_: .byte   $ff,$0f,$8f,$8f ;test pattern for EOR
004011  1               ;logical accu operand
004011  1               absORa_:.byte   0,$f1,$1f,0     ;test pattern for OR
004011  1               absANa_:.byte   $f0,$ff,$ff,$ff ;test pattern for AND
004011  1               absEOa_:.byte   $ff,$f0,$f0,$0f ;test pattern for EOR
004011  1               ;logical results
004011  1               absrlo_:.byte   0,$ff,$7f,$80
004011  1               absflo_:.byte   fz,fn,0,fn
004011  1               data_end
004011  1                   .if (data_end - data_init) <> (data_bss_end - data_bss)
004011  1                       ;force assembler error if size is different
004011  1                       .error "mismatch between bss and data"
004011  1                   .endif
004011  1               
004011  1               vec_init
004011  1                       .word   nmi_trap
004011  1                       .word   res_trap
004011  1                       .word   irq_trap
004011  1               vec_bss equ $fffa
004011  1                   .endif                   ;end of RAM init data
004011  1               
004011  1                   .if (load_data_direct = 1) & (ROM_vectors = 1)
004011  1                       .segment "VECTORS"
004011  1                       .org $fffa       ;vectors
00FFFA  1  79 3F                .word   nmi_trap
00FFFC  1  7F 3F                .word   res_trap
00FFFE  1  87 3F                .word   irq_trap
010000  1                   .endif
010000  1               
